{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1480774635000},{"_id":"themes/clean-blog/README.md","hash":"c5c7b0fd01aa229304e7b00697517aaca51de577","modified":1481436814000},{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1481436814000},{"_id":"themes/clean-blog/_config.yml","hash":"b23cf469ae1c0459e475614bfef9d5c88df1e4a4","modified":1481437056000},{"_id":"source/_drafts/20161203 オリジナルgulpfileを書くのは悪い文明.md","hash":"515bf7780b4ef1e69fcc334b6b4cdf1d2c40ad58","modified":1480822183000},{"_id":"source/_posts/20161120 サイト引っ越しとかいう死語について.md","hash":"6b8b46d4c450d8bd4931fa5c295af357468d39b1","modified":1480694443000},{"_id":"source/_posts/20161202 Swift + Kitura + MySQL + CLion + CMakeで頑張っている件.md","hash":"e0d1b57c3760a939d6a4b841aef0bc161d8f3074","modified":1480694642000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1480691879000},{"_id":"source/_posts/20161202 swift buildで渡すオプションをいちいち書きたくないのでcmakeする.md","hash":"459dd83fef24d9cff533dc3a4b6057e2d2d15e8c","modified":1480694642000},{"_id":"source/_posts/20161211 Kotlin + AWS Lambda + API GatewayでServerlessできちゃうラッパー公開したのでDynamoDBとか使っちゃう.md","hash":"628c7ffffc4925f51772ad0b05f29474eef15e0e","modified":1481436513000},{"_id":"themes/clean-blog/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1481436814000},{"_id":"themes/clean-blog/.git/config","hash":"0037ed70f19e4933b19020ad514d8e9e049174f1","modified":1481436814000},{"_id":"themes/clean-blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1481436811000},{"_id":"themes/clean-blog/.git/index","hash":"9c04d5c434609513d5637a2797595538c5cf524e","modified":1481436814000},{"_id":"themes/clean-blog/.git/packed-refs","hash":"1dadbd4fdd53bbb7038fa2c7b3c71cd028c4ead4","modified":1481436814000},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1481436814000},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1481436814000},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1481436814000},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1481436814000},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1481436814000},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1481436814000},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1481436814000},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1481436814000},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1481436814000},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1481436814000},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1481436814000},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"ad0da72df13ce3566985bb390c2c9a9352cf4f07","modified":1481436814000},{"_id":"themes/clean-blog/layout/index.ejs","hash":"87995288ca6f95a04add641727aedd3f6afa55eb","modified":1481436814000},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1481436814000},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1481436814000},{"_id":"themes/clean-blog/layout/page.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1481436814000},{"_id":"themes/clean-blog/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1481436811000},{"_id":"themes/clean-blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1481436811000},{"_id":"themes/clean-blog/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1481436811000},{"_id":"themes/clean-blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1481436811000},{"_id":"themes/clean-blog/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1481436811000},{"_id":"themes/clean-blog/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1481436811000},{"_id":"themes/clean-blog/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1481436811000},{"_id":"themes/clean-blog/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1481436811000},{"_id":"themes/clean-blog/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1481436811000},{"_id":"themes/clean-blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1481436811000},{"_id":"themes/clean-blog/.git/logs/HEAD","hash":"0667c0c841186bf3407edcb53b06ee873f3776a0","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"0e1e7f3d5e0a7bcb2bee1f6feda703aa147eda77","modified":1481437378000},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"d252fb1a41890e6481bb054f9cc4ceec3c0b0ed9","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"3a7eb32f2cc540746c9e11010a4513b832743d1e","modified":1481436814000},{"_id":"themes/clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1481436814000},{"_id":"themes/clean-blog/source/css/base.styl","hash":"f0a6fcf58fe515e1359acde0ed34081f580ec7a3","modified":1481436814000},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1481436814000},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1481436814000},{"_id":"themes/clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1481436814000},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1481436814000},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1481436814000},{"_id":"themes/clean-blog/.git/refs/heads/master","hash":"cce37529c01e70f25e6266bf6fb91c4c88b2f9fb","modified":1481436814000},{"_id":"themes/clean-blog/.git/objects/pack/pack-787b2855467c7734f093ebd3e59acb79db981a90.idx","hash":"41c6148fed4ee61900f3a3598b156e45fe0118c6","modified":1481436814000},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1481436814000},{"_id":"themes/clean-blog/.git/logs/refs/heads/master","hash":"0667c0c841186bf3407edcb53b06ee873f3776a0","modified":1481436814000},{"_id":"themes/clean-blog/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1481436814000},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1481436814000},{"_id":"themes/clean-blog/.git/logs/refs/remotes/origin/HEAD","hash":"0667c0c841186bf3407edcb53b06ee873f3776a0","modified":1481436814000},{"_id":"themes/clean-blog/.git/objects/pack/pack-787b2855467c7734f093ebd3e59acb79db981a90.pack","hash":"f0bc9a9bcfb389b3a1e6db8ec57df6e014223836","modified":1481436814000},{"_id":"public/atom.xml","hash":"0bb61517ce7dafe3681871bdbd2c9a6eda282abb","modified":1481437497115},{"_id":"public/2016/12/02/1/index.html","hash":"aba295fff5fdaf3989df31ff7cb6f2fe620a1cb5","modified":1481437497242},{"_id":"public/2016/11/20/1/index.html","hash":"7f8dd39b5ac6e82622f286497249fc749abdce7c","modified":1481437497242},{"_id":"public/archives/index.html","hash":"e92015dfd59b01f6a5fe03de9ed3b9d60fc5e561","modified":1481437497243},{"_id":"public/archives/2016/index.html","hash":"e1b7c326d0b423e063b2f03063f725df608bc0c1","modified":1481437497243},{"_id":"public/archives/2016/11/index.html","hash":"c5a20bfa4c161b96b9839bd7ed61fb04a11d1ed9","modified":1481437497243},{"_id":"public/archives/2016/12/index.html","hash":"1138b89f1bb961e6af805d0afa6ae6c4758eb75a","modified":1481437497243},{"_id":"public/index.html","hash":"000ed83db4af64d53613987fafebe4d8e8fdc195","modified":1481437497243},{"_id":"public/tags/Swift/index.html","hash":"e41f2bf358726eeba52bf913b611ed4466078f81","modified":1481437497243},{"_id":"public/tags/Kitura/index.html","hash":"345d049292aa599e1bfd97c2c855f7cafbf7a577","modified":1481437497243},{"_id":"public/tags/MariaDB/index.html","hash":"0831e7ea49a813715f60ff142bd43d29c2c9accb","modified":1481437497243},{"_id":"public/tags/Sterntaler/index.html","hash":"ae5cdac1a697765b73bf072fb52d10255d3b4ec0","modified":1481437497243},{"_id":"public/tags/CLion/index.html","hash":"cbaeab2541171e34a057880ba616dccfab348cd9","modified":1481437497244},{"_id":"public/tags/CMake/index.html","hash":"5d548db7614920d9224d6e32217487071da8a0ad","modified":1481437497244},{"_id":"public/tags/Kotlin/index.html","hash":"76928b0f7b8b3b6dbdd89b64de60419737e2d000","modified":1481437497244},{"_id":"public/tags/AWS/index.html","hash":"5f31dba83e9d0891777ecbda7c5b75be584ef753","modified":1481437497244},{"_id":"public/2016/12/11/1/index.html","hash":"64d21aad0af5d654a133be925d5b836093f8c9f4","modified":1481437497244},{"_id":"public/2016/11/22/1/index.html","hash":"66099ac060701d174f17b2cc85db3d97293508cb","modified":1481437497244},{"_id":"public/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1481437497247},{"_id":"public/css/article.css","hash":"f0ee490e1207191946fffc9444f891e9b7ae7289","modified":1481437497804},{"_id":"public/css/base.css","hash":"5bdbdf83ad61e80c537bd75b5442c8b0aac1e0f6","modified":1481437497804},{"_id":"public/css/style.css","hash":"4549fbe615459f12cc2e4f560036f911cd51b121","modified":1481437497804},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481437497804},{"_id":"public/css/mixins.css","hash":"45146e7f4346351cd7f364de344aecf9574475f9","modified":1481437497804},{"_id":"public/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1481437497805},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1481437497811}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"オリジナルgulpfileを書くのは悪い文明","date":"2016-12-03T14:22:36.000Z","_content":"\n","source":"_drafts/20161203 オリジナルgulpfileを書くのは悪い文明.md","raw":"---\ntitle: オリジナルgulpfileを書くのは悪い文明\ndate: 2016-12-03 23:22:36\npermalink: 1\ntags:\n - Gulp\n---\n\n","slug":"1","published":0,"updated":"2016-12-04T03:29:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwk9mw570000rec1740djrfn","content":"","excerpt":"","more":""},{"title":"サイト引っ越しとかいう死語について","date":"2016-11-20T07:45:39.000Z","_content":"\n昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。\n\n「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と理由はありそうですね。知らんけど。\n\n私なんかは割と「タグ手打ちで工事中」みたいなレトロな世界に馴染みのある人間なんですけど、あの頃は大変だったですねえ… なにしろ世界中で車輪を再発名してましたもんね。今ならtwitterとfacebookでアカウント作って終わりだもん、そりゃインターネットも別世界になるよなあと。\n\nそこで僕も人類の進歩に便乗し、コマンド一発でブログ作れちゃう[Hexo](https://hexo.io/)くんのチカラを使ってみました。ただ現状サーバー料金を払う金がないので、関連するリソースはすべて[github](https://github.com/tottokotkd/tottokotkd.github.io)くんにあります。完全にタダ乗りだけど、なんか技術っぽい記事をたまに書けば許されると思います。\n\n今ぼんやり考えているのはツイッター関係で一つ、ニュース関係でもう一つ、CUIツールでさらに一つ… でもまあ多分しばらく形にならないので、やむを得ず、本当に仕方なく、どうしても嫌なんだけど不本意ながら、ただの日記みたいな記事を書きます。嗚呼残念だナ。\n\nなおHexo / github関連の記事は書かない。参考情報が沢山あるから今更追加する必要もない。","source":"_posts/20161120 サイト引っ越しとかいう死語について.md","raw":"---\ntitle: サイト引っ越しとかいう死語について\ndate: 2016-11-20 16:45:39\npermalink: 1\ntags:\n---\n\n昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。\n\n「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と理由はありそうですね。知らんけど。\n\n私なんかは割と「タグ手打ちで工事中」みたいなレトロな世界に馴染みのある人間なんですけど、あの頃は大変だったですねえ… なにしろ世界中で車輪を再発名してましたもんね。今ならtwitterとfacebookでアカウント作って終わりだもん、そりゃインターネットも別世界になるよなあと。\n\nそこで僕も人類の進歩に便乗し、コマンド一発でブログ作れちゃう[Hexo](https://hexo.io/)くんのチカラを使ってみました。ただ現状サーバー料金を払う金がないので、関連するリソースはすべて[github](https://github.com/tottokotkd/tottokotkd.github.io)くんにあります。完全にタダ乗りだけど、なんか技術っぽい記事をたまに書けば許されると思います。\n\n今ぼんやり考えているのはツイッター関係で一つ、ニュース関係でもう一つ、CUIツールでさらに一つ… でもまあ多分しばらく形にならないので、やむを得ず、本当に仕方なく、どうしても嫌なんだけど不本意ながら、ただの日記みたいな記事を書きます。嗚呼残念だナ。\n\nなおHexo / github関連の記事は書かない。参考情報が沢山あるから今更追加する必要もない。","slug":"1","published":1,"updated":"2016-12-02T16:00:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwk9mw5c0001rec110spyqay","content":"<p>昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。</p>\n<p>「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と理由はありそうですね。知らんけど。</p>\n<p>私なんかは割と「タグ手打ちで工事中」みたいなレトロな世界に馴染みのある人間なんですけど、あの頃は大変だったですねえ… なにしろ世界中で車輪を再発名してましたもんね。今ならtwitterとfacebookでアカウント作って終わりだもん、そりゃインターネットも別世界になるよなあと。</p>\n<p>そこで僕も人類の進歩に便乗し、コマンド一発でブログ作れちゃう<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>くんのチカラを使ってみました。ただ現状サーバー料金を払う金がないので、関連するリソースはすべて<a href=\"https://github.com/tottokotkd/tottokotkd.github.io\" target=\"_blank\" rel=\"external\">github</a>くんにあります。完全にタダ乗りだけど、なんか技術っぽい記事をたまに書けば許されると思います。</p>\n<p>今ぼんやり考えているのはツイッター関係で一つ、ニュース関係でもう一つ、CUIツールでさらに一つ… でもまあ多分しばらく形にならないので、やむを得ず、本当に仕方なく、どうしても嫌なんだけど不本意ながら、ただの日記みたいな記事を書きます。嗚呼残念だナ。</p>\n<p>なおHexo / github関連の記事は書かない。参考情報が沢山あるから今更追加する必要もない。</p>\n","excerpt":"","more":"<p>昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。</p>\n<p>「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と理由はありそうですね。知らんけど。</p>\n<p>私なんかは割と「タグ手打ちで工事中」みたいなレトロな世界に馴染みのある人間なんですけど、あの頃は大変だったですねえ… なにしろ世界中で車輪を再発名してましたもんね。今ならtwitterとfacebookでアカウント作って終わりだもん、そりゃインターネットも別世界になるよなあと。</p>\n<p>そこで僕も人類の進歩に便乗し、コマンド一発でブログ作れちゃう<a href=\"https://hexo.io/\">Hexo</a>くんのチカラを使ってみました。ただ現状サーバー料金を払う金がないので、関連するリソースはすべて<a href=\"https://github.com/tottokotkd/tottokotkd.github.io\">github</a>くんにあります。完全にタダ乗りだけど、なんか技術っぽい記事をたまに書けば許されると思います。</p>\n<p>今ぼんやり考えているのはツイッター関係で一つ、ニュース関係でもう一つ、CUIツールでさらに一つ… でもまあ多分しばらく形にならないので、やむを得ず、本当に仕方なく、どうしても嫌なんだけど不本意ながら、ただの日記みたいな記事を書きます。嗚呼残念だナ。</p>\n<p>なおHexo / github関連の記事は書かない。参考情報が沢山あるから今更追加する必要もない。</p>\n"},{"title":"Swift + Kitura + MySQLで頑張っている件","date":"2016-12-02T03:33:13.000Z","_content":"\nこのコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)\n\nまずパッケージね。試してないけどLinuxでも動く気がする。\n\n```swift\nimport PackageDescription\n\nlet package = Package(\n    name: \"nwsns\",\n    dependencies: [\n        .Package(url: \"https://github.com/IBM-Swift/Kitura.git\", majorVersion: 1, minor: 2),\n        .Package(url: \"https://github.com/tottokotkd/MariaDbTaler.git\", majorVersion: 0, minor: 1)\n    ])\n```\n\nそしてサーバー立てる。コードは超簡単だから説明不要ですねえ。\n\n```swift\nimport Foundation\nimport Sterntaler\nimport MariaDbTaler\nimport Kitura\nimport SwiftyJSON\n\n// Create a new router\nlet router = Router()\nlet pool = MariaDB.get(host: \"127.0.0.1\", user: \"root\", password: \"pass\", database: \"fosdb\")\nlet columns = (Columns.int(\"id\"), Columns.string(\"name\"), NullableColumns.date(\"day\"))\n\n// Handle HTTP GET requests to /\nrouter.get(\"/\") { request, response, next in\n    let data = pool.execute(sql: \"SELECT id, name, day FROM test\")\n        .map{$0.read(tuple: columns)}\n        .map{[\"id\": $0.0, \"name\": $0.1, \"day\": $0.2?.description ?? \"null\"]}\n    try! response.status(.OK).send(json: JSON(data)).end()\n    next()\n}\n\n// Add an HTTP server and connect it to the router\nKitura.addHTTPServer(onPort: 8090, with: router)\n\n// Start the Kitura runloop (this call never returns)\nKitura.run()\n```\n\nSterntaler / MariaDbTalerとかいうモジュールがMySQL Connector/Cの自作ラッパーです。ホントは劣化Slickみたいなすごいやつ作りたかったけど当然無理なので妥協しました。SQLインジェクション対策すらない時点で100%ダメなのですけど、でもなんだか既存のコードもしっくり来なくて… \n\nちなみにプールとか言ってますが勿論ウソです。毎回つないでます。\n\n\nこれを動かす場合、`brew install mariadb`でMariaDBを入れて、それっぽいデータベースとテーブル作って、`swift build -Xlinker -L/usr/local/lib -Xcc -I/usr/local/include -Xswiftc -lmysqlclient`でビルドすれば動く気がします。もちろんKituraの依存ライブラリーも入れましょう。\n\nちなみに、いま世間にいくつかあるSwift系mysqlライブラリーにはOpenSSLが入っていないとビルドできないものがあるみたいです。ところがOpenSSLをbrewでインストールするとリンク段階で失敗することがあるので、その場合ビルドするときには`-Xcc -I/usr/local/opt/openssl/include -Xlinker -L/usr/local/opt/openssl/lib`とか指定するといいです。たぶん。\n\n（それらはGPLに静的リンクしているような気がするけど調べてません）\n\nこの方向で何かちょっと動くものを作れるか頑張ってます。しかし実際どうなるかはわかんない。","source":"_posts/20161202 Swift + Kitura + MySQL + CLion + CMakeで頑張っている件.md","raw":"---\ntitle: Swift + Kitura + MySQLで頑張っている件\ndate: 2016-12-02 12:33:13\npermalink: 1\ntags:\n- Swift\n- Kitura\n- MariaDB\n- Sterntaler\n---\n\nこのコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)\n\nまずパッケージね。試してないけどLinuxでも動く気がする。\n\n```swift\nimport PackageDescription\n\nlet package = Package(\n    name: \"nwsns\",\n    dependencies: [\n        .Package(url: \"https://github.com/IBM-Swift/Kitura.git\", majorVersion: 1, minor: 2),\n        .Package(url: \"https://github.com/tottokotkd/MariaDbTaler.git\", majorVersion: 0, minor: 1)\n    ])\n```\n\nそしてサーバー立てる。コードは超簡単だから説明不要ですねえ。\n\n```swift\nimport Foundation\nimport Sterntaler\nimport MariaDbTaler\nimport Kitura\nimport SwiftyJSON\n\n// Create a new router\nlet router = Router()\nlet pool = MariaDB.get(host: \"127.0.0.1\", user: \"root\", password: \"pass\", database: \"fosdb\")\nlet columns = (Columns.int(\"id\"), Columns.string(\"name\"), NullableColumns.date(\"day\"))\n\n// Handle HTTP GET requests to /\nrouter.get(\"/\") { request, response, next in\n    let data = pool.execute(sql: \"SELECT id, name, day FROM test\")\n        .map{$0.read(tuple: columns)}\n        .map{[\"id\": $0.0, \"name\": $0.1, \"day\": $0.2?.description ?? \"null\"]}\n    try! response.status(.OK).send(json: JSON(data)).end()\n    next()\n}\n\n// Add an HTTP server and connect it to the router\nKitura.addHTTPServer(onPort: 8090, with: router)\n\n// Start the Kitura runloop (this call never returns)\nKitura.run()\n```\n\nSterntaler / MariaDbTalerとかいうモジュールがMySQL Connector/Cの自作ラッパーです。ホントは劣化Slickみたいなすごいやつ作りたかったけど当然無理なので妥協しました。SQLインジェクション対策すらない時点で100%ダメなのですけど、でもなんだか既存のコードもしっくり来なくて… \n\nちなみにプールとか言ってますが勿論ウソです。毎回つないでます。\n\n\nこれを動かす場合、`brew install mariadb`でMariaDBを入れて、それっぽいデータベースとテーブル作って、`swift build -Xlinker -L/usr/local/lib -Xcc -I/usr/local/include -Xswiftc -lmysqlclient`でビルドすれば動く気がします。もちろんKituraの依存ライブラリーも入れましょう。\n\nちなみに、いま世間にいくつかあるSwift系mysqlライブラリーにはOpenSSLが入っていないとビルドできないものがあるみたいです。ところがOpenSSLをbrewでインストールするとリンク段階で失敗することがあるので、その場合ビルドするときには`-Xcc -I/usr/local/opt/openssl/include -Xlinker -L/usr/local/opt/openssl/lib`とか指定するといいです。たぶん。\n\n（それらはGPLに静的リンクしているような気がするけど調べてません）\n\nこの方向で何かちょっと動くものを作れるか頑張ってます。しかし実際どうなるかはわかんない。","slug":"1","published":1,"updated":"2016-12-02T16:04:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwk9mw5h0003rec1mkcrsmuj","content":"<p>このコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)</p>\n<p>まずパッケージね。試してないけどLinuxでも動く気がする。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> PackageDescription</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> package = <span class=\"type\">Package</span>(</div><div class=\"line\">    name: <span class=\"string\">\"nwsns\"</span>,</div><div class=\"line\">    dependencies: [</div><div class=\"line\">        .<span class=\"type\">Package</span>(url: <span class=\"string\">\"https://github.com/IBM-Swift/Kitura.git\"</span>, majorVersion: <span class=\"number\">1</span>, minor: <span class=\"number\">2</span>),</div><div class=\"line\">        .<span class=\"type\">Package</span>(url: <span class=\"string\">\"https://github.com/tottokotkd/MariaDbTaler.git\"</span>, majorVersion: <span class=\"number\">0</span>, minor: <span class=\"number\">1</span>)</div><div class=\"line\">    ])</div></pre></td></tr></table></figure>\n<p>そしてサーバー立てる。コードは超簡単だから説明不要ですねえ。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Foundation</div><div class=\"line\"><span class=\"keyword\">import</span> Sterntaler</div><div class=\"line\"><span class=\"keyword\">import</span> MariaDbTaler</div><div class=\"line\"><span class=\"keyword\">import</span> Kitura</div><div class=\"line\"><span class=\"keyword\">import</span> SwiftyJSON</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create a new router</span></div><div class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"type\">Router</span>()</div><div class=\"line\"><span class=\"keyword\">let</span> pool = <span class=\"type\">MariaDB</span>.<span class=\"keyword\">get</span>(host: <span class=\"string\">\"127.0.0.1\"</span>, user: <span class=\"string\">\"root\"</span>, password: <span class=\"string\">\"pass\"</span>, database: <span class=\"string\">\"fosdb\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> columns = (<span class=\"type\">Columns</span>.int(<span class=\"string\">\"id\"</span>), <span class=\"type\">Columns</span>.string(<span class=\"string\">\"name\"</span>), <span class=\"type\">NullableColumns</span>.date(<span class=\"string\">\"day\"</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Handle HTTP GET requests to /</span></div><div class=\"line\">router.<span class=\"keyword\">get</span>(<span class=\"string\">\"/\"</span>) &#123; request, response, next <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">let</span> data = pool.execute(sql: <span class=\"string\">\"SELECT id, name, day FROM test\"</span>)</div><div class=\"line\">        .<span class=\"built_in\">map</span>&#123;$<span class=\"number\">0</span>.read(tuple: columns)&#125;</div><div class=\"line\">        .<span class=\"built_in\">map</span>&#123;[<span class=\"string\">\"id\"</span>: $<span class=\"number\">0.0</span>, <span class=\"string\">\"name\"</span>: $<span class=\"number\">0.1</span>, <span class=\"string\">\"day\"</span>: $<span class=\"number\">0.2</span>?.description ?? <span class=\"string\">\"null\"</span>]&#125;</div><div class=\"line\">    <span class=\"keyword\">try</span>! response.status(.<span class=\"type\">OK</span>).send(json: <span class=\"type\">JSON</span>(data)).end()</div><div class=\"line\">    next()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Add an HTTP server and connect it to the router</span></div><div class=\"line\"><span class=\"type\">Kitura</span>.addHTTPServer(onPort: <span class=\"number\">8090</span>, with: router)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Start the Kitura runloop (this call never returns)</span></div><div class=\"line\"><span class=\"type\">Kitura</span>.run()</div></pre></td></tr></table></figure>\n<p>Sterntaler / MariaDbTalerとかいうモジュールがMySQL Connector/Cの自作ラッパーです。ホントは劣化Slickみたいなすごいやつ作りたかったけど当然無理なので妥協しました。SQLインジェクション対策すらない時点で100%ダメなのですけど、でもなんだか既存のコードもしっくり来なくて… </p>\n<p>ちなみにプールとか言ってますが勿論ウソです。毎回つないでます。</p>\n<p>これを動かす場合、<code>brew install mariadb</code>でMariaDBを入れて、それっぽいデータベースとテーブル作って、<code>swift build -Xlinker -L/usr/local/lib -Xcc -I/usr/local/include -Xswiftc -lmysqlclient</code>でビルドすれば動く気がします。もちろんKituraの依存ライブラリーも入れましょう。</p>\n<p>ちなみに、いま世間にいくつかあるSwift系mysqlライブラリーにはOpenSSLが入っていないとビルドできないものがあるみたいです。ところがOpenSSLをbrewでインストールするとリンク段階で失敗することがあるので、その場合ビルドするときには<code>-Xcc -I/usr/local/opt/openssl/include -Xlinker -L/usr/local/opt/openssl/lib</code>とか指定するといいです。たぶん。</p>\n<p>（それらはGPLに静的リンクしているような気がするけど調べてません）</p>\n<p>この方向で何かちょっと動くものを作れるか頑張ってます。しかし実際どうなるかはわかんない。</p>\n","excerpt":"","more":"<p>このコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)</p>\n<p>まずパッケージね。試してないけどLinuxでも動く気がする。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> PackageDescription</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> package = <span class=\"type\">Package</span>(</div><div class=\"line\">    name: <span class=\"string\">\"nwsns\"</span>,</div><div class=\"line\">    dependencies: [</div><div class=\"line\">        .<span class=\"type\">Package</span>(url: <span class=\"string\">\"https://github.com/IBM-Swift/Kitura.git\"</span>, majorVersion: <span class=\"number\">1</span>, minor: <span class=\"number\">2</span>),</div><div class=\"line\">        .<span class=\"type\">Package</span>(url: <span class=\"string\">\"https://github.com/tottokotkd/MariaDbTaler.git\"</span>, majorVersion: <span class=\"number\">0</span>, minor: <span class=\"number\">1</span>)</div><div class=\"line\">    ])</div></pre></td></tr></table></figure>\n<p>そしてサーバー立てる。コードは超簡単だから説明不要ですねえ。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Foundation</div><div class=\"line\"><span class=\"keyword\">import</span> Sterntaler</div><div class=\"line\"><span class=\"keyword\">import</span> MariaDbTaler</div><div class=\"line\"><span class=\"keyword\">import</span> Kitura</div><div class=\"line\"><span class=\"keyword\">import</span> SwiftyJSON</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create a new router</span></div><div class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"type\">Router</span>()</div><div class=\"line\"><span class=\"keyword\">let</span> pool = <span class=\"type\">MariaDB</span>.<span class=\"keyword\">get</span>(host: <span class=\"string\">\"127.0.0.1\"</span>, user: <span class=\"string\">\"root\"</span>, password: <span class=\"string\">\"pass\"</span>, database: <span class=\"string\">\"fosdb\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> columns = (<span class=\"type\">Columns</span>.int(<span class=\"string\">\"id\"</span>), <span class=\"type\">Columns</span>.string(<span class=\"string\">\"name\"</span>), <span class=\"type\">NullableColumns</span>.date(<span class=\"string\">\"day\"</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Handle HTTP GET requests to /</span></div><div class=\"line\">router.<span class=\"keyword\">get</span>(<span class=\"string\">\"/\"</span>) &#123; request, response, next <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">let</span> data = pool.execute(sql: <span class=\"string\">\"SELECT id, name, day FROM test\"</span>)</div><div class=\"line\">        .<span class=\"built_in\">map</span>&#123;$<span class=\"number\">0</span>.read(tuple: columns)&#125;</div><div class=\"line\">        .<span class=\"built_in\">map</span>&#123;[<span class=\"string\">\"id\"</span>: $<span class=\"number\">0.0</span>, <span class=\"string\">\"name\"</span>: $<span class=\"number\">0.1</span>, <span class=\"string\">\"day\"</span>: $<span class=\"number\">0.2</span>?.description ?? <span class=\"string\">\"null\"</span>]&#125;</div><div class=\"line\">    <span class=\"keyword\">try</span>! response.status(.<span class=\"type\">OK</span>).send(json: <span class=\"type\">JSON</span>(data)).end()</div><div class=\"line\">    next()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Add an HTTP server and connect it to the router</span></div><div class=\"line\"><span class=\"type\">Kitura</span>.addHTTPServer(onPort: <span class=\"number\">8090</span>, with: router)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Start the Kitura runloop (this call never returns)</span></div><div class=\"line\"><span class=\"type\">Kitura</span>.run()</div></pre></td></tr></table></figure>\n<p>Sterntaler / MariaDbTalerとかいうモジュールがMySQL Connector/Cの自作ラッパーです。ホントは劣化Slickみたいなすごいやつ作りたかったけど当然無理なので妥協しました。SQLインジェクション対策すらない時点で100%ダメなのですけど、でもなんだか既存のコードもしっくり来なくて… </p>\n<p>ちなみにプールとか言ってますが勿論ウソです。毎回つないでます。</p>\n<p>これを動かす場合、<code>brew install mariadb</code>でMariaDBを入れて、それっぽいデータベースとテーブル作って、<code>swift build -Xlinker -L/usr/local/lib -Xcc -I/usr/local/include -Xswiftc -lmysqlclient</code>でビルドすれば動く気がします。もちろんKituraの依存ライブラリーも入れましょう。</p>\n<p>ちなみに、いま世間にいくつかあるSwift系mysqlライブラリーにはOpenSSLが入っていないとビルドできないものがあるみたいです。ところがOpenSSLをbrewでインストールするとリンク段階で失敗することがあるので、その場合ビルドするときには<code>-Xcc -I/usr/local/opt/openssl/include -Xlinker -L/usr/local/opt/openssl/lib</code>とか指定するといいです。たぶん。</p>\n<p>（それらはGPLに静的リンクしているような気がするけど調べてません）</p>\n<p>この方向で何かちょっと動くものを作れるか頑張ってます。しかし実際どうなるかはわかんない。</p>\n"},{"title":"swift buildで渡すオプションをいちいち書きたくないのでcmakeする","date":"2016-11-22T13:33:03.000Z","_content":"\nいまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。\n\nそういう次第でswiftの話です。毎度毎度 `swift build -Xswiftc -I/usr/local/include/mysql -Xlinker -L/usr/local/lib\n` とか書きたくない人は幸せになれるかもしれないです。\n\n## CMakeFiles.txtを書くべし\n\nまずこういうやつ書いてください。ビルドコマンドのオプションを適宜いい感じにしましょう。\n\n```cmake\ncmake_minimum_required(VERSION 3.6)\nproject(MariaDbTaler)\n\nset(SOURCE_FILES\n        Sources/MariaDbDriver.swift\n        Package.swift)\n\nset(SWIFT_COMMAND\n        swift build\n        -Xlinker -L/usr/local/lib\n        -Xcc -I/usr/local/include\n        -Xswiftc -lmysqlclient)\n\nadd_custom_target(MariaDbTaler\n        COMMAND ${SWIFT_COMMAND}\n        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n        SOURCES ${SOURCE_FILES})\n```\n\nなお試してませんが明らかに`SOURCE_FILES`は書かなくてよい気がいたします。\n\n## `cmake .`すべし\n\n[人類なら`out-of-source`ビルドしなさい](http://qiita.com/osamu0329/items/7de2b190df3cfb4ad0ca)という話もありますが、最初はまあいいです。1回実行してゴミファイルが大量に出来てから後悔しても遅くないです。\n\n## `make XXXXXX` すべし\n\n上の例だと`make MariaDbTaler`ですね。プロジェクト名を渡してやります。そうするとあらかじめ設定してあるコマンドが走るのです。\n\n## 別にCMakeいらなくね？\n\nいらないです。CMake経由しても特にいいことないしシェルスクリプト書けばいいじゃん。なんだよこれ！\n\nところが、みんな大好きJetBrains謹製IDEであるCLionくんが \"[CLion relies on CMake project model, so you need to start a CMake project for Swift](https://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/)\" と宣うているのです。正直まだまだCLionのSwiftプラグインはショボくて辛い感じなのですが、CLionを使うならCMakeFiles.txtは嫌でも書かなきゃいけません。そこで一括して書けると考えれば、まあちょっとだけ便利です。\n\n## 余談: -Xswiftc is 何\n\n`swift --help`ってなんか使いにくい気がしてならないんですよね。ヘルプ叩いたらサブコマンドの一覧も出してほしいし… `swift package update`の存在とか分かりにくすぎるし… しかしまあそれはいいです。\n\n`-Xswiftc`のことは`swift build --help`すれば分かります。\n\n```swift\n$ swift build --help\n\nOVERVIEW: Build sources into binary products\n\nUSAGE: swift build [mode] [options]\n\nMODES:\n  -c, --configuration <value>   Build with configuration (debug|release) [default: debug]\n  --clean [<mode>]              Delete artifacts (build|dist) [default: build]\n\nOPTIONS:\n  -C, --chdir <path>       Change working directory before any other operation\n  --build-path <path>      Specify build/cache directory [default: ./.build]\n  --color <mode>           Specify color mode (auto|always|never) [default: auto]\n  -v, --verbose            Increase verbosity of informational output\n  -Xcc <flag>              Pass flag through to all C compiler invocations\n  -Xlinker <flag>          Pass flag through to all linker invocations\n  -Xswiftc <flag>          Pass flag through to all Swift compiler invocations\n\nNOTE: Use `swift package` to perform other functions on packages\n```\n\n`-Xswiftc`は分かったけど`-I/usr/local/include/mysql`が分からないんですけど！という人がいると困るので`swift --help | grep -e -I`します(全文は長い)。\n\n```swift\n$ swift --help | grep -e -I\n\n  -I <value>             Add directory to the import search path\n```\n\ngccでよく見かける愉快な仲間たちですね。Xcodeを使っていると普段全く意識しないと思いますが、-Iは「ヘッダーファイルをどこで探すか」を指定するオプションです。Xcodeのビルド設定にも`header search paths`とかいう項目がありますよね。アレですアレ。\n\nこれはつまり古代C言語の領域に突入しているわけです。`swift build`の挙動がよく分からないという人はC++あたりのコンパイラ・リンカの解説記事を読むといいかもしれないです。\n\n決してコンパイラーではありません、コンパイラです。","source":"_posts/20161202 swift buildで渡すオプションをいちいち書きたくないのでcmakeする.md","raw":"---\ntitle: swift buildで渡すオプションをいちいち書きたくないのでcmakeする\ndate: 2016-11-22 22:33:03\npermalink: 1\ntags:\n - Swift\n - CLion\n - CMake\n---\n\nいまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。\n\nそういう次第でswiftの話です。毎度毎度 `swift build -Xswiftc -I/usr/local/include/mysql -Xlinker -L/usr/local/lib\n` とか書きたくない人は幸せになれるかもしれないです。\n\n## CMakeFiles.txtを書くべし\n\nまずこういうやつ書いてください。ビルドコマンドのオプションを適宜いい感じにしましょう。\n\n```cmake\ncmake_minimum_required(VERSION 3.6)\nproject(MariaDbTaler)\n\nset(SOURCE_FILES\n        Sources/MariaDbDriver.swift\n        Package.swift)\n\nset(SWIFT_COMMAND\n        swift build\n        -Xlinker -L/usr/local/lib\n        -Xcc -I/usr/local/include\n        -Xswiftc -lmysqlclient)\n\nadd_custom_target(MariaDbTaler\n        COMMAND ${SWIFT_COMMAND}\n        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n        SOURCES ${SOURCE_FILES})\n```\n\nなお試してませんが明らかに`SOURCE_FILES`は書かなくてよい気がいたします。\n\n## `cmake .`すべし\n\n[人類なら`out-of-source`ビルドしなさい](http://qiita.com/osamu0329/items/7de2b190df3cfb4ad0ca)という話もありますが、最初はまあいいです。1回実行してゴミファイルが大量に出来てから後悔しても遅くないです。\n\n## `make XXXXXX` すべし\n\n上の例だと`make MariaDbTaler`ですね。プロジェクト名を渡してやります。そうするとあらかじめ設定してあるコマンドが走るのです。\n\n## 別にCMakeいらなくね？\n\nいらないです。CMake経由しても特にいいことないしシェルスクリプト書けばいいじゃん。なんだよこれ！\n\nところが、みんな大好きJetBrains謹製IDEであるCLionくんが \"[CLion relies on CMake project model, so you need to start a CMake project for Swift](https://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/)\" と宣うているのです。正直まだまだCLionのSwiftプラグインはショボくて辛い感じなのですが、CLionを使うならCMakeFiles.txtは嫌でも書かなきゃいけません。そこで一括して書けると考えれば、まあちょっとだけ便利です。\n\n## 余談: -Xswiftc is 何\n\n`swift --help`ってなんか使いにくい気がしてならないんですよね。ヘルプ叩いたらサブコマンドの一覧も出してほしいし… `swift package update`の存在とか分かりにくすぎるし… しかしまあそれはいいです。\n\n`-Xswiftc`のことは`swift build --help`すれば分かります。\n\n```swift\n$ swift build --help\n\nOVERVIEW: Build sources into binary products\n\nUSAGE: swift build [mode] [options]\n\nMODES:\n  -c, --configuration <value>   Build with configuration (debug|release) [default: debug]\n  --clean [<mode>]              Delete artifacts (build|dist) [default: build]\n\nOPTIONS:\n  -C, --chdir <path>       Change working directory before any other operation\n  --build-path <path>      Specify build/cache directory [default: ./.build]\n  --color <mode>           Specify color mode (auto|always|never) [default: auto]\n  -v, --verbose            Increase verbosity of informational output\n  -Xcc <flag>              Pass flag through to all C compiler invocations\n  -Xlinker <flag>          Pass flag through to all linker invocations\n  -Xswiftc <flag>          Pass flag through to all Swift compiler invocations\n\nNOTE: Use `swift package` to perform other functions on packages\n```\n\n`-Xswiftc`は分かったけど`-I/usr/local/include/mysql`が分からないんですけど！という人がいると困るので`swift --help | grep -e -I`します(全文は長い)。\n\n```swift\n$ swift --help | grep -e -I\n\n  -I <value>             Add directory to the import search path\n```\n\ngccでよく見かける愉快な仲間たちですね。Xcodeを使っていると普段全く意識しないと思いますが、-Iは「ヘッダーファイルをどこで探すか」を指定するオプションです。Xcodeのビルド設定にも`header search paths`とかいう項目がありますよね。アレですアレ。\n\nこれはつまり古代C言語の領域に突入しているわけです。`swift build`の挙動がよく分からないという人はC++あたりのコンパイラ・リンカの解説記事を読むといいかもしれないです。\n\n決してコンパイラーではありません、コンパイラです。","slug":"1","published":1,"updated":"2016-12-02T16:04:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwk9mw5i0004rec18sp4tbcc","content":"<p>いまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。</p>\n<p>そういう次第でswiftの話です。毎度毎度 <code>swift build -Xswiftc -I/usr/local/include/mysql -Xlinker -L/usr/local/lib</code> とか書きたくない人は幸せになれるかもしれないです。</p>\n<h2 id=\"CMakeFiles-txtを書くべし\"><a href=\"#CMakeFiles-txtを書くべし\" class=\"headerlink\" title=\"CMakeFiles.txtを書くべし\"></a>CMakeFiles.txtを書くべし</h2><p>まずこういうやつ書いてください。ビルドコマンドのオプションを適宜いい感じにしましょう。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.6</span>)</div><div class=\"line\"><span class=\"keyword\">project</span>(MariaDbTaler)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span>(SOURCE_FILES</div><div class=\"line\">        Sources/MariaDbDriver.swift</div><div class=\"line\">        Package.swift)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span>(SWIFT_COMMAND</div><div class=\"line\">        swift build</div><div class=\"line\">        -Xlinker -L/usr/local/lib</div><div class=\"line\">        -Xcc -I/usr/local/<span class=\"keyword\">include</span></div><div class=\"line\">        -Xswiftc -lmysqlclient)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">add_custom_target</span>(MariaDbTaler</div><div class=\"line\">        COMMAND <span class=\"variable\">$&#123;SWIFT_COMMAND&#125;</span></div><div class=\"line\">        WORKING_DIRECTORY <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span></div><div class=\"line\">        SOURCES <span class=\"variable\">$&#123;SOURCE_FILES&#125;</span>)</div></pre></td></tr></table></figure>\n<p>なお試してませんが明らかに<code>SOURCE_FILES</code>は書かなくてよい気がいたします。</p>\n<h2 id=\"cmake-すべし\"><a href=\"#cmake-すべし\" class=\"headerlink\" title=\"cmake .すべし\"></a><code>cmake .</code>すべし</h2><p><a href=\"http://qiita.com/osamu0329/items/7de2b190df3cfb4ad0ca\" target=\"_blank\" rel=\"external\">人類なら<code>out-of-source</code>ビルドしなさい</a>という話もありますが、最初はまあいいです。1回実行してゴミファイルが大量に出来てから後悔しても遅くないです。</p>\n<h2 id=\"make-XXXXXX-すべし\"><a href=\"#make-XXXXXX-すべし\" class=\"headerlink\" title=\"make XXXXXX すべし\"></a><code>make XXXXXX</code> すべし</h2><p>上の例だと<code>make MariaDbTaler</code>ですね。プロジェクト名を渡してやります。そうするとあらかじめ設定してあるコマンドが走るのです。</p>\n<h2 id=\"別にCMakeいらなくね？\"><a href=\"#別にCMakeいらなくね？\" class=\"headerlink\" title=\"別にCMakeいらなくね？\"></a>別にCMakeいらなくね？</h2><p>いらないです。CMake経由しても特にいいことないしシェルスクリプト書けばいいじゃん。なんだよこれ！</p>\n<p>ところが、みんな大好きJetBrains謹製IDEであるCLionくんが “<a href=\"https://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/\" target=\"_blank\" rel=\"external\">CLion relies on CMake project model, so you need to start a CMake project for Swift</a>“ と宣うているのです。正直まだまだCLionのSwiftプラグインはショボくて辛い感じなのですが、CLionを使うならCMakeFiles.txtは嫌でも書かなきゃいけません。そこで一括して書けると考えれば、まあちょっとだけ便利です。</p>\n<h2 id=\"余談-Xswiftc-is-何\"><a href=\"#余談-Xswiftc-is-何\" class=\"headerlink\" title=\"余談: -Xswiftc is 何\"></a>余談: -Xswiftc is 何</h2><p><code>swift --help</code>ってなんか使いにくい気がしてならないんですよね。ヘルプ叩いたらサブコマンドの一覧も出してほしいし… <code>swift package update</code>の存在とか分かりにくすぎるし… しかしまあそれはいいです。</p>\n<p><code>-Xswiftc</code>のことは<code>swift build --help</code>すれば分かります。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ swift build --help</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">OVERVIEW</span>: <span class=\"type\">Build</span> sources into binary products</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">USAGE</span>: swift build [mode] [options]</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">MODES</span>:</div><div class=\"line\">  -<span class=\"built_in\">c</span>, --configuration &lt;value&gt;   <span class=\"type\">Build</span> with configuration (debug|release) [<span class=\"keyword\">default</span>: debug]</div><div class=\"line\">  --clean [&lt;mode&gt;]              <span class=\"type\">Delete</span> artifacts (build|dist) [<span class=\"keyword\">default</span>: build]</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">OPTIONS</span>:</div><div class=\"line\">  -<span class=\"type\">C</span>, --chdir &lt;path&gt;       <span class=\"type\">Change</span> working directory before any other operation</div><div class=\"line\">  --build-path &lt;path&gt;      <span class=\"type\">Specify</span> build/cache directory [<span class=\"keyword\">default</span>: ./.build]</div><div class=\"line\">  --color &lt;mode&gt;           <span class=\"type\">Specify</span> color mode (auto|always|never) [<span class=\"keyword\">default</span>: auto]</div><div class=\"line\">  -v, --verbose            <span class=\"type\">Increase</span> verbosity of informational output</div><div class=\"line\">  -<span class=\"type\">Xcc</span> &lt;flag&gt;              <span class=\"type\">Pass</span> flag through to all <span class=\"type\">C</span> compiler invocations</div><div class=\"line\">  -<span class=\"type\">Xlinker</span> &lt;flag&gt;          <span class=\"type\">Pass</span> flag through to all linker invocations</div><div class=\"line\">  -<span class=\"type\">Xswiftc</span> &lt;flag&gt;          <span class=\"type\">Pass</span> flag through to all <span class=\"type\">Swift</span> compiler invocations</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">NOTE</span>: <span class=\"type\">Use</span> `swift package` to perform other functions on packages</div></pre></td></tr></table></figure>\n<p><code>-Xswiftc</code>は分かったけど<code>-I/usr/local/include/mysql</code>が分からないんですけど！という人がいると困るので<code>swift --help | grep -e -I</code>します(全文は長い)。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ swift --help | grep -e -<span class=\"type\">I</span></div><div class=\"line\"></div><div class=\"line\">  -<span class=\"type\">I</span> &lt;value&gt;             <span class=\"type\">Add</span> directory to the <span class=\"keyword\">import</span> search path</div></pre></td></tr></table></figure>\n<p>gccでよく見かける愉快な仲間たちですね。Xcodeを使っていると普段全く意識しないと思いますが、-Iは「ヘッダーファイルをどこで探すか」を指定するオプションです。Xcodeのビルド設定にも<code>header search paths</code>とかいう項目がありますよね。アレですアレ。</p>\n<p>これはつまり古代C言語の領域に突入しているわけです。<code>swift build</code>の挙動がよく分からないという人はC++あたりのコンパイラ・リンカの解説記事を読むといいかもしれないです。</p>\n<p>決してコンパイラーではありません、コンパイラです。</p>\n","excerpt":"","more":"<p>いまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。</p>\n<p>そういう次第でswiftの話です。毎度毎度 <code>swift build -Xswiftc -I/usr/local/include/mysql -Xlinker -L/usr/local/lib</code> とか書きたくない人は幸せになれるかもしれないです。</p>\n<h2 id=\"CMakeFiles-txtを書くべし\"><a href=\"#CMakeFiles-txtを書くべし\" class=\"headerlink\" title=\"CMakeFiles.txtを書くべし\"></a>CMakeFiles.txtを書くべし</h2><p>まずこういうやつ書いてください。ビルドコマンドのオプションを適宜いい感じにしましょう。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.6</span>)</div><div class=\"line\"><span class=\"keyword\">project</span>(MariaDbTaler)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span>(SOURCE_FILES</div><div class=\"line\">        Sources/MariaDbDriver.swift</div><div class=\"line\">        Package.swift)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span>(SWIFT_COMMAND</div><div class=\"line\">        swift build</div><div class=\"line\">        -Xlinker -L/usr/local/lib</div><div class=\"line\">        -Xcc -I/usr/local/<span class=\"keyword\">include</span></div><div class=\"line\">        -Xswiftc -lmysqlclient)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">add_custom_target</span>(MariaDbTaler</div><div class=\"line\">        COMMAND <span class=\"variable\">$&#123;SWIFT_COMMAND&#125;</span></div><div class=\"line\">        WORKING_DIRECTORY <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span></div><div class=\"line\">        SOURCES <span class=\"variable\">$&#123;SOURCE_FILES&#125;</span>)</div></pre></td></tr></table></figure>\n<p>なお試してませんが明らかに<code>SOURCE_FILES</code>は書かなくてよい気がいたします。</p>\n<h2 id=\"cmake-すべし\"><a href=\"#cmake-すべし\" class=\"headerlink\" title=\"cmake .すべし\"></a><code>cmake .</code>すべし</h2><p><a href=\"http://qiita.com/osamu0329/items/7de2b190df3cfb4ad0ca\">人類なら<code>out-of-source</code>ビルドしなさい</a>という話もありますが、最初はまあいいです。1回実行してゴミファイルが大量に出来てから後悔しても遅くないです。</p>\n<h2 id=\"make-XXXXXX-すべし\"><a href=\"#make-XXXXXX-すべし\" class=\"headerlink\" title=\"make XXXXXX すべし\"></a><code>make XXXXXX</code> すべし</h2><p>上の例だと<code>make MariaDbTaler</code>ですね。プロジェクト名を渡してやります。そうするとあらかじめ設定してあるコマンドが走るのです。</p>\n<h2 id=\"別にCMakeいらなくね？\"><a href=\"#別にCMakeいらなくね？\" class=\"headerlink\" title=\"別にCMakeいらなくね？\"></a>別にCMakeいらなくね？</h2><p>いらないです。CMake経由しても特にいいことないしシェルスクリプト書けばいいじゃん。なんだよこれ！</p>\n<p>ところが、みんな大好きJetBrains謹製IDEであるCLionくんが “<a href=\"https://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/\">CLion relies on CMake project model, so you need to start a CMake project for Swift</a>“ と宣うているのです。正直まだまだCLionのSwiftプラグインはショボくて辛い感じなのですが、CLionを使うならCMakeFiles.txtは嫌でも書かなきゃいけません。そこで一括して書けると考えれば、まあちょっとだけ便利です。</p>\n<h2 id=\"余談-Xswiftc-is-何\"><a href=\"#余談-Xswiftc-is-何\" class=\"headerlink\" title=\"余談: -Xswiftc is 何\"></a>余談: -Xswiftc is 何</h2><p><code>swift --help</code>ってなんか使いにくい気がしてならないんですよね。ヘルプ叩いたらサブコマンドの一覧も出してほしいし… <code>swift package update</code>の存在とか分かりにくすぎるし… しかしまあそれはいいです。</p>\n<p><code>-Xswiftc</code>のことは<code>swift build --help</code>すれば分かります。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ swift build --help</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">OVERVIEW</span>: <span class=\"type\">Build</span> sources into binary products</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">USAGE</span>: swift build [mode] [options]</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">MODES</span>:</div><div class=\"line\">  -<span class=\"built_in\">c</span>, --configuration &lt;value&gt;   <span class=\"type\">Build</span> with configuration (debug|release) [<span class=\"keyword\">default</span>: debug]</div><div class=\"line\">  --clean [&lt;mode&gt;]              <span class=\"type\">Delete</span> artifacts (build|dist) [<span class=\"keyword\">default</span>: build]</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">OPTIONS</span>:</div><div class=\"line\">  -<span class=\"type\">C</span>, --chdir &lt;path&gt;       <span class=\"type\">Change</span> working directory before any other operation</div><div class=\"line\">  --build-path &lt;path&gt;      <span class=\"type\">Specify</span> build/cache directory [<span class=\"keyword\">default</span>: ./.build]</div><div class=\"line\">  --color &lt;mode&gt;           <span class=\"type\">Specify</span> color mode (auto|always|never) [<span class=\"keyword\">default</span>: auto]</div><div class=\"line\">  -v, --verbose            <span class=\"type\">Increase</span> verbosity of informational output</div><div class=\"line\">  -<span class=\"type\">Xcc</span> &lt;flag&gt;              <span class=\"type\">Pass</span> flag through to all <span class=\"type\">C</span> compiler invocations</div><div class=\"line\">  -<span class=\"type\">Xlinker</span> &lt;flag&gt;          <span class=\"type\">Pass</span> flag through to all linker invocations</div><div class=\"line\">  -<span class=\"type\">Xswiftc</span> &lt;flag&gt;          <span class=\"type\">Pass</span> flag through to all <span class=\"type\">Swift</span> compiler invocations</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">NOTE</span>: <span class=\"type\">Use</span> `swift package` to perform other functions on packages</div></pre></td></tr></table></figure>\n<p><code>-Xswiftc</code>は分かったけど<code>-I/usr/local/include/mysql</code>が分からないんですけど！という人がいると困るので<code>swift --help | grep -e -I</code>します(全文は長い)。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ swift --help | grep -e -<span class=\"type\">I</span></div><div class=\"line\"></div><div class=\"line\">  -<span class=\"type\">I</span> &lt;value&gt;             <span class=\"type\">Add</span> directory to the <span class=\"keyword\">import</span> search path</div></pre></td></tr></table></figure>\n<p>gccでよく見かける愉快な仲間たちですね。Xcodeを使っていると普段全く意識しないと思いますが、-Iは「ヘッダーファイルをどこで探すか」を指定するオプションです。Xcodeのビルド設定にも<code>header search paths</code>とかいう項目がありますよね。アレですアレ。</p>\n<p>これはつまり古代C言語の領域に突入しているわけです。<code>swift build</code>の挙動がよく分からないという人はC++あたりのコンパイラ・リンカの解説記事を読むといいかもしれないです。</p>\n<p>決してコンパイラーではありません、コンパイラです。</p>\n"},{"title":"Kotlin + AWS Lambda + API GatewayでServerlessできちゃうラッパー公開したのでDynamoDBとか使っちゃう","date":"2016-12-11T03:36:08.000Z","_content":"\nタイトルの通りです。[githubに置いてある](https://github.com/tottokotkd/GatewayHandler)し、[Bintray経由でjcenterにもある](https://bintray.com/bintray/jcenter?filterByPkgName=GatewayHandler)ので使えます。この公開ルートは今回初めてやってみましたが、なかなか便利ですね。\n\nもちろん公開するだけならgithubページでもイケるんですけど、その作業が手間だったり、IntelliJくんがキャッシュ持つ段階でエラー吐いたり、面倒なのでBintrayです。今はあんまりそこを頑張りたくなかった、仕方なかった。\n\ngithubの方に書いてあるんですけど、コードでいうとこんな感じ。\n\n```kotlin\npackage hello\n\nimport com.amazonaws.regions.Regions\nimport com.amazonaws.services.dynamodbv2.document.DynamoDB\nimport com.amazonaws.services.dynamodbv2.document.Item\nimport com.amazonaws.services.lambda.runtime.Context\nimport com.tottokotkd.aws.gateway.core.*\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\nimport kotlin.properties.Delegates\n\nclass SaveRequest {\n    lateinit var user: String\n    lateinit var url: String\n    var rate: Int by Delegates.notNull()\n    lateinit var timestamp: String\n}\n\nclass SaveHandler: DataHandler<SaveRequest, Any> {\n    override fun handleRequest(input: SaveRequest, context: Context): ResponseData<Any> {\n\n        val timestamp = try {\n            ZonedDateTime.parse(input.timestamp, DateTimeFormatter.ISO_DATE_TIME)\n        } catch (e: Exception) {\n            return ResponseData(mapOf(\"status\" to \"error\", \"desc\" to \"date time parsing failed.\"), StatusCode.BadRequest)\n        }\n\n        val dynamoDB = DynamoDB(Regions.US_EAST_1)\n        val t = dynamoDB.getTable(\"pages\")\n        val item = Item.fromMap(mapOf(\"user\" to input.user, \"url\" to input.url, \"rate\" to input.rate, \"epoch\" to timestamp.toEpochSecond(), \"timezone\" to timestamp.offset.totalSeconds))\n        val result = t.putItem(item)\n\n        return ResponseData(mapOf(\"status\" to \"success\", \"input\" to input))\n    }\n}\n```\n\n`SaveHandler`がリクエストハンドラーで、`SaveRequest`がリクエストに期待される内容ですね。言うまでもないか。\n\nAPI Gateway経由なのでJSONを渡されそうなものですが、実際はアマゾンがPOJOに突っ込んだうえで渡してくれます。Serverlessの設定として書くべきことも特になくて、本当にこのままLambdaにデプロイすれば面倒をみてくれます。DynamoDBもIAMさえ弄ればコードは1行で終わり。たったこれだけで (金さえ払えば) 無敵のスケーラビリティが手に入っちゃう。スゴイ！\n\nただしアマゾン様といえどもdata classのコンストラクタを使うような器用な芸当は当然やれないので、`SaveRequest`はプロパティ全てvarのクラスになっています。もっともここは`val hoge: String by Delegates.notNull()` の方がいいような気もするし、Web APIなんだから`String?`の方がかえってロジカルに書きやすいような気もするし、その辺りは僕もまだ深く考えてません。そこまでkotlinやAWSの挙動に詳しくないという事情もある。\n\nそれはともかく戻り値が`Any`になっていて許せん！という人もいると思いますが、これはmapOfで手軽に返したかったのです。データクラスとか指定すればちゃんと型安全で動きます (たぶん)。\n\nまあこの辺りは趣味の問題でもあり、生産性を上げるために工夫のしどころだとも思うので、`ResponseData`を使わず自前で実装する方がいいかもですね、ステータスコードは引数じゃなくて型に結びつけるとか。あるいはハンドラーの方にヘルパーをバシバシ生やすとか… その辺は今後ちょっと便利になったらいいかなあ。フォークしてPRで見せびらかしてくれる人とか出てきたら嬉しい。\n\n\n\nで、コードはもう特に書くことないので思い出をつらつらと。\n\n## API Gateway -> Lambda -> Error!\n\n`sls invoke -f hello` が動くぞ！やったー！などと隙を見せたエンジニアを強襲するAWS！\n\n> Malformed Lambda proxy response\n\nlambdaとしては呼べるけどcurlすると落ちる。\n\nServerless使って一番つらかったのはコレ。Kotlin + Serverless + API Gatewayなんて実際に使っているケースがほぼ見つからない上に、ちょっと古い記事だと「動きました！簡単」とか書いてあるコードが今はもう動かない。嘘だゾ、全然簡単じゃないゾ。\n\n\nということで頑張って検索して探したのがコレ。~~人柱サンキュー！~~\n\n{% blockquote kyl191 https://forums.aws.amazon.com/thread.jspa?threadID=239688 AWS Developer Forums: Lambda Proxy Expectations %}\nOk, I found some documentation which says it expects statusCode, body and headers in a dict.\n{% endblockquote %}\n\n何でこんな状態なのか、ちょっと意味が分からないんですけど、API Gateway (Lambda Proxy) から呼ばれるLambdaは**戻り値の型はどうでもいいしインターフェイスとかないけど、statusCode body headersという3つの値を持っていないと実行時エラーになる**という凡そJavaとは思われない動的な仕組みになっているみたいです。\n\nつまり、'sls invoke -f hello'の結果として\n\n```json\n{\"hage\": [\"ok\", \"cool\", \"amazing\"]}\n```\n\nみたいな結果が見えている場合はダメです。\n\nLambdaとしては動いているのですが、Gateway経由で呼びたいなら以下の内容でなければいけません。\n\n\n```json\n{\n    \"body\": {\n        \"hage\": [\"ok\", \"cool\", \"amazing\"]\n    },\n    \"headers\": {},\n    \"statusCode\": 400\n}\n```\n\nこのフォーマットを守らなければ、Lambda ProxyモードのAPI Gatewayは有効な結果として受け付けてくれないのです。理屈が分かってしまえば納得できますが、この落とし穴だけは本当にひどい罠だと思います。\n\n一旦Lambda側からJSONを出力した上で、それを改めてGateway側がチェックするんでしょうか？ 色々と想像してますが謎です。\n\nちなみにデータのJSON化はあっちがJacksonでやってくれるので、上記のようなプロパティを持つPOJOを投げればいいみたいです。kotlinならdata classですね。あと試していませんがmapでも大丈夫かなと。\n\nただまあ、そこを自由にしても特に利点がなさそうなうえ、誰の目にも明らかにバグの温床でしかありません。今回のラッパーでは3つのプロパティを明示的に要求するインターフェイスを作っておきました。そもそも本来こういう仕様になってなきゃJavaコードとしておかしいと思うんですけど、それはそれで公式SDKとしては狭すぎる感じもありますからね… まあ気持ちはわかります。クソですけど。\n\nLambdaプロキシ自体が割と新しい機能であることも考えると仕方ない、AWSはこういうものなのだ… と割り切りましょう。\n\n## 2つの型パラメータを持つジェネリッククラスでないとエラーになる\n\nもうエラーログが手元にないんですが、リクエストハンドラーとして型パラメータ1つのクラスを作ってみたら「型パラメータは2つないと困るんだよなァ！」みたいな激おこメッセージを飛ばしてきました。これまたちょっと意味が分からないんですけど、JSONをリクエストPOJOに変換するときに型パラメータを使おうとしているのかな？ とにかくダメなものはダメらしいです。\n\nそれにしたって型パラメータ2つじゃないとダメっておかしくねえか？設計どうなってんの？という気もしますが仕方ない、AWSはこういうものなのだ… と割り切りましょう。\n\n## Internal Server Error\nAPI Gatewayを通過して結果が戻ってくるまでの間にエラーが発生するとInternal Server Errorです。例えば「Lambda処理内でリクエストパラメータを参照したらnull例外で落ちた」とかいう場合、それはInternal Server Errorであり、Gatewayのデフォルト処理が走って超ダサいJSONを投げ返します。\n\nサーバー内部でエラーが発生するなら、API Gatewayの視点からは全てInternal Server Errorなのです。まあそりゃ当然の挙動なんですけど、それはAPIを書く側からするとBadRequestだし、そもそも勝手にダサいJSONを流されるのも困ります。\n\nということでつまり、ハンドラ全体をtryで囲わないと不安だし、リクエスト内容の処理もちゃんと書かないといけません。当たり前の話とはいえ若干ちょっと面倒そう…\n\nその辺りをうまく集約できるインターフェイスとか作らないと大変そうですね。まあもちろん「ステータスコードさえ取れるなら大丈夫、後はYAGNI」という考え方もあると思います。その辺りの線引きはちょっと難しそう。\n\n## ということで\n\nなんか動くものは作れそうだし頑張る。","source":"_posts/20161211 Kotlin + AWS Lambda + API GatewayでServerlessできちゃうラッパー公開したのでDynamoDBとか使っちゃう.md","raw":"---\ntitle: Kotlin + AWS Lambda + API GatewayでServerlessできちゃうラッパー公開したのでDynamoDBとか使っちゃう\npermalink: 1\ndate: 2016-12-11 12:36:08\ntags:\n- Kotlin\n- AWS\n---\n\nタイトルの通りです。[githubに置いてある](https://github.com/tottokotkd/GatewayHandler)し、[Bintray経由でjcenterにもある](https://bintray.com/bintray/jcenter?filterByPkgName=GatewayHandler)ので使えます。この公開ルートは今回初めてやってみましたが、なかなか便利ですね。\n\nもちろん公開するだけならgithubページでもイケるんですけど、その作業が手間だったり、IntelliJくんがキャッシュ持つ段階でエラー吐いたり、面倒なのでBintrayです。今はあんまりそこを頑張りたくなかった、仕方なかった。\n\ngithubの方に書いてあるんですけど、コードでいうとこんな感じ。\n\n```kotlin\npackage hello\n\nimport com.amazonaws.regions.Regions\nimport com.amazonaws.services.dynamodbv2.document.DynamoDB\nimport com.amazonaws.services.dynamodbv2.document.Item\nimport com.amazonaws.services.lambda.runtime.Context\nimport com.tottokotkd.aws.gateway.core.*\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\nimport kotlin.properties.Delegates\n\nclass SaveRequest {\n    lateinit var user: String\n    lateinit var url: String\n    var rate: Int by Delegates.notNull()\n    lateinit var timestamp: String\n}\n\nclass SaveHandler: DataHandler<SaveRequest, Any> {\n    override fun handleRequest(input: SaveRequest, context: Context): ResponseData<Any> {\n\n        val timestamp = try {\n            ZonedDateTime.parse(input.timestamp, DateTimeFormatter.ISO_DATE_TIME)\n        } catch (e: Exception) {\n            return ResponseData(mapOf(\"status\" to \"error\", \"desc\" to \"date time parsing failed.\"), StatusCode.BadRequest)\n        }\n\n        val dynamoDB = DynamoDB(Regions.US_EAST_1)\n        val t = dynamoDB.getTable(\"pages\")\n        val item = Item.fromMap(mapOf(\"user\" to input.user, \"url\" to input.url, \"rate\" to input.rate, \"epoch\" to timestamp.toEpochSecond(), \"timezone\" to timestamp.offset.totalSeconds))\n        val result = t.putItem(item)\n\n        return ResponseData(mapOf(\"status\" to \"success\", \"input\" to input))\n    }\n}\n```\n\n`SaveHandler`がリクエストハンドラーで、`SaveRequest`がリクエストに期待される内容ですね。言うまでもないか。\n\nAPI Gateway経由なのでJSONを渡されそうなものですが、実際はアマゾンがPOJOに突っ込んだうえで渡してくれます。Serverlessの設定として書くべきことも特になくて、本当にこのままLambdaにデプロイすれば面倒をみてくれます。DynamoDBもIAMさえ弄ればコードは1行で終わり。たったこれだけで (金さえ払えば) 無敵のスケーラビリティが手に入っちゃう。スゴイ！\n\nただしアマゾン様といえどもdata classのコンストラクタを使うような器用な芸当は当然やれないので、`SaveRequest`はプロパティ全てvarのクラスになっています。もっともここは`val hoge: String by Delegates.notNull()` の方がいいような気もするし、Web APIなんだから`String?`の方がかえってロジカルに書きやすいような気もするし、その辺りは僕もまだ深く考えてません。そこまでkotlinやAWSの挙動に詳しくないという事情もある。\n\nそれはともかく戻り値が`Any`になっていて許せん！という人もいると思いますが、これはmapOfで手軽に返したかったのです。データクラスとか指定すればちゃんと型安全で動きます (たぶん)。\n\nまあこの辺りは趣味の問題でもあり、生産性を上げるために工夫のしどころだとも思うので、`ResponseData`を使わず自前で実装する方がいいかもですね、ステータスコードは引数じゃなくて型に結びつけるとか。あるいはハンドラーの方にヘルパーをバシバシ生やすとか… その辺は今後ちょっと便利になったらいいかなあ。フォークしてPRで見せびらかしてくれる人とか出てきたら嬉しい。\n\n\n\nで、コードはもう特に書くことないので思い出をつらつらと。\n\n## API Gateway -> Lambda -> Error!\n\n`sls invoke -f hello` が動くぞ！やったー！などと隙を見せたエンジニアを強襲するAWS！\n\n> Malformed Lambda proxy response\n\nlambdaとしては呼べるけどcurlすると落ちる。\n\nServerless使って一番つらかったのはコレ。Kotlin + Serverless + API Gatewayなんて実際に使っているケースがほぼ見つからない上に、ちょっと古い記事だと「動きました！簡単」とか書いてあるコードが今はもう動かない。嘘だゾ、全然簡単じゃないゾ。\n\n\nということで頑張って検索して探したのがコレ。~~人柱サンキュー！~~\n\n{% blockquote kyl191 https://forums.aws.amazon.com/thread.jspa?threadID=239688 AWS Developer Forums: Lambda Proxy Expectations %}\nOk, I found some documentation which says it expects statusCode, body and headers in a dict.\n{% endblockquote %}\n\n何でこんな状態なのか、ちょっと意味が分からないんですけど、API Gateway (Lambda Proxy) から呼ばれるLambdaは**戻り値の型はどうでもいいしインターフェイスとかないけど、statusCode body headersという3つの値を持っていないと実行時エラーになる**という凡そJavaとは思われない動的な仕組みになっているみたいです。\n\nつまり、'sls invoke -f hello'の結果として\n\n```json\n{\"hage\": [\"ok\", \"cool\", \"amazing\"]}\n```\n\nみたいな結果が見えている場合はダメです。\n\nLambdaとしては動いているのですが、Gateway経由で呼びたいなら以下の内容でなければいけません。\n\n\n```json\n{\n    \"body\": {\n        \"hage\": [\"ok\", \"cool\", \"amazing\"]\n    },\n    \"headers\": {},\n    \"statusCode\": 400\n}\n```\n\nこのフォーマットを守らなければ、Lambda ProxyモードのAPI Gatewayは有効な結果として受け付けてくれないのです。理屈が分かってしまえば納得できますが、この落とし穴だけは本当にひどい罠だと思います。\n\n一旦Lambda側からJSONを出力した上で、それを改めてGateway側がチェックするんでしょうか？ 色々と想像してますが謎です。\n\nちなみにデータのJSON化はあっちがJacksonでやってくれるので、上記のようなプロパティを持つPOJOを投げればいいみたいです。kotlinならdata classですね。あと試していませんがmapでも大丈夫かなと。\n\nただまあ、そこを自由にしても特に利点がなさそうなうえ、誰の目にも明らかにバグの温床でしかありません。今回のラッパーでは3つのプロパティを明示的に要求するインターフェイスを作っておきました。そもそも本来こういう仕様になってなきゃJavaコードとしておかしいと思うんですけど、それはそれで公式SDKとしては狭すぎる感じもありますからね… まあ気持ちはわかります。クソですけど。\n\nLambdaプロキシ自体が割と新しい機能であることも考えると仕方ない、AWSはこういうものなのだ… と割り切りましょう。\n\n## 2つの型パラメータを持つジェネリッククラスでないとエラーになる\n\nもうエラーログが手元にないんですが、リクエストハンドラーとして型パラメータ1つのクラスを作ってみたら「型パラメータは2つないと困るんだよなァ！」みたいな激おこメッセージを飛ばしてきました。これまたちょっと意味が分からないんですけど、JSONをリクエストPOJOに変換するときに型パラメータを使おうとしているのかな？ とにかくダメなものはダメらしいです。\n\nそれにしたって型パラメータ2つじゃないとダメっておかしくねえか？設計どうなってんの？という気もしますが仕方ない、AWSはこういうものなのだ… と割り切りましょう。\n\n## Internal Server Error\nAPI Gatewayを通過して結果が戻ってくるまでの間にエラーが発生するとInternal Server Errorです。例えば「Lambda処理内でリクエストパラメータを参照したらnull例外で落ちた」とかいう場合、それはInternal Server Errorであり、Gatewayのデフォルト処理が走って超ダサいJSONを投げ返します。\n\nサーバー内部でエラーが発生するなら、API Gatewayの視点からは全てInternal Server Errorなのです。まあそりゃ当然の挙動なんですけど、それはAPIを書く側からするとBadRequestだし、そもそも勝手にダサいJSONを流されるのも困ります。\n\nということでつまり、ハンドラ全体をtryで囲わないと不安だし、リクエスト内容の処理もちゃんと書かないといけません。当たり前の話とはいえ若干ちょっと面倒そう…\n\nその辺りをうまく集約できるインターフェイスとか作らないと大変そうですね。まあもちろん「ステータスコードさえ取れるなら大丈夫、後はYAGNI」という考え方もあると思います。その辺りの線引きはちょっと難しそう。\n\n## ということで\n\nなんか動くものは作れそうだし頑張る。","slug":"1","published":1,"updated":"2016-12-11T06:08:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwk9mw5l0005rec1xo45g1op","content":"<p>タイトルの通りです。<a href=\"https://github.com/tottokotkd/GatewayHandler\" target=\"_blank\" rel=\"external\">githubに置いてある</a>し、<a href=\"https://bintray.com/bintray/jcenter?filterByPkgName=GatewayHandler\" target=\"_blank\" rel=\"external\">Bintray経由でjcenterにもある</a>ので使えます。この公開ルートは今回初めてやってみましたが、なかなか便利ですね。</p>\n<p>もちろん公開するだけならgithubページでもイケるんですけど、その作業が手間だったり、IntelliJくんがキャッシュ持つ段階でエラー吐いたり、面倒なのでBintrayです。今はあんまりそこを頑張りたくなかった、仕方なかった。</p>\n<p>githubの方に書いてあるんですけど、コードでいうとこんな感じ。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> hello</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.regions.Regions</div><div class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.dynamodbv2.document.DynamoDB</div><div class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.dynamodbv2.document.Item</div><div class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.lambda.runtime.Context</div><div class=\"line\"><span class=\"keyword\">import</span> com.tottokotkd.aws.gateway.core.*</div><div class=\"line\"><span class=\"keyword\">import</span> java.time.ZonedDateTime</div><div class=\"line\"><span class=\"keyword\">import</span> java.time.format.DateTimeFormatter</div><div class=\"line\"><span class=\"keyword\">import</span> kotlin.properties.Delegates</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SaveRequest</span> </span>&#123;</div><div class=\"line\">    lateinit <span class=\"keyword\">var</span> user: String</div><div class=\"line\">    lateinit <span class=\"keyword\">var</span> url: String</div><div class=\"line\">    <span class=\"keyword\">var</span> rate: <span class=\"built_in\">Int</span> <span class=\"keyword\">by</span> Delegates.notNull()</div><div class=\"line\">    lateinit <span class=\"keyword\">var</span> timestamp: String</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SaveHandler</span>: <span class=\"type\">DataHandler</span>&lt;<span class=\"type\">SaveRequest, Any</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">handleRequest</span><span class=\"params\">(input: <span class=\"type\">SaveRequest</span>, context: <span class=\"type\">Context</span>)</span></span>: ResponseData&lt;Any&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> timestamp = <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ZonedDateTime.parse(input.timestamp, DateTimeFormatter.ISO_DATE_TIME)</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ResponseData(mapOf(<span class=\"string\">\"status\"</span> to <span class=\"string\">\"error\"</span>, <span class=\"string\">\"desc\"</span> to <span class=\"string\">\"date time parsing failed.\"</span>), StatusCode.BadRequest)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> dynamoDB = DynamoDB(Regions.US_EAST_1)</div><div class=\"line\">        <span class=\"keyword\">val</span> t = dynamoDB.getTable(<span class=\"string\">\"pages\"</span>)</div><div class=\"line\">        <span class=\"keyword\">val</span> item = Item.fromMap(mapOf(<span class=\"string\">\"user\"</span> to input.user, <span class=\"string\">\"url\"</span> to input.url, <span class=\"string\">\"rate\"</span> to input.rate, <span class=\"string\">\"epoch\"</span> to timestamp.toEpochSecond(), <span class=\"string\">\"timezone\"</span> to timestamp.offset.totalSeconds))</div><div class=\"line\">        <span class=\"keyword\">val</span> result = t.putItem(item)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> ResponseData(mapOf(<span class=\"string\">\"status\"</span> to <span class=\"string\">\"success\"</span>, <span class=\"string\">\"input\"</span> to input))</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>SaveHandler</code>がリクエストハンドラーで、<code>SaveRequest</code>がリクエストに期待される内容ですね。言うまでもないか。</p>\n<p>API Gateway経由なのでJSONを渡されそうなものですが、実際はアマゾンがPOJOに突っ込んだうえで渡してくれます。Serverlessの設定として書くべきことも特になくて、本当にこのままLambdaにデプロイすれば面倒をみてくれます。DynamoDBもIAMさえ弄ればコードは1行で終わり。たったこれだけで (金さえ払えば) 無敵のスケーラビリティが手に入っちゃう。スゴイ！</p>\n<p>ただしアマゾン様といえどもdata classのコンストラクタを使うような器用な芸当は当然やれないので、<code>SaveRequest</code>はプロパティ全てvarのクラスになっています。もっともここは<code>val hoge: String by Delegates.notNull()</code> の方がいいような気もするし、Web APIなんだから<code>String?</code>の方がかえってロジカルに書きやすいような気もするし、その辺りは僕もまだ深く考えてません。そこまでkotlinやAWSの挙動に詳しくないという事情もある。</p>\n<p>それはともかく戻り値が<code>Any</code>になっていて許せん！という人もいると思いますが、これはmapOfで手軽に返したかったのです。データクラスとか指定すればちゃんと型安全で動きます (たぶん)。</p>\n<p>まあこの辺りは趣味の問題でもあり、生産性を上げるために工夫のしどころだとも思うので、<code>ResponseData</code>を使わず自前で実装する方がいいかもですね、ステータスコードは引数じゃなくて型に結びつけるとか。あるいはハンドラーの方にヘルパーをバシバシ生やすとか… その辺は今後ちょっと便利になったらいいかなあ。フォークしてPRで見せびらかしてくれる人とか出てきたら嬉しい。</p>\n<p>で、コードはもう特に書くことないので思い出をつらつらと。</p>\n<h2 id=\"API-Gateway-gt-Lambda-gt-Error\"><a href=\"#API-Gateway-gt-Lambda-gt-Error\" class=\"headerlink\" title=\"API Gateway -&gt; Lambda -&gt; Error!\"></a>API Gateway -&gt; Lambda -&gt; Error!</h2><p><code>sls invoke -f hello</code> が動くぞ！やったー！などと隙を見せたエンジニアを強襲するAWS！</p>\n<blockquote>\n<p>Malformed Lambda proxy response</p>\n</blockquote>\n<p>lambdaとしては呼べるけどcurlすると落ちる。</p>\n<p>Serverless使って一番つらかったのはコレ。Kotlin + Serverless + API Gatewayなんて実際に使っているケースがほぼ見つからない上に、ちょっと古い記事だと「動きました！簡単」とか書いてあるコードが今はもう動かない。嘘だゾ、全然簡単じゃないゾ。</p>\n<p>ということで頑張って検索して探したのがコレ。<del>人柱サンキュー！</del></p>\n<blockquote><p>Ok, I found some documentation which says it expects statusCode, body and headers in a dict.</p>\n<footer><strong>kyl191</strong><cite><a href=\"https://forums.aws.amazon.com/thread.jspa?threadID=239688\" target=\"_blank\" rel=\"external\">AWS Developer Forums: Lambda Proxy Expectations</a></cite></footer></blockquote>\n<p>何でこんな状態なのか、ちょっと意味が分からないんですけど、API Gateway (Lambda Proxy) から呼ばれるLambdaは<strong>戻り値の型はどうでもいいしインターフェイスとかないけど、statusCode body headersという3つの値を持っていないと実行時エラーになる</strong>という凡そJavaとは思われない動的な仕組みになっているみたいです。</p>\n<p>つまり、’sls invoke -f hello’の結果として</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"hage\"</span>: [<span class=\"string\">\"ok\"</span>, <span class=\"string\">\"cool\"</span>, <span class=\"string\">\"amazing\"</span>]&#125;</div></pre></td></tr></table></figure>\n<p>みたいな結果が見えている場合はダメです。</p>\n<p>Lambdaとしては動いているのですが、Gateway経由で呼びたいなら以下の内容でなければいけません。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"body\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"hage\"</span>: [<span class=\"string\">\"ok\"</span>, <span class=\"string\">\"cool\"</span>, <span class=\"string\">\"amazing\"</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"headers\"</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">\"statusCode\"</span>: <span class=\"number\">400</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>このフォーマットを守らなければ、Lambda ProxyモードのAPI Gatewayは有効な結果として受け付けてくれないのです。理屈が分かってしまえば納得できますが、この落とし穴だけは本当にひどい罠だと思います。</p>\n<p>一旦Lambda側からJSONを出力した上で、それを改めてGateway側がチェックするんでしょうか？ 色々と想像してますが謎です。</p>\n<p>ちなみにデータのJSON化はあっちがJacksonでやってくれるので、上記のようなプロパティを持つPOJOを投げればいいみたいです。kotlinならdata classですね。あと試していませんがmapでも大丈夫かなと。</p>\n<p>ただまあ、そこを自由にしても特に利点がなさそうなうえ、誰の目にも明らかにバグの温床でしかありません。今回のラッパーでは3つのプロパティを明示的に要求するインターフェイスを作っておきました。そもそも本来こういう仕様になってなきゃJavaコードとしておかしいと思うんですけど、それはそれで公式SDKとしては狭すぎる感じもありますからね… まあ気持ちはわかります。クソですけど。</p>\n<p>Lambdaプロキシ自体が割と新しい機能であることも考えると仕方ない、AWSはこういうものなのだ… と割り切りましょう。</p>\n<h2 id=\"2つの型パラメータを持つジェネリッククラスでないとエラーになる\"><a href=\"#2つの型パラメータを持つジェネリッククラスでないとエラーになる\" class=\"headerlink\" title=\"2つの型パラメータを持つジェネリッククラスでないとエラーになる\"></a>2つの型パラメータを持つジェネリッククラスでないとエラーになる</h2><p>もうエラーログが手元にないんですが、リクエストハンドラーとして型パラメータ1つのクラスを作ってみたら「型パラメータは2つないと困るんだよなァ！」みたいな激おこメッセージを飛ばしてきました。これまたちょっと意味が分からないんですけど、JSONをリクエストPOJOに変換するときに型パラメータを使おうとしているのかな？ とにかくダメなものはダメらしいです。</p>\n<p>それにしたって型パラメータ2つじゃないとダメっておかしくねえか？設計どうなってんの？という気もしますが仕方ない、AWSはこういうものなのだ… と割り切りましょう。</p>\n<h2 id=\"Internal-Server-Error\"><a href=\"#Internal-Server-Error\" class=\"headerlink\" title=\"Internal Server Error\"></a>Internal Server Error</h2><p>API Gatewayを通過して結果が戻ってくるまでの間にエラーが発生するとInternal Server Errorです。例えば「Lambda処理内でリクエストパラメータを参照したらnull例外で落ちた」とかいう場合、それはInternal Server Errorであり、Gatewayのデフォルト処理が走って超ダサいJSONを投げ返します。</p>\n<p>サーバー内部でエラーが発生するなら、API Gatewayの視点からは全てInternal Server Errorなのです。まあそりゃ当然の挙動なんですけど、それはAPIを書く側からするとBadRequestだし、そもそも勝手にダサいJSONを流されるのも困ります。</p>\n<p>ということでつまり、ハンドラ全体をtryで囲わないと不安だし、リクエスト内容の処理もちゃんと書かないといけません。当たり前の話とはいえ若干ちょっと面倒そう…</p>\n<p>その辺りをうまく集約できるインターフェイスとか作らないと大変そうですね。まあもちろん「ステータスコードさえ取れるなら大丈夫、後はYAGNI」という考え方もあると思います。その辺りの線引きはちょっと難しそう。</p>\n<h2 id=\"ということで\"><a href=\"#ということで\" class=\"headerlink\" title=\"ということで\"></a>ということで</h2><p>なんか動くものは作れそうだし頑張る。</p>\n","excerpt":"","more":"<p>タイトルの通りです。<a href=\"https://github.com/tottokotkd/GatewayHandler\">githubに置いてある</a>し、<a href=\"https://bintray.com/bintray/jcenter?filterByPkgName=GatewayHandler\">Bintray経由でjcenterにもある</a>ので使えます。この公開ルートは今回初めてやってみましたが、なかなか便利ですね。</p>\n<p>もちろん公開するだけならgithubページでもイケるんですけど、その作業が手間だったり、IntelliJくんがキャッシュ持つ段階でエラー吐いたり、面倒なのでBintrayです。今はあんまりそこを頑張りたくなかった、仕方なかった。</p>\n<p>githubの方に書いてあるんですけど、コードでいうとこんな感じ。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> hello</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.regions.Regions</div><div class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.dynamodbv2.document.DynamoDB</div><div class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.dynamodbv2.document.Item</div><div class=\"line\"><span class=\"keyword\">import</span> com.amazonaws.services.lambda.runtime.Context</div><div class=\"line\"><span class=\"keyword\">import</span> com.tottokotkd.aws.gateway.core.*</div><div class=\"line\"><span class=\"keyword\">import</span> java.time.ZonedDateTime</div><div class=\"line\"><span class=\"keyword\">import</span> java.time.format.DateTimeFormatter</div><div class=\"line\"><span class=\"keyword\">import</span> kotlin.properties.Delegates</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SaveRequest</span> </span>&#123;</div><div class=\"line\">    lateinit <span class=\"keyword\">var</span> user: String</div><div class=\"line\">    lateinit <span class=\"keyword\">var</span> url: String</div><div class=\"line\">    <span class=\"keyword\">var</span> rate: <span class=\"built_in\">Int</span> <span class=\"keyword\">by</span> Delegates.notNull()</div><div class=\"line\">    lateinit <span class=\"keyword\">var</span> timestamp: String</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SaveHandler</span>: <span class=\"type\">DataHandler</span>&lt;<span class=\"type\">SaveRequest, Any</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">handleRequest</span><span class=\"params\">(input: <span class=\"type\">SaveRequest</span>, context: <span class=\"type\">Context</span>)</span></span>: ResponseData&lt;Any&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> timestamp = <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ZonedDateTime.parse(input.timestamp, DateTimeFormatter.ISO_DATE_TIME)</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ResponseData(mapOf(<span class=\"string\">\"status\"</span> to <span class=\"string\">\"error\"</span>, <span class=\"string\">\"desc\"</span> to <span class=\"string\">\"date time parsing failed.\"</span>), StatusCode.BadRequest)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">val</span> dynamoDB = DynamoDB(Regions.US_EAST_1)</div><div class=\"line\">        <span class=\"keyword\">val</span> t = dynamoDB.getTable(<span class=\"string\">\"pages\"</span>)</div><div class=\"line\">        <span class=\"keyword\">val</span> item = Item.fromMap(mapOf(<span class=\"string\">\"user\"</span> to input.user, <span class=\"string\">\"url\"</span> to input.url, <span class=\"string\">\"rate\"</span> to input.rate, <span class=\"string\">\"epoch\"</span> to timestamp.toEpochSecond(), <span class=\"string\">\"timezone\"</span> to timestamp.offset.totalSeconds))</div><div class=\"line\">        <span class=\"keyword\">val</span> result = t.putItem(item)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> ResponseData(mapOf(<span class=\"string\">\"status\"</span> to <span class=\"string\">\"success\"</span>, <span class=\"string\">\"input\"</span> to input))</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>SaveHandler</code>がリクエストハンドラーで、<code>SaveRequest</code>がリクエストに期待される内容ですね。言うまでもないか。</p>\n<p>API Gateway経由なのでJSONを渡されそうなものですが、実際はアマゾンがPOJOに突っ込んだうえで渡してくれます。Serverlessの設定として書くべきことも特になくて、本当にこのままLambdaにデプロイすれば面倒をみてくれます。DynamoDBもIAMさえ弄ればコードは1行で終わり。たったこれだけで (金さえ払えば) 無敵のスケーラビリティが手に入っちゃう。スゴイ！</p>\n<p>ただしアマゾン様といえどもdata classのコンストラクタを使うような器用な芸当は当然やれないので、<code>SaveRequest</code>はプロパティ全てvarのクラスになっています。もっともここは<code>val hoge: String by Delegates.notNull()</code> の方がいいような気もするし、Web APIなんだから<code>String?</code>の方がかえってロジカルに書きやすいような気もするし、その辺りは僕もまだ深く考えてません。そこまでkotlinやAWSの挙動に詳しくないという事情もある。</p>\n<p>それはともかく戻り値が<code>Any</code>になっていて許せん！という人もいると思いますが、これはmapOfで手軽に返したかったのです。データクラスとか指定すればちゃんと型安全で動きます (たぶん)。</p>\n<p>まあこの辺りは趣味の問題でもあり、生産性を上げるために工夫のしどころだとも思うので、<code>ResponseData</code>を使わず自前で実装する方がいいかもですね、ステータスコードは引数じゃなくて型に結びつけるとか。あるいはハンドラーの方にヘルパーをバシバシ生やすとか… その辺は今後ちょっと便利になったらいいかなあ。フォークしてPRで見せびらかしてくれる人とか出てきたら嬉しい。</p>\n<p>で、コードはもう特に書くことないので思い出をつらつらと。</p>\n<h2 id=\"API-Gateway-gt-Lambda-gt-Error\"><a href=\"#API-Gateway-gt-Lambda-gt-Error\" class=\"headerlink\" title=\"API Gateway -&gt; Lambda -&gt; Error!\"></a>API Gateway -&gt; Lambda -&gt; Error!</h2><p><code>sls invoke -f hello</code> が動くぞ！やったー！などと隙を見せたエンジニアを強襲するAWS！</p>\n<blockquote>\n<p>Malformed Lambda proxy response</p>\n</blockquote>\n<p>lambdaとしては呼べるけどcurlすると落ちる。</p>\n<p>Serverless使って一番つらかったのはコレ。Kotlin + Serverless + API Gatewayなんて実際に使っているケースがほぼ見つからない上に、ちょっと古い記事だと「動きました！簡単」とか書いてあるコードが今はもう動かない。嘘だゾ、全然簡単じゃないゾ。</p>\n<p>ということで頑張って検索して探したのがコレ。<del>人柱サンキュー！</del></p>\n<blockquote><p>Ok, I found some documentation which says it expects statusCode, body and headers in a dict.</p>\n<footer><strong>kyl191</strong><cite><a href=\"https://forums.aws.amazon.com/thread.jspa?threadID=239688\">AWS Developer Forums: Lambda Proxy Expectations</a></cite></footer></blockquote>\n<p>何でこんな状態なのか、ちょっと意味が分からないんですけど、API Gateway (Lambda Proxy) から呼ばれるLambdaは<strong>戻り値の型はどうでもいいしインターフェイスとかないけど、statusCode body headersという3つの値を持っていないと実行時エラーになる</strong>という凡そJavaとは思われない動的な仕組みになっているみたいです。</p>\n<p>つまり、’sls invoke -f hello’の結果として</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"hage\"</span>: [<span class=\"string\">\"ok\"</span>, <span class=\"string\">\"cool\"</span>, <span class=\"string\">\"amazing\"</span>]&#125;</div></pre></td></tr></table></figure>\n<p>みたいな結果が見えている場合はダメです。</p>\n<p>Lambdaとしては動いているのですが、Gateway経由で呼びたいなら以下の内容でなければいけません。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"body\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"hage\"</span>: [<span class=\"string\">\"ok\"</span>, <span class=\"string\">\"cool\"</span>, <span class=\"string\">\"amazing\"</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"headers\"</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">\"statusCode\"</span>: <span class=\"number\">400</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>このフォーマットを守らなければ、Lambda ProxyモードのAPI Gatewayは有効な結果として受け付けてくれないのです。理屈が分かってしまえば納得できますが、この落とし穴だけは本当にひどい罠だと思います。</p>\n<p>一旦Lambda側からJSONを出力した上で、それを改めてGateway側がチェックするんでしょうか？ 色々と想像してますが謎です。</p>\n<p>ちなみにデータのJSON化はあっちがJacksonでやってくれるので、上記のようなプロパティを持つPOJOを投げればいいみたいです。kotlinならdata classですね。あと試していませんがmapでも大丈夫かなと。</p>\n<p>ただまあ、そこを自由にしても特に利点がなさそうなうえ、誰の目にも明らかにバグの温床でしかありません。今回のラッパーでは3つのプロパティを明示的に要求するインターフェイスを作っておきました。そもそも本来こういう仕様になってなきゃJavaコードとしておかしいと思うんですけど、それはそれで公式SDKとしては狭すぎる感じもありますからね… まあ気持ちはわかります。クソですけど。</p>\n<p>Lambdaプロキシ自体が割と新しい機能であることも考えると仕方ない、AWSはこういうものなのだ… と割り切りましょう。</p>\n<h2 id=\"2つの型パラメータを持つジェネリッククラスでないとエラーになる\"><a href=\"#2つの型パラメータを持つジェネリッククラスでないとエラーになる\" class=\"headerlink\" title=\"2つの型パラメータを持つジェネリッククラスでないとエラーになる\"></a>2つの型パラメータを持つジェネリッククラスでないとエラーになる</h2><p>もうエラーログが手元にないんですが、リクエストハンドラーとして型パラメータ1つのクラスを作ってみたら「型パラメータは2つないと困るんだよなァ！」みたいな激おこメッセージを飛ばしてきました。これまたちょっと意味が分からないんですけど、JSONをリクエストPOJOに変換するときに型パラメータを使おうとしているのかな？ とにかくダメなものはダメらしいです。</p>\n<p>それにしたって型パラメータ2つじゃないとダメっておかしくねえか？設計どうなってんの？という気もしますが仕方ない、AWSはこういうものなのだ… と割り切りましょう。</p>\n<h2 id=\"Internal-Server-Error\"><a href=\"#Internal-Server-Error\" class=\"headerlink\" title=\"Internal Server Error\"></a>Internal Server Error</h2><p>API Gatewayを通過して結果が戻ってくるまでの間にエラーが発生するとInternal Server Errorです。例えば「Lambda処理内でリクエストパラメータを参照したらnull例外で落ちた」とかいう場合、それはInternal Server Errorであり、Gatewayのデフォルト処理が走って超ダサいJSONを投げ返します。</p>\n<p>サーバー内部でエラーが発生するなら、API Gatewayの視点からは全てInternal Server Errorなのです。まあそりゃ当然の挙動なんですけど、それはAPIを書く側からするとBadRequestだし、そもそも勝手にダサいJSONを流されるのも困ります。</p>\n<p>ということでつまり、ハンドラ全体をtryで囲わないと不安だし、リクエスト内容の処理もちゃんと書かないといけません。当たり前の話とはいえ若干ちょっと面倒そう…</p>\n<p>その辺りをうまく集約できるインターフェイスとか作らないと大変そうですね。まあもちろん「ステータスコードさえ取れるなら大丈夫、後はYAGNI」という考え方もあると思います。その辺りの線引きはちょっと難しそう。</p>\n<h2 id=\"ということで\"><a href=\"#ということで\" class=\"headerlink\" title=\"ということで\"></a>ということで</h2><p>なんか動くものは作れそうだし頑張る。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciwk9mw570000rec1740djrfn","tag_id":"ciwk9mw5e0002rec1bm6c5fmk","_id":"ciwk9mw5n0007rec1g053zrme"},{"post_id":"ciwk9mw5h0003rec1mkcrsmuj","tag_id":"ciwk9mw5m0006rec1eqxgyfu8","_id":"ciwk9mw5q000crec1lolfl4o2"},{"post_id":"ciwk9mw5h0003rec1mkcrsmuj","tag_id":"ciwk9mw5n0008rec1nyz36596","_id":"ciwk9mw5q000drec1fescrckw"},{"post_id":"ciwk9mw5h0003rec1mkcrsmuj","tag_id":"ciwk9mw5o0009rec1pt6sused","_id":"ciwk9mw5q000frec18wfko0kk"},{"post_id":"ciwk9mw5h0003rec1mkcrsmuj","tag_id":"ciwk9mw5o000arec18f3gjsiq","_id":"ciwk9mw5q000grec1k0g66p9z"},{"post_id":"ciwk9mw5i0004rec18sp4tbcc","tag_id":"ciwk9mw5m0006rec1eqxgyfu8","_id":"ciwk9mw5r000jrec1b167853m"},{"post_id":"ciwk9mw5i0004rec18sp4tbcc","tag_id":"ciwk9mw5q000erec1rqbjvq43","_id":"ciwk9mw5r000krec1h1zg0ekt"},{"post_id":"ciwk9mw5i0004rec18sp4tbcc","tag_id":"ciwk9mw5q000hrec1z1fxkxpx","_id":"ciwk9mw5r000mrec1c6abesi8"},{"post_id":"ciwk9mw5l0005rec1xo45g1op","tag_id":"ciwk9mw5r000irec1iwns66ie","_id":"ciwk9mw5r000nrec1aryqvfky"},{"post_id":"ciwk9mw5l0005rec1xo45g1op","tag_id":"ciwk9mw5r000lrec1uub78777","_id":"ciwk9mw5s000orec1fi7v69qq"}],"Tag":[{"name":"Gulp","_id":"ciwk9mw5e0002rec1bm6c5fmk"},{"name":"Swift","_id":"ciwk9mw5m0006rec1eqxgyfu8"},{"name":"Kitura","_id":"ciwk9mw5n0008rec1nyz36596"},{"name":"MariaDB","_id":"ciwk9mw5o0009rec1pt6sused"},{"name":"Sterntaler","_id":"ciwk9mw5o000arec18f3gjsiq"},{"name":"CLion","_id":"ciwk9mw5q000erec1rqbjvq43"},{"name":"CMake","_id":"ciwk9mw5q000hrec1z1fxkxpx"},{"name":"Kotlin","_id":"ciwk9mw5r000irec1iwns66ie"},{"name":"AWS","_id":"ciwk9mw5r000lrec1uub78777"}]}}