{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1480692757000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1480692737000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1480692737000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1480692737000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1480692737000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1480692737000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1480692737000},{"_id":"source/_posts/20161120 サイト引っ越しとかいう死語について.md","hash":"3c74582943719643f6b62ef00e84886f3843e3ad","modified":1480649976000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1480691879000},{"_id":"source/_posts/20161202 swift buildで渡すオプションをいちいち書きたくないならcmakeを使おう.md","hash":"0d792b3d6edb96693338d74ef605dfcaa97c0fdb","modified":1480689480000},{"_id":"source/_posts/Swift + Kitura + MySQL + CLion + CMakeで頑張った件.md","hash":"8c802d3e3e2236126d9df4210a993c46f1d62e09","modified":1480691475000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1480692737000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1480692737000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1480692737000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1480692737000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1480692737000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1480692737000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1480692737000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1480692737000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1480692737000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1480692737000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1480692737000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480692737000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1480692737000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480692737000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1480692737000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1480692737000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1480692737000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1480692737000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1480692737000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1480692737000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1480692737000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1480692737000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1480692737000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1480692737000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1480692737000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1480692737000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1480692737000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1480692737000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1480692737000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1480692737000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1480692737000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1480692737000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1480692737000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1480692737000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1480692737000},{"_id":"public/atom.xml","hash":"b3860f53d0faeaa0432415ce0f17c11655577f52","modified":1480692864321},{"_id":"public/2016/12/02/Swift-Kitura-MySQL-CLion-CMakeで頑張った件/index.html","hash":"786b905c2e064f26b06e2b4d70ca46e161d171af","modified":1480692864530},{"_id":"public/2016/11/20/サイト引っ越しとかいう死語について/index.html","hash":"3b5caf471057b4f0dcfbc9e3e1bc67e20824d7e6","modified":1480692864530},{"_id":"public/archives/index.html","hash":"3719aeab834f6d5f2461142f8f653546a907d967","modified":1480692864530},{"_id":"public/archives/2016/index.html","hash":"cfcef11182765a7f338f11c6cda950fbe7d49263","modified":1480692864531},{"_id":"public/archives/2016/11/index.html","hash":"a2986c5390d541c3ee7dc6e6854aa97101f06a0d","modified":1480692864531},{"_id":"public/archives/2016/12/index.html","hash":"e60ecd3ed27b333e32e4eb60e40a712d3cd4192b","modified":1480692864531},{"_id":"public/2016/11/22/swift buildで渡すオプションをいちいち書きたくないならcmakeを使おう/index.html","hash":"1cadeb76e4550862f5ff09840cb98b01e22ad59a","modified":1480692864531},{"_id":"public/index.html","hash":"f8b73dc59d473db1a9a151838762d9a02adc1cb0","modified":1480692864531},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480692864542},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480692864542},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480692864542},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480692864543},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480692864543},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480692864543},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1480692864543},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1480692864543},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480692864543},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1480692864544},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1480692865953},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1480692865966},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1480692865967},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1480692865967},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480692865967},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480692865968},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1480692865968},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1480692865968},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1480692865968},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1480692865968},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1480692865968},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1480692865972},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1480692865972}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"サイト引っ越しとかいう死語について","date":"2016-11-20T07:45:39.000Z","_content":"\n昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。\n\n「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と理由はありそうですね。知らんけど。\n\n私なんかは割と「タグ手打ちで工事中」みたいなレトロな世界に馴染みのある人間なんですけど、あの頃は大変だったですねえ… なにしろ世界中で車輪を再発名してましたもんね。今ならtwitterとfacebookでアカウント作って終わりだもん、そりゃインターネットも別世界になるよなあと。\n\nそこで僕も人類の進歩に便乗し、コマンド一発でブログ作れちゃう[Hexo](https://hexo.io/)くんのチカラを使ってみました。ただ現状サーバー料金を払う金がないので、関連するリソースはすべて[github](https://github.com/tottokotkd/tottokotkd.github.io)くんにあります。完全にタダ乗りだけど、なんか技術っぽい記事をたまに書けば許されると思います。\n\n今ぼんやり考えているのはツイッター関係で一つ、ニュース関係でもう一つ、CUIツールでさらに一つ… でもまあ多分しばらく形にならないので、やむを得ず、本当に仕方なく、どうしても嫌なんだけど不本意ながら、ただの日記みたいな記事を書きます。嗚呼残念だナ。\n\nなおHexo / github関連の記事は書かない。参考情報が沢山あるから今更追加する必要もない。","source":"_posts/20161120 サイト引っ越しとかいう死語について.md","raw":"---\ntitle: サイト引っ越しとかいう死語について\ndate: 2016-11-20 16:45:39\ntags:\n---\n\n昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。\n\n「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と理由はありそうですね。知らんけど。\n\n私なんかは割と「タグ手打ちで工事中」みたいなレトロな世界に馴染みのある人間なんですけど、あの頃は大変だったですねえ… なにしろ世界中で車輪を再発名してましたもんね。今ならtwitterとfacebookでアカウント作って終わりだもん、そりゃインターネットも別世界になるよなあと。\n\nそこで僕も人類の進歩に便乗し、コマンド一発でブログ作れちゃう[Hexo](https://hexo.io/)くんのチカラを使ってみました。ただ現状サーバー料金を払う金がないので、関連するリソースはすべて[github](https://github.com/tottokotkd/tottokotkd.github.io)くんにあります。完全にタダ乗りだけど、なんか技術っぽい記事をたまに書けば許されると思います。\n\n今ぼんやり考えているのはツイッター関係で一つ、ニュース関係でもう一つ、CUIツールでさらに一つ… でもまあ多分しばらく形にならないので、やむを得ず、本当に仕方なく、どうしても嫌なんだけど不本意ながら、ただの日記みたいな記事を書きます。嗚呼残念だナ。\n\nなおHexo / github関連の記事は書かない。参考情報が沢山あるから今更追加する必要もない。","slug":"サイト引っ越しとかいう死語について","published":1,"updated":"2016-12-02T03:39:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7yatlc00005qc1r27wjf6j","content":"<p>昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。</p>\n<p>「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と理由はありそうですね。知らんけど。</p>\n<p>私なんかは割と「タグ手打ちで工事中」みたいなレトロな世界に馴染みのある人間なんですけど、あの頃は大変だったですねえ… なにしろ世界中で車輪を再発名してましたもんね。今ならtwitterとfacebookでアカウント作って終わりだもん、そりゃインターネットも別世界になるよなあと。</p>\n<p>そこで僕も人類の進歩に便乗し、コマンド一発でブログ作れちゃう<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>くんのチカラを使ってみました。ただ現状サーバー料金を払う金がないので、関連するリソースはすべて<a href=\"https://github.com/tottokotkd/tottokotkd.github.io\" target=\"_blank\" rel=\"external\">github</a>くんにあります。完全にタダ乗りだけど、なんか技術っぽい記事をたまに書けば許されると思います。</p>\n<p>今ぼんやり考えているのはツイッター関係で一つ、ニュース関係でもう一つ、CUIツールでさらに一つ… でもまあ多分しばらく形にならないので、やむを得ず、本当に仕方なく、どうしても嫌なんだけど不本意ながら、ただの日記みたいな記事を書きます。嗚呼残念だナ。</p>\n<p>なおHexo / github関連の記事は書かない。参考情報が沢山あるから今更追加する必要もない。</p>\n","excerpt":"","more":"<p>昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。</p>\n<p>「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と理由はありそうですね。知らんけど。</p>\n<p>私なんかは割と「タグ手打ちで工事中」みたいなレトロな世界に馴染みのある人間なんですけど、あの頃は大変だったですねえ… なにしろ世界中で車輪を再発名してましたもんね。今ならtwitterとfacebookでアカウント作って終わりだもん、そりゃインターネットも別世界になるよなあと。</p>\n<p>そこで僕も人類の進歩に便乗し、コマンド一発でブログ作れちゃう<a href=\"https://hexo.io/\">Hexo</a>くんのチカラを使ってみました。ただ現状サーバー料金を払う金がないので、関連するリソースはすべて<a href=\"https://github.com/tottokotkd/tottokotkd.github.io\">github</a>くんにあります。完全にタダ乗りだけど、なんか技術っぽい記事をたまに書けば許されると思います。</p>\n<p>今ぼんやり考えているのはツイッター関係で一つ、ニュース関係でもう一つ、CUIツールでさらに一つ… でもまあ多分しばらく形にならないので、やむを得ず、本当に仕方なく、どうしても嫌なんだけど不本意ながら、ただの日記みたいな記事を書きます。嗚呼残念だナ。</p>\n<p>なおHexo / github関連の記事は書かない。参考情報が沢山あるから今更追加する必要もない。</p>\n"},{"title":"swift buildで渡すオプションをいちいち書きたくないのでcmakeする","date":"2016-11-22T13:33:03.000Z","_content":"\nいまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。\n\nそういう次第でswiftの話です。毎度毎度 `swift build -Xswiftc -I/usr/local/include/mysql -Xlinker -L/usr/local/lib\n` とか書きたくない人は幸せになれるかもしれないです。\n\n## CMakeFiles.txtを書くべし\n\nまずこういうやつ書いてください。ビルドコマンドのオプションを適宜いい感じにしましょう。\n\n```cmake\ncmake_minimum_required(VERSION 3.6)\nproject(MariaDbTaler)\n\nset(SOURCE_FILES\n        Sources/MariaDbDriver.swift\n        Package.swift)\n\nset(SWIFT_COMMAND\n        swift build\n        -Xlinker -L/usr/local/lib\n        -Xcc -I/usr/local/include\n        -Xswiftc -lmysqlclient)\n\nadd_custom_target(MariaDbTaler\n        COMMAND ${SWIFT_COMMAND}\n        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n        SOURCES ${SOURCE_FILES})\n```\n\nなお試してませんが明らかに`SOURCE_FILES`は書かなくてよい気がいたします。\n\n## `cmake .`すべし\n\n[人類なら`out-of-source`ビルドしなさい](http://qiita.com/osamu0329/items/7de2b190df3cfb4ad0ca)という話もありますが、最初はまあいいです。1回実行してゴミファイルが大量に出来てから後悔しても遅くないです。\n\n## `make XXXXXX` すべし\n\n上の例だと`make MariaDbTaler`ですね。プロジェクト名を渡してやります。そうするとあらかじめ設定してあるコマンドが走るのです。\n\n## 別にCMakeいらなくね？\n\nいらないです。CMake経由しても特にいいことないしシェルスクリプト書けばいいじゃん。なんだよこれ！\n\nところが、みんな大好きJetBrains謹製IDEであるCLionくんが \"[CLion relies on CMake project model, so you need to start a CMake project for Swift](https://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/)\" と宣うているのです。正直まだまだCLionのSwiftプラグインはショボくて辛い感じなのですが、CLionを使うならCMakeFiles.txtは嫌でも書かなきゃいけません。そこで一括して書けると考えれば、まあちょっとだけ便利です。\n\n## 余談: -Xswiftc is 何\n\n`swift --help`ってなんか使いにくい気がしてならないんですよね。ヘルプ叩いたらサブコマンドの一覧も出してほしいし… `swift package update`の存在とか分かりにくすぎるし… しかしまあそれはいいです。\n\n`-Xswiftc`のことは`swift build --help`すれば分かります。\n\n```swift\n$ swift build --help\n\nOVERVIEW: Build sources into binary products\n\nUSAGE: swift build [mode] [options]\n\nMODES:\n  -c, --configuration <value>   Build with configuration (debug|release) [default: debug]\n  --clean [<mode>]              Delete artifacts (build|dist) [default: build]\n\nOPTIONS:\n  -C, --chdir <path>       Change working directory before any other operation\n  --build-path <path>      Specify build/cache directory [default: ./.build]\n  --color <mode>           Specify color mode (auto|always|never) [default: auto]\n  -v, --verbose            Increase verbosity of informational output\n  -Xcc <flag>              Pass flag through to all C compiler invocations\n  -Xlinker <flag>          Pass flag through to all linker invocations\n  -Xswiftc <flag>          Pass flag through to all Swift compiler invocations\n\nNOTE: Use `swift package` to perform other functions on packages\n```\n\n`-Xswiftc`は分かったけど`-I/usr/local/include/mysql`が分からないんですけど！という人がいると困るので`swift --help | grep -e -I`します(全文は長い)。\n\n```swift\n$ swift --help | grep -e -I\n\n  -I <value>             Add directory to the import search path\n```\n\ngccでよく見かける愉快な仲間たちですね。Xcodeを使っていると普段全く意識しないと思いますが、-Iは「ヘッダーファイルをどこで探すか」を指定するオプションです。Xcodeのビルド設定にも`header search paths`とかいう項目がありますよね。アレですアレ。\n\nこれはつまり古代C言語の領域に突入しているわけです。`swift build`の挙動がよく分からないという人はC++あたりのコンパイラ・リンカの解説記事を読むといいかもしれないです。\n\n決してコンパイラーではありません、コンパイラです。","source":"_posts/20161202 swift buildで渡すオプションをいちいち書きたくないならcmakeを使おう.md","raw":"---\ntitle: swift buildで渡すオプションをいちいち書きたくないのでcmakeする\ndate: 2016-11-22 22:33:03\ntags:\n---\n\nいまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。\n\nそういう次第でswiftの話です。毎度毎度 `swift build -Xswiftc -I/usr/local/include/mysql -Xlinker -L/usr/local/lib\n` とか書きたくない人は幸せになれるかもしれないです。\n\n## CMakeFiles.txtを書くべし\n\nまずこういうやつ書いてください。ビルドコマンドのオプションを適宜いい感じにしましょう。\n\n```cmake\ncmake_minimum_required(VERSION 3.6)\nproject(MariaDbTaler)\n\nset(SOURCE_FILES\n        Sources/MariaDbDriver.swift\n        Package.swift)\n\nset(SWIFT_COMMAND\n        swift build\n        -Xlinker -L/usr/local/lib\n        -Xcc -I/usr/local/include\n        -Xswiftc -lmysqlclient)\n\nadd_custom_target(MariaDbTaler\n        COMMAND ${SWIFT_COMMAND}\n        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n        SOURCES ${SOURCE_FILES})\n```\n\nなお試してませんが明らかに`SOURCE_FILES`は書かなくてよい気がいたします。\n\n## `cmake .`すべし\n\n[人類なら`out-of-source`ビルドしなさい](http://qiita.com/osamu0329/items/7de2b190df3cfb4ad0ca)という話もありますが、最初はまあいいです。1回実行してゴミファイルが大量に出来てから後悔しても遅くないです。\n\n## `make XXXXXX` すべし\n\n上の例だと`make MariaDbTaler`ですね。プロジェクト名を渡してやります。そうするとあらかじめ設定してあるコマンドが走るのです。\n\n## 別にCMakeいらなくね？\n\nいらないです。CMake経由しても特にいいことないしシェルスクリプト書けばいいじゃん。なんだよこれ！\n\nところが、みんな大好きJetBrains謹製IDEであるCLionくんが \"[CLion relies on CMake project model, so you need to start a CMake project for Swift](https://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/)\" と宣うているのです。正直まだまだCLionのSwiftプラグインはショボくて辛い感じなのですが、CLionを使うならCMakeFiles.txtは嫌でも書かなきゃいけません。そこで一括して書けると考えれば、まあちょっとだけ便利です。\n\n## 余談: -Xswiftc is 何\n\n`swift --help`ってなんか使いにくい気がしてならないんですよね。ヘルプ叩いたらサブコマンドの一覧も出してほしいし… `swift package update`の存在とか分かりにくすぎるし… しかしまあそれはいいです。\n\n`-Xswiftc`のことは`swift build --help`すれば分かります。\n\n```swift\n$ swift build --help\n\nOVERVIEW: Build sources into binary products\n\nUSAGE: swift build [mode] [options]\n\nMODES:\n  -c, --configuration <value>   Build with configuration (debug|release) [default: debug]\n  --clean [<mode>]              Delete artifacts (build|dist) [default: build]\n\nOPTIONS:\n  -C, --chdir <path>       Change working directory before any other operation\n  --build-path <path>      Specify build/cache directory [default: ./.build]\n  --color <mode>           Specify color mode (auto|always|never) [default: auto]\n  -v, --verbose            Increase verbosity of informational output\n  -Xcc <flag>              Pass flag through to all C compiler invocations\n  -Xlinker <flag>          Pass flag through to all linker invocations\n  -Xswiftc <flag>          Pass flag through to all Swift compiler invocations\n\nNOTE: Use `swift package` to perform other functions on packages\n```\n\n`-Xswiftc`は分かったけど`-I/usr/local/include/mysql`が分からないんですけど！という人がいると困るので`swift --help | grep -e -I`します(全文は長い)。\n\n```swift\n$ swift --help | grep -e -I\n\n  -I <value>             Add directory to the import search path\n```\n\ngccでよく見かける愉快な仲間たちですね。Xcodeを使っていると普段全く意識しないと思いますが、-Iは「ヘッダーファイルをどこで探すか」を指定するオプションです。Xcodeのビルド設定にも`header search paths`とかいう項目がありますよね。アレですアレ。\n\nこれはつまり古代C言語の領域に突入しているわけです。`swift build`の挙動がよく分からないという人はC++あたりのコンパイラ・リンカの解説記事を読むといいかもしれないです。\n\n決してコンパイラーではありません、コンパイラです。","slug":"swift buildで渡すオプションをいちいち書きたくないならcmakeを使おう","published":1,"updated":"2016-12-02T14:38:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7yatlo00015qc1dtbtazpq","content":"<p>いまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。</p>\n<p>そういう次第でswiftの話です。毎度毎度 <code>swift build -Xswiftc -I/usr/local/include/mysql -Xlinker -L/usr/local/lib</code> とか書きたくない人は幸せになれるかもしれないです。</p>\n<h2 id=\"CMakeFiles-txtを書くべし\"><a href=\"#CMakeFiles-txtを書くべし\" class=\"headerlink\" title=\"CMakeFiles.txtを書くべし\"></a>CMakeFiles.txtを書くべし</h2><p>まずこういうやつ書いてください。ビルドコマンドのオプションを適宜いい感じにしましょう。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.6</span>)</div><div class=\"line\"><span class=\"keyword\">project</span>(MariaDbTaler)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span>(SOURCE_FILES</div><div class=\"line\">        Sources/MariaDbDriver.swift</div><div class=\"line\">        Package.swift)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span>(SWIFT_COMMAND</div><div class=\"line\">        swift build</div><div class=\"line\">        -Xlinker -L/usr/local/lib</div><div class=\"line\">        -Xcc -I/usr/local/<span class=\"keyword\">include</span></div><div class=\"line\">        -Xswiftc -lmysqlclient)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">add_custom_target</span>(MariaDbTaler</div><div class=\"line\">        COMMAND <span class=\"variable\">$&#123;SWIFT_COMMAND&#125;</span></div><div class=\"line\">        WORKING_DIRECTORY <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span></div><div class=\"line\">        SOURCES <span class=\"variable\">$&#123;SOURCE_FILES&#125;</span>)</div></pre></td></tr></table></figure>\n<p>なお試してませんが明らかに<code>SOURCE_FILES</code>は書かなくてよい気がいたします。</p>\n<h2 id=\"cmake-すべし\"><a href=\"#cmake-すべし\" class=\"headerlink\" title=\"cmake .すべし\"></a><code>cmake .</code>すべし</h2><p><a href=\"http://qiita.com/osamu0329/items/7de2b190df3cfb4ad0ca\" target=\"_blank\" rel=\"external\">人類なら<code>out-of-source</code>ビルドしなさい</a>という話もありますが、最初はまあいいです。1回実行してゴミファイルが大量に出来てから後悔しても遅くないです。</p>\n<h2 id=\"make-XXXXXX-すべし\"><a href=\"#make-XXXXXX-すべし\" class=\"headerlink\" title=\"make XXXXXX すべし\"></a><code>make XXXXXX</code> すべし</h2><p>上の例だと<code>make MariaDbTaler</code>ですね。プロジェクト名を渡してやります。そうするとあらかじめ設定してあるコマンドが走るのです。</p>\n<h2 id=\"別にCMakeいらなくね？\"><a href=\"#別にCMakeいらなくね？\" class=\"headerlink\" title=\"別にCMakeいらなくね？\"></a>別にCMakeいらなくね？</h2><p>いらないです。CMake経由しても特にいいことないしシェルスクリプト書けばいいじゃん。なんだよこれ！</p>\n<p>ところが、みんな大好きJetBrains謹製IDEであるCLionくんが “<a href=\"https://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/\" target=\"_blank\" rel=\"external\">CLion relies on CMake project model, so you need to start a CMake project for Swift</a>“ と宣うているのです。正直まだまだCLionのSwiftプラグインはショボくて辛い感じなのですが、CLionを使うならCMakeFiles.txtは嫌でも書かなきゃいけません。そこで一括して書けると考えれば、まあちょっとだけ便利です。</p>\n<h2 id=\"余談-Xswiftc-is-何\"><a href=\"#余談-Xswiftc-is-何\" class=\"headerlink\" title=\"余談: -Xswiftc is 何\"></a>余談: -Xswiftc is 何</h2><p><code>swift --help</code>ってなんか使いにくい気がしてならないんですよね。ヘルプ叩いたらサブコマンドの一覧も出してほしいし… <code>swift package update</code>の存在とか分かりにくすぎるし… しかしまあそれはいいです。</p>\n<p><code>-Xswiftc</code>のことは<code>swift build --help</code>すれば分かります。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ swift build --help</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">OVERVIEW</span>: <span class=\"type\">Build</span> sources into binary products</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">USAGE</span>: swift build [mode] [options]</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">MODES</span>:</div><div class=\"line\">  -<span class=\"built_in\">c</span>, --configuration &lt;value&gt;   <span class=\"type\">Build</span> with configuration (debug|release) [<span class=\"keyword\">default</span>: debug]</div><div class=\"line\">  --clean [&lt;mode&gt;]              <span class=\"type\">Delete</span> artifacts (build|dist) [<span class=\"keyword\">default</span>: build]</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">OPTIONS</span>:</div><div class=\"line\">  -<span class=\"type\">C</span>, --chdir &lt;path&gt;       <span class=\"type\">Change</span> working directory before any other operation</div><div class=\"line\">  --build-path &lt;path&gt;      <span class=\"type\">Specify</span> build/cache directory [<span class=\"keyword\">default</span>: ./.build]</div><div class=\"line\">  --color &lt;mode&gt;           <span class=\"type\">Specify</span> color mode (auto|always|never) [<span class=\"keyword\">default</span>: auto]</div><div class=\"line\">  -v, --verbose            <span class=\"type\">Increase</span> verbosity of informational output</div><div class=\"line\">  -<span class=\"type\">Xcc</span> &lt;flag&gt;              <span class=\"type\">Pass</span> flag through to all <span class=\"type\">C</span> compiler invocations</div><div class=\"line\">  -<span class=\"type\">Xlinker</span> &lt;flag&gt;          <span class=\"type\">Pass</span> flag through to all linker invocations</div><div class=\"line\">  -<span class=\"type\">Xswiftc</span> &lt;flag&gt;          <span class=\"type\">Pass</span> flag through to all <span class=\"type\">Swift</span> compiler invocations</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">NOTE</span>: <span class=\"type\">Use</span> `swift package` to perform other functions on packages</div></pre></td></tr></table></figure>\n<p><code>-Xswiftc</code>は分かったけど<code>-I/usr/local/include/mysql</code>が分からないんですけど！という人がいると困るので<code>swift --help | grep -e -I</code>します(全文は長い)。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ swift --help | grep -e -<span class=\"type\">I</span></div><div class=\"line\"></div><div class=\"line\">  -<span class=\"type\">I</span> &lt;value&gt;             <span class=\"type\">Add</span> directory to the <span class=\"keyword\">import</span> search path</div></pre></td></tr></table></figure>\n<p>gccでよく見かける愉快な仲間たちですね。Xcodeを使っていると普段全く意識しないと思いますが、-Iは「ヘッダーファイルをどこで探すか」を指定するオプションです。Xcodeのビルド設定にも<code>header search paths</code>とかいう項目がありますよね。アレですアレ。</p>\n<p>これはつまり古代C言語の領域に突入しているわけです。<code>swift build</code>の挙動がよく分からないという人はC++あたりのコンパイラ・リンカの解説記事を読むといいかもしれないです。</p>\n<p>決してコンパイラーではありません、コンパイラです。</p>\n","excerpt":"","more":"<p>いまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。</p>\n<p>そういう次第でswiftの話です。毎度毎度 <code>swift build -Xswiftc -I/usr/local/include/mysql -Xlinker -L/usr/local/lib</code> とか書きたくない人は幸せになれるかもしれないです。</p>\n<h2 id=\"CMakeFiles-txtを書くべし\"><a href=\"#CMakeFiles-txtを書くべし\" class=\"headerlink\" title=\"CMakeFiles.txtを書くべし\"></a>CMakeFiles.txtを書くべし</h2><p>まずこういうやつ書いてください。ビルドコマンドのオプションを適宜いい感じにしましょう。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.6</span>)</div><div class=\"line\"><span class=\"keyword\">project</span>(MariaDbTaler)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span>(SOURCE_FILES</div><div class=\"line\">        Sources/MariaDbDriver.swift</div><div class=\"line\">        Package.swift)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span>(SWIFT_COMMAND</div><div class=\"line\">        swift build</div><div class=\"line\">        -Xlinker -L/usr/local/lib</div><div class=\"line\">        -Xcc -I/usr/local/<span class=\"keyword\">include</span></div><div class=\"line\">        -Xswiftc -lmysqlclient)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">add_custom_target</span>(MariaDbTaler</div><div class=\"line\">        COMMAND <span class=\"variable\">$&#123;SWIFT_COMMAND&#125;</span></div><div class=\"line\">        WORKING_DIRECTORY <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span></div><div class=\"line\">        SOURCES <span class=\"variable\">$&#123;SOURCE_FILES&#125;</span>)</div></pre></td></tr></table></figure>\n<p>なお試してませんが明らかに<code>SOURCE_FILES</code>は書かなくてよい気がいたします。</p>\n<h2 id=\"cmake-すべし\"><a href=\"#cmake-すべし\" class=\"headerlink\" title=\"cmake .すべし\"></a><code>cmake .</code>すべし</h2><p><a href=\"http://qiita.com/osamu0329/items/7de2b190df3cfb4ad0ca\">人類なら<code>out-of-source</code>ビルドしなさい</a>という話もありますが、最初はまあいいです。1回実行してゴミファイルが大量に出来てから後悔しても遅くないです。</p>\n<h2 id=\"make-XXXXXX-すべし\"><a href=\"#make-XXXXXX-すべし\" class=\"headerlink\" title=\"make XXXXXX すべし\"></a><code>make XXXXXX</code> すべし</h2><p>上の例だと<code>make MariaDbTaler</code>ですね。プロジェクト名を渡してやります。そうするとあらかじめ設定してあるコマンドが走るのです。</p>\n<h2 id=\"別にCMakeいらなくね？\"><a href=\"#別にCMakeいらなくね？\" class=\"headerlink\" title=\"別にCMakeいらなくね？\"></a>別にCMakeいらなくね？</h2><p>いらないです。CMake経由しても特にいいことないしシェルスクリプト書けばいいじゃん。なんだよこれ！</p>\n<p>ところが、みんな大好きJetBrains謹製IDEであるCLionくんが “<a href=\"https://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/\">CLion relies on CMake project model, so you need to start a CMake project for Swift</a>“ と宣うているのです。正直まだまだCLionのSwiftプラグインはショボくて辛い感じなのですが、CLionを使うならCMakeFiles.txtは嫌でも書かなきゃいけません。そこで一括して書けると考えれば、まあちょっとだけ便利です。</p>\n<h2 id=\"余談-Xswiftc-is-何\"><a href=\"#余談-Xswiftc-is-何\" class=\"headerlink\" title=\"余談: -Xswiftc is 何\"></a>余談: -Xswiftc is 何</h2><p><code>swift --help</code>ってなんか使いにくい気がしてならないんですよね。ヘルプ叩いたらサブコマンドの一覧も出してほしいし… <code>swift package update</code>の存在とか分かりにくすぎるし… しかしまあそれはいいです。</p>\n<p><code>-Xswiftc</code>のことは<code>swift build --help</code>すれば分かります。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ swift build --help</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">OVERVIEW</span>: <span class=\"type\">Build</span> sources into binary products</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">USAGE</span>: swift build [mode] [options]</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">MODES</span>:</div><div class=\"line\">  -<span class=\"built_in\">c</span>, --configuration &lt;value&gt;   <span class=\"type\">Build</span> with configuration (debug|release) [<span class=\"keyword\">default</span>: debug]</div><div class=\"line\">  --clean [&lt;mode&gt;]              <span class=\"type\">Delete</span> artifacts (build|dist) [<span class=\"keyword\">default</span>: build]</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">OPTIONS</span>:</div><div class=\"line\">  -<span class=\"type\">C</span>, --chdir &lt;path&gt;       <span class=\"type\">Change</span> working directory before any other operation</div><div class=\"line\">  --build-path &lt;path&gt;      <span class=\"type\">Specify</span> build/cache directory [<span class=\"keyword\">default</span>: ./.build]</div><div class=\"line\">  --color &lt;mode&gt;           <span class=\"type\">Specify</span> color mode (auto|always|never) [<span class=\"keyword\">default</span>: auto]</div><div class=\"line\">  -v, --verbose            <span class=\"type\">Increase</span> verbosity of informational output</div><div class=\"line\">  -<span class=\"type\">Xcc</span> &lt;flag&gt;              <span class=\"type\">Pass</span> flag through to all <span class=\"type\">C</span> compiler invocations</div><div class=\"line\">  -<span class=\"type\">Xlinker</span> &lt;flag&gt;          <span class=\"type\">Pass</span> flag through to all linker invocations</div><div class=\"line\">  -<span class=\"type\">Xswiftc</span> &lt;flag&gt;          <span class=\"type\">Pass</span> flag through to all <span class=\"type\">Swift</span> compiler invocations</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">NOTE</span>: <span class=\"type\">Use</span> `swift package` to perform other functions on packages</div></pre></td></tr></table></figure>\n<p><code>-Xswiftc</code>は分かったけど<code>-I/usr/local/include/mysql</code>が分からないんですけど！という人がいると困るので<code>swift --help | grep -e -I</code>します(全文は長い)。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ swift --help | grep -e -<span class=\"type\">I</span></div><div class=\"line\"></div><div class=\"line\">  -<span class=\"type\">I</span> &lt;value&gt;             <span class=\"type\">Add</span> directory to the <span class=\"keyword\">import</span> search path</div></pre></td></tr></table></figure>\n<p>gccでよく見かける愉快な仲間たちですね。Xcodeを使っていると普段全く意識しないと思いますが、-Iは「ヘッダーファイルをどこで探すか」を指定するオプションです。Xcodeのビルド設定にも<code>header search paths</code>とかいう項目がありますよね。アレですアレ。</p>\n<p>これはつまり古代C言語の領域に突入しているわけです。<code>swift build</code>の挙動がよく分からないという人はC++あたりのコンパイラ・リンカの解説記事を読むといいかもしれないです。</p>\n<p>決してコンパイラーではありません、コンパイラです。</p>\n"},{"layout":"swift","title":"Swift + Kitura + MySQLで頑張っている件","date":"2016-12-02T03:33:13.000Z","_content":"\nこのコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)\n\nまずパッケージね。試してないけどLinuxでも動く気がする。\n\n```Package.swift\nimport PackageDescription\n\nlet package = Package(\n    name: \"nwsns\",\n    dependencies: [\n        .Package(url: \"https://github.com/IBM-Swift/Kitura.git\", majorVersion: 1, minor: 2),\n        .Package(url: \"https://github.com/tottokotkd/MariaDbTaler.git\", majorVersion: 0, minor: 1)\n    ])\n```\n\nそしてサーバー立てる。コードは超簡単だから説明不要ですねえ。\n\n```main.swift\nimport Foundation\nimport Sterntaler\nimport MariaDbTaler\nimport Kitura\nimport SwiftyJSON\n\n// Create a new router\nlet router = Router()\nlet pool = MariaDB.get(host: \"127.0.0.1\", user: \"root\", password: \"pass\", database: \"fosdb\")\nlet columns = (Columns.int(\"id\"), Columns.string(\"name\"), NullableColumns.date(\"day\"))\n\n// Handle HTTP GET requests to /\nrouter.get(\"/\") { request, response, next in\n    let data = pool.execute(sql: \"SELECT id, name, day FROM test\")\n        .map{$0.read(tuple: columns)}\n        .map{[\"id\": $0.0, \"name\": $0.1, \"day\": $0.2?.description ?? \"null\"]}\n    try! response.status(.OK).send(json: JSON(data)).end()\n    next()\n}\n\n// Add an HTTP server and connect it to the router\nKitura.addHTTPServer(onPort: 8090, with: router)\n\n// Start the Kitura runloop (this call never returns)\nKitura.run()\n```\n\nSterntaler / MariaDbTalerとかいうモジュールがMySQL Connector/Cの自作ラッパーです。ホントは劣化Slickみたいなすごいやつ作りたかったけど当然無理なので妥協しました。SQLインジェクション対策すらない時点で100%ダメなのですけど、でもなんだか既存のコードもしっくり来なくて… \n\nちなみにプールとか言ってますが勿論ウソです。毎回つないでます。\n\n\nこれを動かす場合、`brew install mariadb`でMariaDBを入れて、それっぽいデータベースとテーブル作って、`swift build -Xlinker -L/usr/local/lib -Xcc -I/usr/local/include -Xswiftc -lmysqlclient`でビルドすれば動く気がします。もちろんKituraの依存ライブラリーも入れましょう。\n\nちなみに、いま世間にいくつかあるSwift系mysqlライブラリーにはOpenSSLが入っていないとビルドできないものがあるみたいです。ところがOpenSSLをbrewでインストールするとリンク段階で失敗することがあるので、その場合ビルドするときには`-Xcc -I/usr/local/opt/openssl/include -Xlinker -L/usr/local/opt/openssl/lib`とか指定するといいです。たぶん。\n\n（それらはGPLに静的リンクしているような気がするけど調べてません）\n\nこの方向で何かちょっと動くものを作れるか頑張ってます。しかし実際どうなるかはわかんない。","source":"_posts/Swift + Kitura + MySQL + CLion + CMakeで頑張った件.md","raw":"layout: swift\ntitle: Swift + Kitura + MySQLで頑張っている件\ndate: 2016-12-02 12:33:13\ntags:\n---\n\nこのコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)\n\nまずパッケージね。試してないけどLinuxでも動く気がする。\n\n```Package.swift\nimport PackageDescription\n\nlet package = Package(\n    name: \"nwsns\",\n    dependencies: [\n        .Package(url: \"https://github.com/IBM-Swift/Kitura.git\", majorVersion: 1, minor: 2),\n        .Package(url: \"https://github.com/tottokotkd/MariaDbTaler.git\", majorVersion: 0, minor: 1)\n    ])\n```\n\nそしてサーバー立てる。コードは超簡単だから説明不要ですねえ。\n\n```main.swift\nimport Foundation\nimport Sterntaler\nimport MariaDbTaler\nimport Kitura\nimport SwiftyJSON\n\n// Create a new router\nlet router = Router()\nlet pool = MariaDB.get(host: \"127.0.0.1\", user: \"root\", password: \"pass\", database: \"fosdb\")\nlet columns = (Columns.int(\"id\"), Columns.string(\"name\"), NullableColumns.date(\"day\"))\n\n// Handle HTTP GET requests to /\nrouter.get(\"/\") { request, response, next in\n    let data = pool.execute(sql: \"SELECT id, name, day FROM test\")\n        .map{$0.read(tuple: columns)}\n        .map{[\"id\": $0.0, \"name\": $0.1, \"day\": $0.2?.description ?? \"null\"]}\n    try! response.status(.OK).send(json: JSON(data)).end()\n    next()\n}\n\n// Add an HTTP server and connect it to the router\nKitura.addHTTPServer(onPort: 8090, with: router)\n\n// Start the Kitura runloop (this call never returns)\nKitura.run()\n```\n\nSterntaler / MariaDbTalerとかいうモジュールがMySQL Connector/Cの自作ラッパーです。ホントは劣化Slickみたいなすごいやつ作りたかったけど当然無理なので妥協しました。SQLインジェクション対策すらない時点で100%ダメなのですけど、でもなんだか既存のコードもしっくり来なくて… \n\nちなみにプールとか言ってますが勿論ウソです。毎回つないでます。\n\n\nこれを動かす場合、`brew install mariadb`でMariaDBを入れて、それっぽいデータベースとテーブル作って、`swift build -Xlinker -L/usr/local/lib -Xcc -I/usr/local/include -Xswiftc -lmysqlclient`でビルドすれば動く気がします。もちろんKituraの依存ライブラリーも入れましょう。\n\nちなみに、いま世間にいくつかあるSwift系mysqlライブラリーにはOpenSSLが入っていないとビルドできないものがあるみたいです。ところがOpenSSLをbrewでインストールするとリンク段階で失敗することがあるので、その場合ビルドするときには`-Xcc -I/usr/local/opt/openssl/include -Xlinker -L/usr/local/opt/openssl/lib`とか指定するといいです。たぶん。\n\n（それらはGPLに静的リンクしているような気がするけど調べてません）\n\nこの方向で何かちょっと動くものを作れるか頑張ってます。しかし実際どうなるかはわかんない。","slug":"Swift-Kitura-MySQL-CLion-CMakeで頑張った件","published":1,"updated":"2016-12-02T15:11:15.000Z","comments":1,"photos":[],"link":"","_id":"ciw7yatly00025qc1berk9mgl","content":"<p>このコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)</p>\n<p>まずパッケージね。試してないけどLinuxでも動く気がする。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">import PackageDescription</div><div class=\"line\"></div><div class=\"line\">let package = Package(</div><div class=\"line\">    name: &quot;nwsns&quot;,</div><div class=\"line\">    dependencies: [</div><div class=\"line\">        .Package(url: &quot;https://github.com/IBM-Swift/Kitura.git&quot;, majorVersion: 1, minor: 2),</div><div class=\"line\">        .Package(url: &quot;https://github.com/tottokotkd/MariaDbTaler.git&quot;, majorVersion: 0, minor: 1)</div><div class=\"line\">    ])</div></pre></td></tr></table></figure>\n<p>そしてサーバー立てる。コードは超簡単だから説明不要ですねえ。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Foundation</div><div class=\"line\">import Sterntaler</div><div class=\"line\">import MariaDbTaler</div><div class=\"line\">import Kitura</div><div class=\"line\">import SwiftyJSON</div><div class=\"line\"></div><div class=\"line\">// Create a new router</div><div class=\"line\">let router = Router()</div><div class=\"line\">let pool = MariaDB.get(host: &quot;127.0.0.1&quot;, user: &quot;root&quot;, password: &quot;pass&quot;, database: &quot;fosdb&quot;)</div><div class=\"line\">let columns = (Columns.int(&quot;id&quot;), Columns.string(&quot;name&quot;), NullableColumns.date(&quot;day&quot;))</div><div class=\"line\"></div><div class=\"line\">// Handle HTTP GET requests to /</div><div class=\"line\">router.get(&quot;/&quot;) &#123; request, response, next in</div><div class=\"line\">    let data = pool.execute(sql: &quot;SELECT id, name, day FROM test&quot;)</div><div class=\"line\">        .map&#123;$0.read(tuple: columns)&#125;</div><div class=\"line\">        .map&#123;[&quot;id&quot;: $0.0, &quot;name&quot;: $0.1, &quot;day&quot;: $0.2?.description ?? &quot;null&quot;]&#125;</div><div class=\"line\">    try! response.status(.OK).send(json: JSON(data)).end()</div><div class=\"line\">    next()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Add an HTTP server and connect it to the router</div><div class=\"line\">Kitura.addHTTPServer(onPort: 8090, with: router)</div><div class=\"line\"></div><div class=\"line\">// Start the Kitura runloop (this call never returns)</div><div class=\"line\">Kitura.run()</div></pre></td></tr></table></figure>\n<p>Sterntaler / MariaDbTalerとかいうモジュールがMySQL Connector/Cの自作ラッパーです。ホントは劣化Slickみたいなすごいやつ作りたかったけど当然無理なので妥協しました。SQLインジェクション対策すらない時点で100%ダメなのですけど、でもなんだか既存のコードもしっくり来なくて… </p>\n<p>ちなみにプールとか言ってますが勿論ウソです。毎回つないでます。</p>\n<p>これを動かす場合、<code>brew install mariadb</code>でMariaDBを入れて、それっぽいデータベースとテーブル作って、<code>swift build -Xlinker -L/usr/local/lib -Xcc -I/usr/local/include -Xswiftc -lmysqlclient</code>でビルドすれば動く気がします。もちろんKituraの依存ライブラリーも入れましょう。</p>\n<p>ちなみに、いま世間にいくつかあるSwift系mysqlライブラリーにはOpenSSLが入っていないとビルドできないものがあるみたいです。ところがOpenSSLをbrewでインストールするとリンク段階で失敗することがあるので、その場合ビルドするときには<code>-Xcc -I/usr/local/opt/openssl/include -Xlinker -L/usr/local/opt/openssl/lib</code>とか指定するといいです。たぶん。</p>\n<p>（それらはGPLに静的リンクしているような気がするけど調べてません）</p>\n<p>この方向で何かちょっと動くものを作れるか頑張ってます。しかし実際どうなるかはわかんない。</p>\n","excerpt":"","more":"<p>このコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)</p>\n<p>まずパッケージね。試してないけどLinuxでも動く気がする。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">import PackageDescription</div><div class=\"line\"></div><div class=\"line\">let package = Package(</div><div class=\"line\">    name: &quot;nwsns&quot;,</div><div class=\"line\">    dependencies: [</div><div class=\"line\">        .Package(url: &quot;https://github.com/IBM-Swift/Kitura.git&quot;, majorVersion: 1, minor: 2),</div><div class=\"line\">        .Package(url: &quot;https://github.com/tottokotkd/MariaDbTaler.git&quot;, majorVersion: 0, minor: 1)</div><div class=\"line\">    ])</div></pre></td></tr></table></figure>\n<p>そしてサーバー立てる。コードは超簡単だから説明不要ですねえ。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Foundation</div><div class=\"line\">import Sterntaler</div><div class=\"line\">import MariaDbTaler</div><div class=\"line\">import Kitura</div><div class=\"line\">import SwiftyJSON</div><div class=\"line\"></div><div class=\"line\">// Create a new router</div><div class=\"line\">let router = Router()</div><div class=\"line\">let pool = MariaDB.get(host: &quot;127.0.0.1&quot;, user: &quot;root&quot;, password: &quot;pass&quot;, database: &quot;fosdb&quot;)</div><div class=\"line\">let columns = (Columns.int(&quot;id&quot;), Columns.string(&quot;name&quot;), NullableColumns.date(&quot;day&quot;))</div><div class=\"line\"></div><div class=\"line\">// Handle HTTP GET requests to /</div><div class=\"line\">router.get(&quot;/&quot;) &#123; request, response, next in</div><div class=\"line\">    let data = pool.execute(sql: &quot;SELECT id, name, day FROM test&quot;)</div><div class=\"line\">        .map&#123;$0.read(tuple: columns)&#125;</div><div class=\"line\">        .map&#123;[&quot;id&quot;: $0.0, &quot;name&quot;: $0.1, &quot;day&quot;: $0.2?.description ?? &quot;null&quot;]&#125;</div><div class=\"line\">    try! response.status(.OK).send(json: JSON(data)).end()</div><div class=\"line\">    next()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Add an HTTP server and connect it to the router</div><div class=\"line\">Kitura.addHTTPServer(onPort: 8090, with: router)</div><div class=\"line\"></div><div class=\"line\">// Start the Kitura runloop (this call never returns)</div><div class=\"line\">Kitura.run()</div></pre></td></tr></table></figure>\n<p>Sterntaler / MariaDbTalerとかいうモジュールがMySQL Connector/Cの自作ラッパーです。ホントは劣化Slickみたいなすごいやつ作りたかったけど当然無理なので妥協しました。SQLインジェクション対策すらない時点で100%ダメなのですけど、でもなんだか既存のコードもしっくり来なくて… </p>\n<p>ちなみにプールとか言ってますが勿論ウソです。毎回つないでます。</p>\n<p>これを動かす場合、<code>brew install mariadb</code>でMariaDBを入れて、それっぽいデータベースとテーブル作って、<code>swift build -Xlinker -L/usr/local/lib -Xcc -I/usr/local/include -Xswiftc -lmysqlclient</code>でビルドすれば動く気がします。もちろんKituraの依存ライブラリーも入れましょう。</p>\n<p>ちなみに、いま世間にいくつかあるSwift系mysqlライブラリーにはOpenSSLが入っていないとビルドできないものがあるみたいです。ところがOpenSSLをbrewでインストールするとリンク段階で失敗することがあるので、その場合ビルドするときには<code>-Xcc -I/usr/local/opt/openssl/include -Xlinker -L/usr/local/opt/openssl/lib</code>とか指定するといいです。たぶん。</p>\n<p>（それらはGPLに静的リンクしているような気がするけど調べてません）</p>\n<p>この方向で何かちょっと動くものを作れるか頑張ってます。しかし実際どうなるかはわかんない。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}