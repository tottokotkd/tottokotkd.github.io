<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>電池冷蔵庫</title>
  <subtitle>スタッドレスタイヤのいらない地域に住みたい</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.tottokotkd.com/"/>
  <updated>2017-04-29T09:28:14.000Z</updated>
  <id>http://blog.tottokotkd.com/</id>
  
  <author>
    <name>tottokotkd</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「シンデレラガール総選挙とボイス総選挙を分けよう」と言われたら、こう答えろ</title>
    <link href="http://blog.tottokotkd.com/2017/04/29/1/"/>
    <id>http://blog.tottokotkd.com/2017/04/29/1/</id>
    <published>2017-04-29T01:36:22.000Z</published>
    <updated>2017-04-29T09:28:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>ここに書かれている内容はすべて読者の認識を歪める罠です。最後まで読むと思わず荒木比奈に1票を入れてしまいます。</p>
<p>要約すると、<strong>モバマスは、ナレーターとしてのプレイヤーが提示するナラティブを、公式ストーリーとリソースでフォローすることで、権力を支える歴史としてのナラティブに転換するコンテンツであって、総選挙はナラティブのオーソリティを支えるメディアなんだよ</strong>という話をします。カタカナ圧スゴイなオイ。</p>
<p>手垢まみれの議論のような気がするけど、少しずつ書いていく。ちなみに僕は朗読と羊皮紙写本の相互関係で卒論を書いたけど、歴史とか文学理論とかいうモノの専門家ではない。</p>
<h2 id="「ナレーターとしてのプレイヤーが提示するナラティブ」"><a href="#「ナレーターとしてのプレイヤーが提示するナラティブ」" class="headerlink" title="「ナレーターとしてのプレイヤーが提示するナラティブ」"></a>「ナレーターとしてのプレイヤーが提示するナラティブ」</h2><p>ナラティ「ヴ」のような気もするが、深く考えてはいけない。</p>
<p>いきなり本題に入ってもいいのだが、先ずはナラティブについて話す。ナラティブとは「ストーリーのようなもの」である。ゲームを論じる時に便利な単語として、一時期とても流行した。</p>
<p>日本語での議論を見ていると「ナラティブとはランダムイベント型RPGのこと」「ストーリーとの違いは一本道ではなく個性があるところ」としか読み取れない説明がよくある。実際に世界中においてそのような意味で使われているのかもしれないが、僕は<strong>この記事において「ナラティブ」をその意味で使うつもりはない</strong>。</p>
<p>つまり、この記事における「ストーリーとナラティブ」は普通でない定義かもしれない。その点をまず意識してもらいたい。</p>
<p>ナラティブという単語はとても取り扱いが難しいが、おそらくナレーター・ナレーションという単語に引き寄せることでいくらか分かりやすくなる。声に出して読み上げる人がナレーターであり、原稿を読み上げることがナレーションであり、<strong>原稿の内容がナラティブ</strong>であると、ここでは考えてよい。</p>
<p>今ここに一人のナレーターがおり、二種類のナレーションを行うところだとしよう。ナレーターの手元には2つの原稿がある。この2つをよく見比べてほしい。</p>
<p>A「<strong>彼はホノルル生まれのジャカルタ育ちで、コロンビア大学を卒業、弁護士となり、公職にも就いた。</strong>」</p>
<p>B「<strong>彼は弁護士、イリノイ州議員、連邦上院議員を経て、アフリカ系アメリカ人として初めて合衆国大統領となった。</strong>」</p>
<p>これらはいずれも、同じWikipedia記事に基づく「バラク・オバマ」の紹介である。</p>
<p>ナレーションの字面が異なることは言うまでもない。ここで注目したいのは、原稿の中身が全くの別物ということである。「語尾が違う」とか「言い回しが異なる」とかいう次元を超えて、この二つは全く別の内容を紡いでいる。「Wikipediaに書かれたバラク・オバマの人生」という<strong>1つしかないストーリーに対する2つのナラティブ</strong>が作り出されたのである。言うまでもないことだが、ナラティブはこれ以外にも無数に (おそらく無限に) 作り出すことができる。いずれも<strong>正しく、同じストーリーを扱う、しかし別物のナラティブ</strong>である。</p>
<p>1つのストーリーと無数のナラティブ。この二重底が重要である。</p>
<p>(この一文を「1つの物語と無数の物語」などと表現しては意味が分からなくなってしまう。そこで、仕方なくカタカナのまま使うのである。)</p>
<h3 id="モバマスのストーリー-設定-とナラティブ-担当"><a href="#モバマスのストーリー-設定-とナラティブ-担当" class="headerlink" title="モバマスのストーリー (設定) とナラティブ (担当)"></a>モバマスのストーリー (設定) とナラティブ (担当)</h3><p>ストーリーという単語を使うと、当然のこと「各イベントのメインストーリーがモバマスのストーリーではないか」「それら複数のストーリーを読む体験がナラティブではないか」と思えてくるだろう。しかしむしろ、<strong>モバマス全体にとって言葉で紡がれたストーリーは存在せず、膨大な設定の集合体こそ物語世界における事実でありストーリーである</strong>と理解する方が実情に合っている。コンテンツの全てをWikipedia記事のごとく書き連ねた文書があるならば、それがまさにストーリーなのだ。</p>
<p>イベントのストーリーはあくまでイベントのストーリーであって、コンテンツのストーリーではない。世界観全体にとっては「まあそういう設定もあったよね」という一要素に過ぎない。</p>
<p>このような設定の総体こそが唯一つ存在するストーリーだとすると、それに対するナラティブはどこにあるのか。それは、<strong>「この組み合わせは今後どうなるのだろう」「あのアイドルとの関係性はどうなったのだろう」「そこにはこういう何かがあるのではないか…」という想像の余地</strong>に存在する。「公式の設定からして、これはこういうキャラクターだと思う、このアイドルこそはシンデレラと言うべきである、<strong>だから自分はこのアイドルの担当Pだ」という反応はまさにナラティブ</strong>である。</p>
<p>どうかここで、よく思い出していただきたい。</p>
<p>公式は一度でも「<strong>プレイヤーは荒木比奈の担当であって、他の担当ではない</strong>」と設定したことがあっただろうか？ ヘルプのどこかに「<strong>ブルナポは特別なユニットである</strong>」と書いてあっただろうか？ <strong>そんな設定はどこにも無い</strong>のである。「担当P」という概念は、モバマスにおいてプレイヤーが紡ぐナラティブの核心である。</p>
<p><strong>公式コンテンツがストーリー、ごっこ遊びがナラティブ</strong>と考えるとよいかもしれない。オリジナル設定はストーリーの拡張といったところか。</p>
<h2 id="「公式ストーリーとリソースでフォローする」"><a href="#「公式ストーリーとリソースでフォローする」" class="headerlink" title="「公式ストーリーとリソースでフォローする」"></a>「公式ストーリーとリソースでフォローする」</h2><p>プレイヤーが紡いだ「こうだといいなあ」とか「そうなんだろうなあ」というナラティブを公式設定として取り込む。あるいは声優や楽曲を割り当ててナラティブの説得力を強化する。このような措置を経て、ナラティブとストーリーの結びつきは強固になり、新しいナラティブを生み出す余地が増えていく。</p>
<p>ただし、ナラティブそのものをイベントストーリーにするという意味ではない。あくまでフォローなので「それっぽい設定がちょっと増える」くらいで十分よい。後はおまけである。</p>
<h2 id="「権力を支える歴史としてのナラティブ」"><a href="#「権力を支える歴史としてのナラティブ」" class="headerlink" title="「権力を支える歴史としてのナラティブ」"></a>「権力を支える歴史としてのナラティブ」</h2><p>モバマスは商売である。金を稼がねばならない。</p>
<p>金を稼ぐ為には魅力的なコンテンツが必要である。イラストやCD、グッズも金になるだろう。だがそれらは、「担当P」というナラティブを受け入れるプレイヤーには売れるとしても、その他のプレイヤーが金を出すとは限らない。もっと広いプレイヤー層に受け入れられるナラティブが欲しいところだ。</p>
<p>そして、それこそ「<strong>シンデレラストーリー</strong>」である。<strong>シンデレラガール総選挙は、担当P以外のプレイヤーにも売れるシンデレラストーリーを見つけ出す</strong>ために存在するのだ。</p>
<p>担当Pの紡いだナラティブのうち、総選挙で支持されたものは「売れそうなコンテンツ」として受け入れられ、ストーリーが追加される。そうして魅力的なナラティブはモバマスを支える素材となり、プレイヤーと運営の双方を満足させるのだ。</p>
<p>それは例えば、こういうことなのである。</p>
<p>モバマスには荒木比奈というキャラクターがいる。ゲームの稼働当初から存在するのだが、ボイスなしという初期設定もあってか、特別どうという扱いもなく、「総選挙」とかいう部族最大の祭にも長らく御呼びでない状態で過ごしてきた。</p>
<p>所属ユニット「ブルーナポレオン」は1つの画面に表示されることすらなかった。</p>
<p>比奈Pが課金しようにも、そもそもガチャに登場しなかった。</p>
<p>総選挙は圏外どころか蚊帳の外であった。</p>
<p>アニメでは同僚の春菜・千枝にボイスがついた。荒木比奈は廊下を歩いた。</p>
<p>「比奈Pというナラティブは金にならない」と宣告されているも同然であった。</p>
<p>比奈Pは無力だった。</p>
<p>けれども、荒木比奈というアイドルは無力ではなかった。</p>
<p>声なし限定の選挙というチャンスを決して手放さなかった。「アニメに一瞬映る」「デレステで初期実装される」という恵まれた環境を少しも無駄にしなかった。立ち止まることはなかった。変わらない時はなかった。</p>
<p>それにつれて、時間をかけてゆっくりと、荒木比奈はヒロインたり得るキャラクターになっていった。</p>
<p>それは、比奈Pというナラティブが単独で成し遂げた変化ではなかった。様々なプレイヤーが荒木比奈に触れ、好きになったり嫌いになったり、絵を描いたり妄想したりセリフを真似したりする中で、絶え間なく変わってきたのだ。言ってみれば、荒木比奈は公式が育てたわけでもなく、比奈Pが作り上げたわけでもなく、ただ自然に成長していったのだった。</p>
<p>荒木比奈は、比奈Pという金にならない小さなナラティブの上に立ち、しっかりと根を張り、多くのものを巻き込んで十分に大きくなった。そして今や、シンデレラガールズという世界そのもので物語を紡ぐべき時がきたのだ。</p>
<p>よく知られているように「シンデレラ」は二面的で残酷な話だ。努力は報われず、魔法は偽りである。二つの要素が揃わなければ意味がないのだ。</p>
<p>舞踏会は毎週あるかもしれない。総選挙は毎年あるかもしれない。しかしシンデレラが行くべき舞踏会は唯一つであり、荒木比奈にとっても同じことである。比奈Pとして、<strong>荒木比奈のシンデレラストーリーは今もっとも魅力的であり、今日こそ総選挙で投票すべき日だ</strong>と断言したい。</p>
<p>荒木比奈がシンデレラガールになれば、多くのプレイヤーを満足させる、素晴らしいシンデレラストーリーが公式コンテンツに加わることだろう。そうしてシンデレラガールズの世界をさらに広く、より豊かにするに違いない。他のどのアイドルよりも、荒木比奈はその準備ができている。</p>
<p>僕はそれを読者諸氏に見届けてほしいのである。比奈Pだからとか、比奈に声をつけたくて応援しているとかいうわけではないのだ。</p>
<h2 id="「総選挙はナラティブのオーソリティを支える」"><a href="#「総選挙はナラティブのオーソリティを支える」" class="headerlink" title="「総選挙はナラティブのオーソリティを支える」"></a>「総選挙はナラティブのオーソリティを支える」</h2><p>比奈Pは荒木比奈先生が大好きである。彼奴等は際限なく荒木比奈のシンデレラストーリーを激賞し、莫大な額の課金を確約することだろう。しかしそれは金にならない連中の口約束に過ぎず、なんの意味もない。そもそも、比奈Pは放置しておいても荒木比奈に課金するのだから、相手にする必要がない。</p>
<p>荒木比奈のシンデレラストーリーには本当に魅力があるのか。多数のプレイヤーを魅了できるのか。<strong>問題は担当P以外の反応であり、総選挙はまさにそれを検める試練の場</strong>である。</p>
<p>要するに<strong>マーケティング</strong>である。</p>
<p>だが、単なるマーケティングではない。コミュニティ全体による承認という「<strong>ごっこ遊び</strong>」の一環でもある。選挙の過程はナラティブの一部であり、総選挙で1位という事実はストーリーの一部となる。</p>
<p>このように、<strong>総選挙には様々な側面があり、決してキャラクターの人気投票ではない</strong>。例えば、みんな大好き島村卯月といえども、総選挙に際して提示されるエピソードが「<strong>ドグラ・マグラ</strong>」とか「<strong>山月記</strong>」のような内容だったら、誰も投票しようとは思わない。初期から変わらずコンテンツを支えてきた卯月の紡ぐシンデレラストーリーが魅力的であればこそ票を入れるというものだ。</p>
<p>ボイスの有無も同様である。声なし担当Pは「総選挙に耐えうるシンデレラストーリー」を提示するモチベーションが強くあるとはいえ、実際にやることは他と同じである。「声をつけるためにシンデレラガールにする」などというバカバカしいことを考えているわけでもなければ、公然と唱えているわけでもない。その周囲にいる人間にしても「なんの魅力も感じないけど、でもボイスないから1票入れようかな」などと考えることはない。</p>
<h1 id="おわり"><a href="#おわり" class="headerlink" title="おわり"></a>おわり</h1><p>以上、<strong>モバマスは、ナレーターとしてのプレイヤーが提示するナラティブを、公式ストーリーとリソースでフォローすることで、権力を支える歴史としてのナラティブに転換するコンテンツであって、総選挙はナラティブのオーソリティを支えるメディアなんだよ</strong>という話をしました。伝わったかな？</p>
<p>ここまで延々と書いてきたわけですが、それでも尚どうしても「総選挙は人気投票であるべきだ」「ボイス争奪はノイズであり邪魔だ」という考える読者がいるかもしれない。</p>
<p>そういう人に向けて、限界まで平たく言うならば「<strong>総選挙はとにかくエモいエピソードを出したアイドルが勝つ</strong>」。今日のところはこの説明で勘弁してほしい。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ここに書かれている内容はすべて読者の認識を歪める罠です。最後まで読むと思わず荒木比奈に1票を入れてしまいます。&lt;/p&gt;
&lt;p&gt;要約すると、&lt;strong&gt;モバマスは、ナレーターとしてのプレイヤーが提示するナラティブを、公式ストーリーとリソースでフォローすることで、権力を支え
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ツイート集計するやつ公開に寄せて</title>
    <link href="http://blog.tottokotkd.com/2017/04/17/1/"/>
    <id>http://blog.tottokotkd.com/2017/04/17/1/</id>
    <published>2017-04-17T08:21:54.000Z</published>
    <updated>2017-04-29T00:59:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>「全自動でツイート集計したやつ - 自動更新はしないので何回もアクセスしないで (サーバーが死ぬ)」 …長ったらしいので以下略して「ツイ集計」には別の名前がある。それは開発コード <strong>hinaserver</strong> である。その旨はサイトで一番目立つ部分に明記されており、そこには「<strong>自由で公平でオープンなシンデレラガールズDB <a href="https://tottokotkd.gitlab.io/hinapedia/" target="_blank" rel="external">hinapedia</a> のサブプロジェクト <a href="https://gitlab.com/tottokotkd/hinaserver" target="_blank" rel="external">hinaserver</a> 成果物</strong>」とある。</p>
<p>率直に告白すると、私が hinaserver を書き始めた動機は3つある。</p>
<ol>
<li>動いたら面白そうである</li>
<li>未経験のフレームワークで素早く書き上げれば自らの能力の傍証にできる </li>
<li>当時出回っていたツイート集計、自称「出口調査」は (エンジニアとして、自由主義者として、そして何より比奈Pとして) 受け入れられない</li>
</ol>
<p>ツイ集計はこの3点、すなわち<strong>興味本位、宣伝目的、個人的執着</strong>という3つの危険なモチベーションによって製造が開始された。これらはいずれも、公平なシステム製造を期待し難い要素である。面白さを優先すれば正確性は蔑ろにされ、宣伝を重んじれば粗雑なタイムアタックとなり、比奈Pとして振る舞えば荒木比奈に有利な情報ばかりとなる。</p>
<p>しかし私は、シンデレラガールズというコンテンツ全体への愛着のため、また個人的な趣味のため、上記3つの危険を切り抜けて公平な成果物を提供する方法を模索した。具体的には以下の通りである。</p>
<ul>
<li><strong>開発時から全てのソースを公開する。</strong>hinaserver は Apaceh v2.0 により提供され、すべての人が自由を享受する。自由にプログラムを使い、自由に作者を監視し、自由に改善版を公開できる。詳しくはライセンスを参照されたい。</li>
<li><strong>出力サンプル製造を宣伝手段とし、その後の製造過程から分離する。</strong>１日でサンプル出力を実施して共有したところ、幸いにして求職ツイートに反響を得られるなど、所期の目的を達した。ただし現在もお仕事募集中であるのでよろしくお願いいたします。</li>
<li><strong>少なくとも一人以上の、比奈Pでない人物に監視監督を依頼する。</strong>幸運にも上条Pの協力を得られ、技術的な議論を経て機能を選定できた。アイドルごとのページや、トップページの細部など、少なくない主要部分がこの議論を通じて製造された。深く感謝する。</li>
<li><strong>「投票ツイートと投票は同じでない」「投票ツイート集計は結果発表と同じでない」という認識が広まり、投票ツイートの「祭」が落ち着くまで公開を待つ。</strong>現在では「出口調査」という不適切極まりない単語が排除され、多くの人がツイート集計データについて慎重な表現を採るようになるなど、環境は相応に改善されてきている。</li>
<li><strong>全ての人に開かれた発言の場を、データそのものより優先して表示する。</strong>ツイ集計の目立つ位置にあるツイート検索結果はこのために設置されている。あなたに意見があり、それを他の利用者へ伝えたいと思うならば、躊躇わずに #hinaserver_desc タグを付して発信してほしい。もちろんGitLabでのissueやMerge Requestにおける発言も歓迎である。</li>
</ul>
<p>ただし、ライセンスにも記載の通り、hinaserverはありのままで提供される。私はベストを尽くしたが、致命的なバグや設計ミスが存在している可能性はある。私はその法的責任を一切負わないことに注意されたい。</p>
<p>また私はサイトの運営においても、何月何日までサイトを利用可能な状態で維持するとか、データをどのように更新するか等の問題について、一切の保証を与えず、何らの義務も負わない。この点に懸念を覚える方は、自らhinaserverを利用するなどの自衛策を採ってほしい。</p>
<h2 id="全データの公開に関して"><a href="#全データの公開に関して" class="headerlink" title="全データの公開に関して"></a>全データの公開に関して</h2><p>このようなデータをそもそも公開すべきでない、公開するとしても全て公開すべきではない、などの見解もあり得ると思う。私からは以下の点を指摘し、理解を求めたい。</p>
<ul>
<li>私がやらなくとも誰かが公開するであろうし、それを阻止することは不可能である。そうであれば最大限のクオリティで早めにやるほうがよい。</li>
<li>情報の偏在はコミュニティを歪め、恣意的な誘導の危険を増大させ、疑心暗鬼を招き入れる。知りたいと望む者すべての要求に応えるべきである。</li>
<li>愛好するコンテンツが同じであるのに、情報へのアクセスをコミュニティの一部に許し、残余に許さない理由はない。</li>
<li>Twitter APIの仕様上、いまデータを収集しなければ永久に利用不能となり得る。</li>
<li>hinaserverの公開されたコードは、少なくとも非公開プログラムよりマシである。</li>
</ul>
<h2 id="ツイート集計の流れ"><a href="#ツイート集計の流れ" class="headerlink" title="ツイート集計の流れ"></a>ツイート集計の流れ</h2><p>正確な処理についてはコードを参照していただきたいが、参考となるよう基本設計を概説する。</p>
<ol>
<li>公式連携ツイートに含まれる特徴的な文字列で検索を実施し、全件取得する。</li>
<li>リツイートを除外する。</li>
<li>公式連携ツイートのみを集計対象とする。これはレギュレーションであり、不正対策ではない。</li>
<li>所定の位置にフルネームが記載されているか確かめ、対象アイドルを探す。見つかれば確定する。</li>
<li>フルネームが一致しない場合、苗字または名前を含むか調べる。森久保ォ、時子様などの改変に対応するためである。</li>
<li>以上の処理を経ても対象アイドルを確定できない場合、無効なデータとする。</li>
<li>1度記録されたデータは、以後更新しない。Twitter上で削除されてもデータは残り続ける。</li>
</ol>
<p>機械的なメッセージ検索に比べると、1と5と7はツイート集計数を増大させやすく、2と3はツイート集計数を減少させやすい。またTwitter APIの仕様上、ツイート削除やスパム対策などにより、検索のタイミングによって検索結果が減少することがある。このため、ツイ集計に表示されるデータと他の検索データは一致しないことがある。</p>
<h2 id="想定問答"><a href="#想定問答" class="headerlink" title="想定問答"></a>想定問答</h2><h3 id="トップページの表を並べ替えたい"><a href="#トップページの表を並べ替えたい" class="headerlink" title="トップページの表を並べ替えたい"></a>トップページの表を並べ替えたい</h3><p>表の最上段にある列名をクリックすることで、並べ替えることができる。並べ替えた状態のURLを保存しておけば、最初からそのページを表示することもできる。</p>
<h3 id="アイドルごとのグラフが比べにくい"><a href="#アイドルごとのグラフが比べにくい" class="headerlink" title="アイドルごとのグラフが比べにくい"></a>アイドルごとのグラフが比べにくい</h3><p>グラフの縦軸は自動的に算出されており、各アイドルのグラフを最も見やすく表示する。そのため、２つのグラフを比較しづらいことがある。</p>
<p>このような場合、URLパラメーターによりグラフの縦軸長を強制することができる。たとえば、 <code>idols/999?t_max=5000&amp;d_max=500</code> などと入力した場合、合計数の縦軸を最大5000、１日あたり数の縦軸を500に固定することができる。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「全自動でツイート集計したやつ - 自動更新はしないので何回もアクセスしないで (サーバーが死ぬ)」 …長ったらしいので以下略して「ツイ集計」には別の名前がある。それは開発コード &lt;strong&gt;hinaserver&lt;/strong&gt; である。その旨はサイトで一番目立つ部分
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>「(いわゆる)自主避難者」とは誰なのか</title>
    <link href="http://blog.tottokotkd.com/2017/04/08/1/"/>
    <id>http://blog.tottokotkd.com/2017/04/08/1/</id>
    <published>2017-04-08T00:27:35.000Z</published>
    <updated>2017-04-29T00:59:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>復興庁のサイトで見つかったものを並べてみる。他にもあるかもしれないが「自主避難」の検索結果が1000件超あるため、個人で全部チェックするのは難しい。</p>
<p>なお、下記資料は時系列に沿って並んでいるが、時の経過に従って意味が変遷したと解釈する意図はない。</p>
<h2 id="特定避難勧奨地点の外から避難した「いわゆる自主避難者」"><a href="#特定避難勧奨地点の外から避難した「いわゆる自主避難者」" class="headerlink" title="特定避難勧奨地点の外から避難した「いわゆる自主避難者」"></a>特定避難勧奨地点の外から避難した「いわゆる自主避難者」</h2><ul>
<li>「特定避難勧奨地点からの避難者や、いわゆる自主避難者についても……」(<a href="http://www.reconstruction.go.jp/topics/03_6kihon-houshin_d.pdf" target="_blank" rel="external">福島復興再生基本方針, 平成24年7月13日</a>)</li>
</ul>
<h2 id="避難指示区域の外から避難した「いわゆる自主避難者」"><a href="#避難指示区域の外から避難した「いわゆる自主避難者」" class="headerlink" title="避難指示区域の外から避難した「いわゆる自主避難者」"></a>避難指示区域の外から避難した「いわゆる自主避難者」</h2><ul>
<li>「平成24年9月末時点で、警戒区域及び避難指示区域からの避難者数は、約11万1千人、いわゆる自主避難者も含め福島県全体の避難者数は、約16万人に及んでいる」(<a href="https://www.reconstruction.go.jp/topics/20121122_kokkaihoukokuhontai.pdf" target="_blank" rel="external">東日本大震災からの復興の状況に関する報告, 平成24年11月</a>)</li>
</ul>
<h2 id="福島県から避難した「いわゆる自主避難者」"><a href="#福島県から避難した「いわゆる自主避難者」" class="headerlink" title="福島県から避難した「いわゆる自主避難者」"></a>福島県から避難した「いわゆる自主避難者」</h2><ul>
<li>「子育て支援担当大臣である私のもとに、福島県内から県外へ移り住んで暮らしている母子に対する支援を求める声が寄せられております。いわゆる自主避難者です」 (<a href="http://www.reconstruction.go.jp/topics/main-cat7/sub-cat7-1/20130702_sanko02.pdf" target="_blank" rel="external">復興推進会議 (第7回) 原子力災害対策本部 (第29回) 合同会合議事録, 平成25年3月7日</a>) </li>
</ul>
<h2 id="災害救助法が適用されたり、福島県他の自治体から支援を受ける「自主避難者」"><a href="#災害救助法が適用されたり、福島県他の自治体から支援を受ける「自主避難者」" class="headerlink" title="災害救助法が適用されたり、福島県他の自治体から支援を受ける「自主避難者」"></a>災害救助法が適用されたり、福島県他の自治体から支援を受ける「自主避難者」</h2><ul>
<li>「そういう自主避難された方にも災害救助法等を適用し……」「被災者を、自主避難者の方を結ぶ窓口や帰還の窓口は福島県」(<a href="http://www.reconstruction.go.jp/topics/17/03/20170315125743.html" target="_blank" rel="external">今村復興大臣記者会見録, 平成29年3月14日</a>)</li>
</ul>
<h2 id="おまけ-避難している人はすべて「自主避難の人」"><a href="#おまけ-避難している人はすべて「自主避難の人」" class="headerlink" title="おまけ: 避難している人はすべて「自主避難の人」"></a>おまけ: 避難している人はすべて「自主避難の人」</h2><ul>
<li>「福島県外、関東各地からも避難している方もいらっしゃる」「自主避難の人にはお金は出ていません」(<a href="http://www.reconstruction.go.jp/topics/17/04/20170405115121.html" target="_blank" rel="external">今村復興大臣記者会見録, 平成29年4月4日</a>)</li>
</ul>
<h1 id="やわらかい感想"><a href="#やわらかい感想" class="headerlink" title="やわらかい感想"></a>やわらかい感想</h1><p>約1名不思議な方が紛れ込んでいますが、それ以外の政府関係者は「自主避難者」とは福島県の問題であるという認識で一致しているようです。そうすると、マスコミは役所の資料で記事を書きますから、大抵同じような意味で使っているんでしょう。もちろん違う場合があるかもしれませんが。</p>
<p>4月の会見について「報道が不正確じゃないか」という声はもうあっちこっちに出ているので、ここでは改めて書きません。ただ、何某記者のいう「自主避難」が役所のそれと乖離していて、両者の間で議論が成立するはずがないこと自体は上記の例から分かるかと思います。</p>
<p>つまり、こういう異質な例が1つあるからといって「自主避難者という言葉を使っている人間は全て無理筋の税金泥棒だ」などと即断すべきではないし、「自主避難者の立場を擁護する記事は全て関東から関西への避難を支援するよう求めている」と解釈するべきでもないわけです。</p>
<p>また書き手としては、その点の立場を明確にすべきです。例えば冒頭に「関東から関西への避難も支援すべきだ」とか、「そういう暴論は支持しない」とか、ちゃんと書いてください。大抵は後者だと思いますが、文脈を拾ってもなかなか見分けがつかないのです。</p>
<p>ちなみに、私個人はあまり大臣に素質ありと思っているわけでもありません。言わなくていいことを一番ダメな表現で言っちゃう人なのかなと… 例えば<a href="http://www.reconstruction.go.jp/topics/17/03/20170315125743.html" target="_blank" rel="external">3月の会見</a>における「<strong>そこで、皆さん判断をしてくださいと言っているわけですよ。</strong>」あたりは正にそれです。こういうのは国が自分で言っちゃダメなフレーズですよ、やっぱり。</p>
<p>何はともあれ復興庁の職員さん、ご苦労様です。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;復興庁のサイトで見つかったものを並べてみる。他にもあるかもしれないが「自主避難」の検索結果が1000件超あるため、個人で全部チェックするのは難しい。&lt;/p&gt;
&lt;p&gt;なお、下記資料は時系列に沿って並んでいるが、時の経過に従って意味が変遷したと解釈する意図はない。&lt;/p&gt;
&lt;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>求職のお知らせ (プログラミング)</title>
    <link href="http://blog.tottokotkd.com/2017/03/24/1/"/>
    <id>http://blog.tottokotkd.com/2017/03/24/1/</id>
    <published>2017-03-24T08:33:44.000Z</published>
    <updated>2017-03-24T13:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>時間給でのプログラミング業務を探しています。20代おじさん。</p>
<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul>
<li>労働時間: 月あたり120 ~ 200時間程度</li>
<li>賃金: おおよそ日給2万円以上</li>
<li>期間: 1ヶ月単位、継続可</li>
<li>勤務場所: 不問。ただし少なくとも日本国内であること (パスポートが期限切れのため)</li>
</ul>
<h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><ul>
<li>法的形式: アルバイト・正規雇用不問 (請負不可、派遣不可。準委任による業務委託も原則不可)</li>
<li>通勤・転居等: 限定なし。費用について別途相談</li>
</ul>
<h2 id="提供できる役務"><a href="#提供できる役務" class="headerlink" title="提供できる役務"></a>提供できる役務</h2><ul>
<li>Webアプリ、モバイルアプリ等の製造、サーバーサイド製造などプログラミング全般<ul>
<li>C, Cpp, ObjC, ObjCpp, Swift, Scala, Kotlin, VB6, JS, Rust、あるいはその他PowerScriptなど必要に応じて任意の言語とフレームワークによる</li>
<li>勤務開始前に学習期間を設けることも応相談</li>
</ul>
</li>
<li>マニュアル車の運転 </li>
<li>英独語の翻訳作業 (英語は100年前、ドイツ語は800年前まで対応可)</li>
</ul>
<h2 id="直近の経験"><a href="#直近の経験" class="headerlink" title="直近の経験"></a>直近の経験</h2><p>派遣1年、自営業半年、アルバイト3ヶ月、調査研究2ヶ月</p>
<ul>
<li>詳細設計書が存在しない業務用アプリの移植</li>
<li>Scala (Play) を使用したAPIサーバーの設計・製造</li>
<li>JS (React) による静的ホスティングサイトの設計・製造</li>
<li>AWSを活用したマイクロサービスの設計・製造</li>
<li>Cpp (TreeFrog) を用いたWebアプリ製造</li>
<li>PostgreSQL, MySQL, OracleほかRDBを用いる製造作業</li>
<li>Rustによる並列計算ツール製造 (現在)</li>
</ul>
<h3 id="参照可能な履歴"><a href="#参照可能な履歴" class="headerlink" title="参照可能な履歴"></a>参照可能な履歴</h3><ul>
<li><a href="http://tottokotkd.gitlab.io/hinapedia/" target="_blank" rel="external">hinapedia</a> 製造管理</li>
<li><a href="https://github.com/tdenc/NNC" target="_blank" rel="external">NNC</a> GUI製造</li>
<li>その他、<a href="https://github.com/tottokotkd" target="_blank" rel="external">GitHub</a>, <a href="https://gitlab.com/tottokotkd" target="_blank" rel="external">GitLab</a>, <a href="http://qiita.com/tottokotkd" target="_blank" rel="external">Qiita</a></li>
</ul>
<h3 id="資格・免許等"><a href="#資格・免許等" class="headerlink" title="資格・免許等"></a>資格・免許等</h3><ul>
<li>応用情報技術者</li>
<li>Oracle 12c Bronze</li>
<li>普通自動車運転免許</li>
<li>学士 (文学)</li>
<li>法務博士 (専門職)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;時間給でのプログラミング業務を探しています。20代おじさん。&lt;/p&gt;
&lt;h2 id=&quot;条件&quot;&gt;&lt;a href=&quot;#条件&quot; class=&quot;headerlink&quot; title=&quot;条件&quot;&gt;&lt;/a&gt;条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;労働時間: 月あたり120 ~ 200時間程度&lt;/l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最近やったことをメモしておく記事 (201703)</title>
    <link href="http://blog.tottokotkd.com/2017/03/09/1/"/>
    <id>http://blog.tottokotkd.com/2017/03/09/1/</id>
    <published>2017-03-09T12:24:52.000Z</published>
    <updated>2017-03-09T13:07:44.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>2016/11 ~ 2017/01: 労働</li>
<li>2017/01 ~ 2017/02: 研究・学習</li>
</ul>
<h2 id="労働"><a href="#労働" class="headerlink" title="労働"></a>労働</h2><ul>
<li>Webアプリ製造</li>
<li>C++, MySQL, ES6, React, Redux, あとなんか色々</li>
</ul>
<h2 id="研究・学習"><a href="#研究・学習" class="headerlink" title="研究・学習"></a>研究・学習</h2><h3 id="hinapedia"><a href="#hinapedia" class="headerlink" title="hinapedia"></a><a href="https://tottokotkd.gitlab.io/hinapedia/" target="_blank" rel="external">hinapedia</a></h3><ul>
<li>静的ファイルのみを用い、運営コストを最小化したWebアプリの追求</li>
<li>PostgresSQLによるCSV =&gt; JSONデータ変換と出力</li>
<li>「シンデレラガールズ」設定情報の収集・正規化</li>
<li>既存コミュニティに貢献し助力を得るアプローチの探索</li>
</ul>
<h3 id="基礎知識の習得-学習中"><a href="#基礎知識の習得-学習中" class="headerlink" title="基礎知識の習得 (学習中)"></a>基礎知識の習得 (学習中)</h3><ul>
<li>Rust, WebAssembly, WebGL, OpenGL</li>
<li>微分、積分、行列、統計学、機械学習</li>
</ul>
<p>以上</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;2016/11 ~ 2017/01: 労働&lt;/li&gt;
&lt;li&gt;2017/01 ~ 2017/02: 研究・学習&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;労働&quot;&gt;&lt;a href=&quot;#労働&quot; class=&quot;headerlink&quot; title=&quot;労働&quot;&gt;&lt;/a&gt;労働&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>アニメは総選挙の代わりにならない - 総選挙ボイス占い、あるいはシンデレラガールズをデータで分析したら愉しかった話</title>
    <link href="http://blog.tottokotkd.com/2017/02/23/1/"/>
    <id>http://blog.tottokotkd.com/2017/02/23/1/</id>
    <published>2017-02-23T09:36:00.000Z</published>
    <updated>2017-03-09T12:23:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>「<strong>声なしアイドル</strong>って…」</p>
<p>「<strong>ボイスの有無</strong>はもしかして…」</p>
<p>そんなモヤモヤに今日こそオサラバ！ モバPの疑問にデータで答えるぞ。あと総選挙の予想とかもやっちゃう。</p>
<p>この高度情報化社会では何をするにもデータが不可欠… Pなら担当の情報を知ってて当然だよね！</p>
<ul>
<li>基本的に愉しい記事です。そのはずです。</li>
</ul>
<hr>
<p>この投稿は、<strong>自由で公平でオープンソースで現在製造中、シンデレラガールズ総合データベース “<a href="https://tottokotkd.gitlab.io/hinapedia/" target="_blank" rel="external">hinapedia</a>“</strong> 最新入力データに基づいています。疑問・提案・修正は <a href="https://twitter.com/tottokotkd" target="_blank" rel="external">@tottokotkd</a> まで。</p>
<p>gitlabに詳しい方は直接issueを立てることもできます。詳しくは<a href="https://tottokotkd.gitlab.io/hinapedia/info/" target="_blank" rel="external">ここ</a>。</p>
<hr>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>絶対ここから読めよ☆</p>
<h3 id="収録データについて"><a href="#収録データについて" class="headerlink" title="収録データについて"></a>収録データについて</h3><p>“hinapedia” が収録する「ユニット」データとは、大雑把にまとめると以下2つの条件を満たすもの全てです。だいたい2017年1月あたりまで入っています。</p>
<ul>
<li>公式が名前をつけている</li>
<li>劇中劇 (モバマス公演) 由来ではない</li>
</ul>
<p>公演由来のデータが入っていないのは、端的に言えば「扱いが難しいから」です。以下のデータを見るときには「<strong>まあそうは言っても公演でめっちゃ共演してるしな…</strong>」とか「<strong>このデータはちょっと古いしな…</strong>」とか何とか、脳内でよしなに補正してください。</p>
<p>また現在の仕様上、例えば「ユニット16」と「Age16」は別々のユニットとして登録されています。つまり<strong>細かい値はあんまり精確じゃない</strong>ので重視せず、大雑把な全体的傾向を掴む方がいいです。「やったー誰それは1ポイント差で13位だー」とか言ってもあんまり意味ないかもしれません。何卒、何卒。</p>
<h3 id="信頼性の話-追記"><a href="#信頼性の話-追記" class="headerlink" title="信頼性の話 (追記)"></a>信頼性の話 (追記)</h3><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">共演グラフに実際に分断があるかどうかはノードが有限なんだからグラフ描けば分かるし基礎的な理論を援用しない理由がないので雑な議論をしないでほしいなというがおじさんの感想です</p>&mdash; メルビィ (@MagnesiumRibbon) <a href="https://twitter.com/MagnesiumRibbon/status/835165391882113024" target="_blank" rel="external">2017年2月24日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">統計的な技法を使わなかった理由は単純で、僕に十分な基礎知識が無いからです。なんか適当に使ったら4って出た！すごい！みたいなこと知った風に書く位なら書かない方がいいよね。問題あれば誰かやるはずだし（他力本願）</p>&mdash; 椎茸くんです (@tottokotkd) <a href="https://twitter.com/tottokotkd/status/835367992791715841" target="_blank" rel="external">2017年2月25日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">あとは単純に、あの記事ってもともとhinapediaがクエリーで表示できるデータを見るとこうだねっていうマニュアルが膨らんだものなので、hinapediaが表示できないデータはソースにならないってのもあります (SQLのやつだけ例外的に入れたけど)</p>&mdash; 椎茸くんです (@tottokotkd) <a href="https://twitter.com/tottokotkd/status/835363327425429504" target="_blank" rel="external">2017年2月25日</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>僕が統計学を修めて追記するか、他の誰かが追加検証するまでお待ちください。</p>
<h3 id="データの見方"><a href="#データの見方" class="headerlink" title="データの見方"></a>データの見方</h3><p>とりあえず最初にデータの読み方を確認しましょう。<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol" target="_blank" rel="external">リンクをクリックすると簡単に現物をチェックできる</a>ので確かめてみてね。</p>
<img src="/2017/02/23/1/0.png" alt="0.png" title="">
<p>表のデータは左から順番に「属性、名前、年齢、身長、所属ユニット数、同僚アイドル人数 (重複なし) 、ボイスあり同僚アイドル人数 (重複なし) 、ボイスあり同僚アイドルの割合、参考リンク」となっています。表の上にあるのはフィルター・ソートの入力欄です。</p>
<p>「重複なし」というのは、同じキャラを何回もカウントしないってことです。たとえば凛の同僚として卯月を5回10回と数えたりはしません。</p>
<p><strong>実はこの表がなかなかの力作</strong>で、クリックでソートできたりコピペできたりする凄いやつなんですけど… 関係ないですね、はい。</p>
<p>では早速データを眺めてモヤモヤを叩き潰していきましょう！ 以下全ての項目において、データのタイトルをクリックするとソースが出てきます。</p>
<p><strong>このリンク機能も技術的になかなか凄くて…</strong> あっ誰も興味ないですね、はい。</p>
<hr>
<h2 id="声あり・声なしをデータで観察してみよう！"><a href="#声あり・声なしをデータで観察してみよう！" class="headerlink" title="声あり・声なしをデータで観察してみよう！"></a>声あり・声なしをデータで観察してみよう！</h2><p>日頃なんとなく気になっていたことをデータで確かめてみるのだ。</p>
<h3 id="モヤモヤ1-声なしと声ありの絡みは少ない？"><a href="#モヤモヤ1-声なしと声ありの絡みは少ない？" class="headerlink" title="モヤモヤ1. 声なしと声ありの絡みは少ない？"></a>モヤモヤ1. 声なしと声ありの絡みは少ない？</h3><p><strong>その通り。声ありの同僚は声ありが多く、声なしの同僚は声なしが多い。</strong>人数も割合もそうである。</p>
<h4 id="全体の平均値"><a href="#全体の平均値" class="headerlink" title="全体の平均値"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol" target="_blank" rel="external">全体の平均値</a></h4><ul>
<li>同僚19.41人</li>
<li>そのうち声あり同僚8.51人 (39.77%)</li>
</ul>
<h4 id="声あり"><a href="#声あり" class="headerlink" title="声あり"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Atrue" target="_blank" rel="external">声あり</a></h4><ul>
<li>同僚23.95人</li>
<li>そのうち声あり同僚15.69人 <strong>(64.73%)</strong></li>
</ul>
<h4 id="声なし"><a href="#声なし" class="headerlink" title="声なし"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Afalse" target="_blank" rel="external">声なし</a></h4><ul>
<li>同僚16.91人</li>
<li>そのうち声あり同僚4.55人 <strong>(26.03%)</strong></li>
</ul>
<p>そもそも声なしは所属ユニット数が少ないので、同僚の合計人数が少ないのは仕方ない。でも割合まで低いのは注目すべきポイントですね。</p>
<h3 id="モヤモヤ2-担当の所属ユニット数が少ない-or-多い気がする"><a href="#モヤモヤ2-担当の所属ユニット数が少ない-or-多い気がする" class="headerlink" title="モヤモヤ2. 担当の所属ユニット数が少ない or 多い気がする"></a>モヤモヤ2. 担当の所属ユニット数が少ない or 多い気がする</h3><p><strong>事実かもしれない。ユニット所属数には大きな差がある。</strong></p>
<h4 id="ユニット所属数が少ないアイドル"><a href="#ユニット所属数が少ないアイドル" class="headerlink" title="ユニット所属数が少ないアイドル"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?sort=unitCount%2520asc" target="_blank" rel="external">ユニット所属数が少ないアイドル</a></h4><ul>
<li>4ユニット: 赤西瑛梨華、大石泉</li>
<li>5ユニット: 安斎都、井村雪菜、岸部彩華、工藤忍、西川保奈美</li>
<li>6ユニット: 伊集院惠、大西由里子、桐生つかさ、小松伊吹、土屋亜子、長富蓮実、松永涼、松原早耶</li>
<li>7ユニット: 大原みちる、村松さくら、柳清良、水木聖來、水野翠、脇山珠美、愛野渚、南条光</li>
<li>8ユニット: (多いため略。ソース参照)</li>
</ul>
<h4 id="ユニット所属数が多いアイドル"><a href="#ユニット所属数が多いアイドル" class="headerlink" title="ユニット所属数が多いアイドル"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?sort=unitCount%2520desc" target="_blank" rel="external">ユニット所属数が多いアイドル</a></h4><ul>
<li>20ユニット: 片桐早苗、白坂小梅</li>
<li>19ユニット: 高垣楓</li>
<li>18ユニット: 大槻唯、櫻井桃華</li>
<li>17ユニット: 市原仁奈、緒方智絵里、川島瑞樹、新田美波、姫川友紀、藤原肇、星輝子、堀裕子、龍崎薫</li>
<li>16ユニット: 安部菜々、高橋礼子、ナターリア、宮本フレデリカ、向井拓海</li>
</ul>
<p>何故こんなに差があるのかは正直謎です。ただニューウェーブに関しては「イベントにニューウェーブとして登場する機会が多いため、他のユニットが少ない」という背景があるみたいです。</p>
<p>藤原肇・高橋礼子・ナターリアのように「所属ユニットが多い声なし」もいますが、少数派ですね。この辺のさじ加減は運営のシナリオライターを尋問しないとよく分からないところ。</p>
<h3 id="モヤモヤ3-声あり勢と絡まないとボイスはつかない？"><a href="#モヤモヤ3-声あり勢と絡まないとボイスはつかない？" class="headerlink" title="モヤモヤ3. 声あり勢と絡まないとボイスはつかない？"></a>モヤモヤ3. 声あり勢と絡まないとボイスはつかない？</h3><p><strong>そんなことはない。</strong>当初そうかなと思いましたが考えを改めました。</p>
<h4 id="「声あり同僚」の割合が少ない、声ありアイドル"><a href="#「声あり同僚」の割合が少ない、声ありアイドル" class="headerlink" title="「声あり同僚」の割合が少ない、声ありアイドル"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Atrue&amp;sort=cvColleagueRate%2520asc" target="_blank" rel="external">「声あり同僚」の割合が少ない、声ありアイドル</a></h4><ul>
<li>20%以下: 脇山珠美</li>
<li>30%以下: 水本ゆかり、及川雫、龍崎薫</li>
<li>40%以下: 佐々木千枝、上条春菜、森久保乃々、難波笑美、上田鈴帆、木村夏樹</li>
</ul>
<h4 id="「声あり同僚」の人数が少ない、声ありアイドル"><a href="#「声あり同僚」の人数が少ない、声ありアイドル" class="headerlink" title="「声あり同僚」の人数が少ない、声ありアイドル"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Atrue&amp;sort=cvColleagueCount%2520asc" target="_blank" rel="external">「声あり同僚」の人数が少ない、声ありアイドル</a></h4><ul>
<li>2人: 脇山珠美</li>
<li>3人: 水本ゆかり</li>
<li>5人: 松永涼</li>
<li>6人: 及川雫、上条春菜、難波笑美、木村夏樹、浜口あやめ</li>
<li>7人: 森久保乃々、佐藤心</li>
</ul>
<p>アニメでボイスついたキャラが多いですね。見るからに。</p>
<p>ただし、このデータは注意点が多いです。まずデレステ公式が曲イベでユニット名をつけなかったため、珠美・ゆかり・雫の同僚数が少なめになっています。更にしゅがは・森久保の直近デレステ登場分が加算されていないので値にズレがあります。頑張って脳内で補正してください。</p>
<p>そういう前提のもとで本題に戻ると、珠美の声あり同僚としてカウントされているのは浜口あやめ・大槻唯です。これは「声ありと絡んだから声がついた」とは言えませんね。更に一人一人見て行くと「<strong>声あり同僚はほとんどアニメボイス勢で、デレステ曲で一気に4人増えた</strong>」みたいなパターンが多いです。</p>
<p>したがって、ボイス勢と絡みがなくてもアニメでボイスはつきます。しかもどうやら、関係性の強いキャラクターがグループ丸ごとごっそり実装されてます。あーよかった、よかった。</p>
<p>と思うじゃん。ところがだな…</p>
<h3 id="モヤモヤ4-総選挙でも運営采配でもボイスがつけば同じ？"><a href="#モヤモヤ4-総選挙でも運営采配でもボイスがつけば同じ？" class="headerlink" title="モヤモヤ4. 総選挙でも運営采配でもボイスがつけば同じ？"></a>モヤモヤ4. 総選挙でも運営采配でもボイスがつけば同じ？</h3><p><strong>「総選挙を経由しない場合、ボイスがついても人間関係は増えない」という可能性がある。</strong></p>
<p>この項目はちょっと複雑なので、説明を交えながらデータを眺めていきます。</p>
<p>まず最初に注目したのは「一部キャラクターはボイスあり勢との共演が極端に多い」という事実です。その一部キャラクターとは、以下の面々です。</p>
<h4 id="「声あり同僚」の割合が大きいアイドル"><a href="#「声あり同僚」の割合が大きいアイドル" class="headerlink" title="「声あり同僚」の割合が大きいアイドル"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Atrue&amp;sort=cvColleagueRate%2520desc" target="_blank" rel="external">「声あり同僚」の割合が大きいアイドル</a></h4><ul>
<li>100%: 小日向美穂、渋谷凛</li>
<li>90%以上: アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みく</li>
</ul>
<p>なんというかその… ぶっちゃけ分かりやすく表現すると<strong>人気キャラ</strong>ですよね。人気キャラのユニット同僚は声ありばかりです。何故なのか。</p>
<p>ここでまず「<strong>人気キャラは声あり勢とのイベントが多く、声なし勢と絡む運営上の余裕がない (声あり勢のコアとして活動している)</strong>」という仮説を立てます。</p>
<p>この7人について詳しく調べてみると、<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520OR%2520%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520OR%2520%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520OR%2520%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520OR%2520%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520OR%2520%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520OR%2520%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F" target="_blank" rel="external">その同僚数は平均23.57人</a>です。7倍すると165人 (うち声あり158、声なし7) です。これだけ同僚がいるわけですから、声あり65人 (正確には、この7人を除く58人) を全員カバーしていても不思議ではありません。<strong>むしろ合計165人もいて58人をカバーしていない方がおかしい</strong>。</p>
<p>ところが。</p>
<h4 id="小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みく、いずれかの同僚アイドル-47人"><a href="#小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みく、いずれかの同僚アイドル-47人" class="headerlink" title="小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みく、いずれかの同僚アイドル (47人)"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=-%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520-%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520-%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520-%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520-%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520-%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520-%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%2520%28colleague%253A%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520OR%2520colleague%253A%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520OR%2520colleague%253A%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520OR%2520colleague%253A%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520OR%2520colleague%253A%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520OR%2520colleague%253A%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520OR%2520colleague%253A%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%29&amp;sort=name" target="_blank" rel="external">小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みく、いずれかの同僚アイドル (47人)</a></h4><ul>
<li>相葉夕美、赤城みりあ、安部菜々、五十嵐響子、市原仁奈、大槻唯、緒方智絵里、神谷奈緒、川島瑞樹、神崎蘭子、小早川紗枝、<strong>西園寺琴歌</strong>、鷺沢文香、佐久間まゆ、櫻井桃華、佐藤心、塩見周子、島村卯月、白坂小梅、城ヶ崎美嘉、城ヶ崎莉嘉、高垣楓、<strong>鷹富士茄子</strong>、<strong>高峯のあ</strong>、高森藍子、多田李衣菜、橘ありす、十時愛梨、道明寺歌鈴、中野有香、新田美波、二宮飛鳥、速水奏、日野茜、姫川友紀、双葉杏、星輝子、堀裕子、本田未央、<strong>松本沙理奈</strong>、<strong>的場梨沙</strong>、三村かな子、宮本フレデリカ、向井拓海、<strong>八神マキノ</strong>、大和亜季、依田芳乃 (<strong>太字: 声なし</strong>)</li>
</ul>
<p>平均値が23.5人といっても、7 * 23.5人の同僚がいる訳ではないのです。実際に集めてみると47人しかいません。その内訳を数えてみると「声あり41人、声なし6人」となっています。</p>
<p>158人いるけど実際は41人… 声あり重複すごいネ。</p>
<p>58人中41人では到底網羅的とは言えないので、「声ありコア仮説」は捨てます。そこで次に「<strong>総選挙で上位に入ると運営上特別な配慮がなされ、この7人とのユニットを組まれやすい</strong>」という仮説を立てます。</p>
<p>「7人いずれかの同僚になっている声あり」と「誰とも同僚になっていない声あり」を並べて比較してみましょう。分かりやすいように、<strong>アニメでサプライズ実装されたキャラクター名は太字</strong>にします。総選挙の順位は… ここに書くとゴチャゴチャするので脳内で補完してください。</p>
<h4 id="声ありで、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みくのいずれかと同僚のアイドル-41人"><a href="#声ありで、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みくのいずれかと同僚のアイドル-41人" class="headerlink" title="声ありで、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みくのいずれかと同僚のアイドル (41人)"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Atrue%2520-%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520-%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520-%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520-%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520-%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520-%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520-%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%2520AND%2520%28colleague%253A%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520OR%2520colleague%253A%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520OR%2520colleague%253A%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520OR%2520colleague%253A%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520OR%2520colleague%253A%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520OR%2520colleague%253A%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520OR%2520colleague%253A%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%29&amp;sort=name" target="_blank" rel="external">声ありで、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みくのいずれかと同僚のアイドル (41人)</a></h4><ul>
<li>相葉夕美、赤城みりあ、安部菜々、五十嵐響子、市原仁奈、<strong>大槻唯</strong>、緒方智絵里、神谷奈緒、川島瑞樹、神崎蘭子、小早川紗枝、鷺沢文香、佐久間まゆ、<strong>櫻井桃華</strong>、佐藤心、塩見周子、島村卯月、白坂小梅、城ヶ崎美嘉、城ヶ崎莉嘉、高垣楓、高森藍子、多田李衣菜、橘ありす、十時愛梨、<strong>道明寺歌鈴</strong>、<strong>中野有香</strong>、新田美波、二宮飛鳥、速水奏、日野茜、姫川友紀、双葉杏、星輝子、堀裕子、本田未央、三村かな子、宮本フレデリカ、向井拓海、<strong>大和亜季</strong>、依田芳乃</li>
</ul>
<h4 id="声ありだが、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みくの誰とも同僚でないアイドル-17人"><a href="#声ありだが、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みくの誰とも同僚でないアイドル-17人" class="headerlink" title="声ありだが、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みくの誰とも同僚でないアイドル (17人)"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Atrue%2520-%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520-%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520-%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520-%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520-%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520-%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520-%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%2520NOT%2520%28colleague%253A%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520OR%2520colleague%253A%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520OR%2520colleague%253A%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520OR%2520colleague%253A%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520OR%2520colleague%253A%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520OR%2520colleague%253A%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520OR%2520colleague%253A%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%29&amp;sort=name" target="_blank" rel="external">声ありだが、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みくの誰とも同僚でないアイドル (17人)</a></h4><ul>
<li>一ノ瀬志希、<strong>上田鈴帆</strong>、<strong>及川雫</strong>、<strong>片桐早苗</strong>、<strong>上条春菜</strong>、<strong>木村夏樹</strong>、<strong>佐々木千枝</strong>、<strong>椎名法子</strong>、<strong>難波笑美</strong>、<strong>浜口あやめ</strong>、<strong>藤本里奈</strong>、<strong>松永涼</strong>、<strong>水本ゆかり</strong>、三船美優、森久保乃々、<strong>龍崎薫</strong>、<strong>脇山珠美</strong></li>
</ul>
<p>これは… 正直ここまでの偏りがあるとは思わなかったんですけど。</p>
<p>なんかこう、うまく表現できませんけど、(1) もともとボイスあり勢と (2) 総選挙ボイス勢と (3) アニメボイス勢の3種類があって、<strong>この7人と最後のグループの交流はほぼ無い</strong>という感じに見えますね。</p>
<p>とはいえ、このデータだけだと「7人は人数が少ない。偶然じゃないか？データが恣意的なんじゃないか？」と思いますよね。そこで調査対象を<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Atrue%2520cvColleagueRate%253A80..&amp;sort=cvColleagueRate%2520desc" target="_blank" rel="external">80%以上20人</a>に広げ、改めて調べてみましょう。</p>
<h4 id="声ありだが、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みく、速水奏、神谷奈緒、本田未央、一ノ瀬志希、島村卯月、塩見周子、多田李衣菜、十時愛梨、双葉杏、城ヶ崎美嘉、星輝子、三村かな子、城ヶ崎莉嘉の誰とも同僚でないアイドル-7人"><a href="#声ありだが、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みく、速水奏、神谷奈緒、本田未央、一ノ瀬志希、島村卯月、塩見周子、多田李衣菜、十時愛梨、双葉杏、城ヶ崎美嘉、星輝子、三村かな子、城ヶ崎莉嘉の誰とも同僚でないアイドル-7人" class="headerlink" title="声ありだが、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みく、速水奏、神谷奈緒、本田未央、一ノ瀬志希、島村卯月、塩見周子、多田李衣菜、十時愛梨、双葉杏、城ヶ崎美嘉、星輝子、三村かな子、城ヶ崎莉嘉の誰とも同僚でないアイドル (7人)"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Atrue%2520-%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520-%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520-%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520-%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520-%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520-%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520-%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%2520-%25E9%2580%259F%25E6%25B0%25B4%25E5%25A5%258F%2520-%25E7%25A5%259E%25E8%25B0%25B7%25E5%25A5%2588%25E7%25B7%2592%2520-%25E6%259C%25AC%25E7%2594%25B0%25E6%259C%25AA%25E5%25A4%25AE%2520-%25E4%25B8%2580%25E3%2583%258E%25E7%2580%25AC%25E5%25BF%2597%25E5%25B8%258C%2520-%25E5%25B3%25B6%25E6%259D%2591%25E5%258D%25AF%25E6%259C%2588%2520-%25E5%25A1%25A9%25E8%25A6%258B%25E5%2591%25A8%25E5%25AD%2590%2520-%25E5%25A4%259A%25E7%2594%25B0%25E6%259D%258E%25E8%25A1%25A3%25E8%258F%259C%2520-%25E5%258D%2581%25E6%2599%2582%25E6%2584%259B%25E6%25A2%25A8%2520-%25E5%259F%258E%25E3%2583%25B6%25E5%25B4%258E%25E7%25BE%258E%25E5%2598%2589%2520-%25E5%258F%258C%25E8%2591%2589%25E6%259D%258F%2520-%25E6%2598%259F%25E8%25BC%259D%25E5%25AD%2590%2520-%25E4%25B8%2589%25E6%259D%2591%25E3%2581%258B%25E3%2581%25AA%25E5%25AD%2590%2520-%25E5%259F%258E%25E3%2583%25B6%25E5%25B4%258E%25E8%258E%2589%25E5%2598%2589%2520NOT%2520%28colleague%253A%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520OR%2520colleague%253A%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520OR%2520colleague%253A%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520OR%2520colleague%253A%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520OR%2520colleague%253A%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520OR%2520colleague%253A%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520OR%2520colleague%253A%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%2520OR%2520colleague%253A%25E9%2580%259F%25E6%25B0%25B4%25E5%25A5%258F%2520OR%2520colleague%253A%25E7%25A5%259E%25E8%25B0%25B7%25E5%25A5%2588%25E7%25B7%2592%2520OR%2520colleague%253A%25E6%259C%25AC%25E7%2594%25B0%25E6%259C%25AA%25E5%25A4%25AE%2520OR%2520colleague%253A%25E4%25B8%2580%25E3%2583%258E%25E7%2580%25AC%25E5%25BF%2597%25E5%25B8%258C%2520OR%2520colleague%253A%25E5%25B3%25B6%25E6%259D%2591%25E5%258D%25AF%25E6%259C%2588%2520OR%2520colleague%253A%25E5%25A1%25A9%25E8%25A6%258B%25E5%2591%25A8%25E5%25AD%2590%2520OR%2520colleague%253A%25E5%25A4%259A%25E7%2594%25B0%25E6%259D%258E%25E8%25A1%25A3%25E8%258F%259C%2520OR%2520colleague%253A%25E5%258D%2581%25E6%2599%2582%25E6%2584%259B%25E6%25A2%25A8%2520OR%2520colleague%253A%25E5%259F%258E%25E3%2583%25B6%25E5%25B4%258E%25E7%25BE%258E%25E5%2598%2589%2520OR%2520colleague%253A%25E5%258F%258C%25E8%2591%2589%25E6%259D%258F%2520OR%2520colleague%253A%25E6%2598%259F%25E8%25BC%259D%25E5%25AD%2590%2520OR%2520colleague%253A%25E4%25B8%2589%25E6%259D%2591%25E3%2581%258B%25E3%2581%25AA%25E5%25AD%2590%2520OR%2520colleague%253A%25E5%259F%258E%25E3%2583%25B6%25E5%25B4%258E%25E8%258E%2589%25E5%2598%2589%29&amp;sort=name" target="_blank" rel="external">声ありだが、小日向美穂、渋谷凛、アナスタシア、輿水幸子、北条加蓮、諸星きらり、前川みく、速水奏、神谷奈緒、本田未央、一ノ瀬志希、島村卯月、塩見周子、多田李衣菜、十時愛梨、双葉杏、城ヶ崎美嘉、星輝子、三村かな子、城ヶ崎莉嘉の誰とも同僚でないアイドル (7人)</a></h4><ul>
<li><strong>上田鈴帆</strong></li>
<li><strong>上条春菜</strong></li>
<li><strong>佐々木千枝</strong></li>
<li><strong>難波笑美</strong></li>
<li><strong>水本ゆかり</strong></li>
<li><strong>龍崎薫</strong></li>
<li><strong>脇山珠美</strong></li>
</ul>
<p>もうこれは説明不要ですね。はい。</p>
<p>そもそも<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=-%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520-%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520-%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520-%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520-%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520-%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520-%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%2520-%25E9%2580%259F%25E6%25B0%25B4%25E5%25A5%258F%2520-%25E7%25A5%259E%25E8%25B0%25B7%25E5%25A5%2588%25E7%25B7%2592%2520-%25E6%259C%25AC%25E7%2594%25B0%25E6%259C%25AA%25E5%25A4%25AE%2520-%25E4%25B8%2580%25E3%2583%258E%25E7%2580%25AC%25E5%25BF%2597%25E5%25B8%258C%2520-%25E5%25B3%25B6%25E6%259D%2591%25E5%258D%25AF%25E6%259C%2588%2520-%25E5%25A1%25A9%25E8%25A6%258B%25E5%2591%25A8%25E5%25AD%2590%2520-%25E5%25A4%259A%25E7%2594%25B0%25E6%259D%258E%25E8%25A1%25A3%25E8%258F%259C%2520-%25E5%258D%2581%25E6%2599%2582%25E6%2584%259B%25E6%25A2%25A8%2520-%25E5%259F%258E%25E3%2583%25B6%25E5%25B4%258E%25E7%25BE%258E%25E5%2598%2589%2520-%25E5%258F%258C%25E8%2591%2589%25E6%259D%258F%2520-%25E6%2598%259F%25E8%25BC%259D%25E5%25AD%2590%2520-%25E4%25B8%2589%25E6%259D%2591%25E3%2581%258B%25E3%2581%25AA%25E5%25AD%2590%2520-%25E5%259F%258E%25E3%2583%25B6%25E5%25B4%258E%25E8%258E%2589%25E5%2598%2589%2520%28colleague%253A%25E5%25B0%258F%25E6%2597%25A5%25E5%2590%2591%25E7%25BE%258E%25E7%25A9%2582%2520OR%2520colleague%253A%25E6%25B8%258B%25E8%25B0%25B7%25E5%2587%259B%2520OR%2520colleague%253A%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520OR%2520colleague%253A%25E8%25BC%25BF%25E6%25B0%25B4%25E5%25B9%25B8%25E5%25AD%2590%2520OR%2520colleague%253A%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520OR%2520colleague%253A%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A%2520OR%2520colleague%253A%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%2520OR%2520colleague%253A%25E9%2580%259F%25E6%25B0%25B4%25E5%25A5%258F%2520OR%2520colleague%253A%25E7%25A5%259E%25E8%25B0%25B7%25E5%25A5%2588%25E7%25B7%2592%2520OR%2520colleague%253A%25E6%259C%25AC%25E7%2594%25B0%25E6%259C%25AA%25E5%25A4%25AE%2520OR%2520colleague%253A%25E4%25B8%2580%25E3%2583%258E%25E7%2580%25AC%25E5%25BF%2597%25E5%25B8%258C%2520OR%2520colleague%253A%25E5%25B3%25B6%25E6%259D%2591%25E5%258D%25AF%25E6%259C%2588%2520OR%2520colleague%253A%25E5%25A1%25A9%25E8%25A6%258B%25E5%2591%25A8%25E5%25AD%2590%2520OR%2520colleague%253A%25E5%25A4%259A%25E7%2594%25B0%25E6%259D%258E%25E8%25A1%25A3%25E8%258F%259C%2520OR%2520colleague%253A%25E5%258D%2581%25E6%2599%2582%25E6%2584%259B%25E6%25A2%25A8%2520OR%2520colleague%253A%25E5%259F%258E%25E3%2583%25B6%25E5%25B4%258E%25E7%25BE%258E%25E5%2598%2589%2520OR%2520colleague%253A%25E5%258F%258C%25E8%2591%2589%25E6%259D%258F%2520OR%2520colleague%253A%25E6%2598%259F%25E8%25BC%259D%25E5%25AD%2590%2520OR%2520colleague%253A%25E4%25B8%2589%25E6%259D%2591%25E3%2581%258B%25E3%2581%25AA%25E5%25AD%2590%2520OR%2520colleague%253A%25E5%259F%258E%25E3%2583%25B6%25E5%25B4%258E%25E8%258E%2589%25E5%2598%2589%29&amp;sort=name" target="_blank" rel="external">この20人の同僚が80人しかいない</a>という時点で色々と厳しいものがあるんですよ。アーニャの同僚が28人、アーニャ含む7人の同僚が47人、さらに増やして20人の同僚が80人… <a href="https://www.google.co.jp/search?q=%E9%99%90%E7%95%8C%E5%8A%B9%E7%94%A8%E9%80%93%E6%B8%9B&amp;tbm=isch" target="_blank" rel="external">限界効用逓減グラフ</a>かな？</p>
<h3 id="モヤモヤまとめ"><a href="#モヤモヤまとめ" class="headerlink" title="モヤモヤまとめ"></a>モヤモヤまとめ</h3><p>データの特徴をまとめると、こんな感じです。</p>
<ul>
<li>声あり・声なしの間には差がある。</li>
<li>声あり・声なし同士でも差がある。</li>
<li>アイドルの同僚は重複がある。お前の同僚はオレの同僚。</li>
<li>「声あり同僚」がいなくてもサプライズ追加はある。</li>
<li>一定のまとまりを丸ごとボイス実装するパターンが見られる。</li>
<li>声なしキャラは、一部の人気キャラとほぼ同僚になれない。</li>
<li>しかし声があっても共演できるとは限らない。</li>
<li>「総選挙系ボイス勢」と「グループ丸ごとサプライズ実装勢」は追加後の扱いに差があるかもしれない。</li>
</ul>
<p>こういうデータをどう解釈するかは人それぞれなんですけど、僕個人の解釈は以下のような具合です。<strong>割とポジティブ</strong>に解釈してます (想像と直感でカバーしている部分もあります)。</p>
<ul>
<li><strong>既にアイドルごとに人間関係が固まっている</strong>。クラスタごとに同僚が被っている。</li>
<li><strong>人間関係に基づく小規模グループに分断されている</strong>。一部のグループには声があり、その他にはない。</li>
<li>アニメ放送時のボイス実装は (1) 声ありグループに近いキャラに実装、 (2) 声なしグループを選定して丸ごとごっそり実装、という2パターンがある。<strong>ただしアニメでボイスがついても他グループとの絡みは増えない。</strong></li>
<li><strong>「総選挙上位になると絡める人気キャラ」という事実上の主役格がいる</strong>。しかしコンテンツの建前上「主役」としての役割を果たすことができない。</li>
<li><strong>総選挙上位勢は「主役」となり、既存の枠を超えることができる</strong>。そのキャラクターを中心として、新しい関係を構築できる。選挙結果を後ろ盾として、建前上許されない「主役」の役割を期間限定で担う。</li>
</ul>
<p>以下ちょっと細かい話。</p>
<p>まず何よりも、<strong>ぶっちゃけ公式コンテンツは組み合わせの幅が狭い</strong>と思うんです。全体で183人いるのに、20人の同僚が80人ですからね。残りの83人はどこに行ったんだと。</p>
<p>劇場とかもね、例えば比奈先生はだいたい奈緒と絡んでるしね… うん。</p>
<p>そこで試しに調べてみると「<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=colleague%253A-%25E8%25B5%25A4%25E5%259F%258E%25E3%2581%25BF%25E3%2582%258A%25E3%2581%2582%2520AND%2520colleague%253A-%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B7%25E3%2582%25A2%2520AND%2520colleague%253A-%25E5%25A4%25A7%25E6%25A7%25BB%25E5%2594%25AF%2520AND%2520colleague%253A-%25E7%25B7%2592%25E6%2596%25B9%25E6%2599%25BA%25E7%25B5%25B5%25E9%2587%258C%2520AND%2520colleague%253A-%25E7%25A5%259E%25E8%25B0%25B7%25E5%25A5%2588%25E7%25B7%2592%2520AND%2520colleague%253A-%25E7%25A5%259E%25E5%25B4%258E%25E8%2598%25AD%25E5%25AD%2590%2520AND%2520colleague%253A-%25E9%25B7%25BA%25E6%25B2%25A2%25E6%2596%2587%25E9%25A6%2599%2520AND%2520colleague%253A-%25E4%25BD%2590%25E4%25B9%2585%25E9%2596%2593%25E3%2581%25BE%25E3%2582%2586%2520AND%2520colleague%253A-%25E5%25A1%25A9%25E8%25A6%258B%25E5%2591%25A8%25E5%25AD%2590%2520AND%2520colleague%253A-%25E5%25B3%25B6%25E6%259D%2591%25E5%258D%25AF%25E6%259C%2588%2520AND%2520colleague%253A-%25E5%259F%258E%25E3%2583%25B6%25E5%25B4%258E%25E8%258E%2589%25E5%2598%2589%2520AND%2520colleague%253A-%25E9%25AB%2598%25E5%259E%25A3%25E6%25A5%2593%2520AND%2520colleague%253A-%25E5%25A4%259A%25E7%2594%25B0%25E6%259D%258E%25E8%25A1%25A3%25E8%258F%259C%2520AND%2520colleague%253A-%25E6%25A9%2598%25E3%2581%2582%25E3%2582%258A%25E3%2581%2599%2520AND%2520colleague%253A-%25E4%25B8%25AD%25E9%2587%258E%25E6%259C%2589%25E9%25A6%2599%2520AND%2520colleague%253A-%25E6%2596%25B0%25E7%2594%25B0%25E7%25BE%258E%25E6%25B3%25A2%2520AND%2520colleague%253A-%25E9%2580%259F%25E6%25B0%25B4%25E5%25A5%258F%2520AND%2520colleague%253A-%25E5%25A7%25AB%25E5%25B7%259D%25E5%258F%258B%25E7%25B4%2580%2520AND%2520colleague%253A-%25E5%258F%258C%25E8%2591%2589%25E6%259D%258F%2520AND%2520colleague%253A-%25E5%258C%2597%25E6%259D%25A1%25E5%258A%25A0%25E8%2593%25AE%2520AND%2520colleague%253A-%25E5%25A0%2580%25E8%25A3%2595%25E5%25AD%2590%2520AND%2520colleague%253A-%25E6%259C%25AC%25E7%2594%25B0%25E6%259C%25AA%25E5%25A4%25AE%2520AND%2520colleague%253A-%25E5%2589%258D%25E5%25B7%259D%25E3%2581%25BF%25E3%2581%258F%2520AND%2520colleague%253A-%25E4%25B8%2589%25E6%259D%2591%25E3%2581%258B%25E3%2581%25AA%25E5%25AD%2590%2520AND%2520colleague%253A-%25E5%25AE%25AE%25E6%259C%25AC%25E3%2583%2595%25E3%2583%25AC%25E3%2583%2587%25E3%2583%25AA%25E3%2582%25AB%2520AND%2520colleague%253A-%25E8%25AB%25B8%25E6%2598%259F%25E3%2581%258D%25E3%2582%2589%25E3%2582%258A&amp;sort=name" target="_blank" rel="external">渋谷凛の同僚の同僚でないアイドル</a>」が35人もいます。同僚の同僚 (知人の知人) ではないってことはつまり、この人たちは「<strong>渋谷凛の知人の知人の知人</strong>」ということになりかねない訳です。公演とか劇場とか数えていないので、必ずしもそうではないと思いますけど。</p>
<p>「知人の知人の知人」はどのくらいの距離かというと、<strong>僕とPerfume</strong>くらいです。あるいは<strong>僕と麻生太郎</strong>。要するにもう<strong>めっちゃ他人</strong>だよね。</p>
<p>そういう狭い人間関係が出来上がっているうえに、その枠が強固で壊れない (アニメでボイスついても超えられない) とすれば、例えば「<strong>公式におけるニュージェネの絡みが絶滅して、3人の参加する別ユニットだけが沢山出てくる</strong>」とか「<strong>今までの経歴がウソであるかのように、声なし勢と絡みまくる美穂</strong>」みたいなことは難しいわけです。誰かが「人気アイドル」として全イベント皆勤で参加するなら可能ですけど、それをやると「人気者が主人公、他はモブ」ということになってしまう。それは建前上できませんよね。</p>
<p>データを眺めてみると、そうした<strong>「主役」の役割は総選挙上位勢に委ねられている</strong>と思うんです。総選挙で上位になれば、誰とでもユニットを組んで曲を出せる。イベントへの登場回数やポジションでも特別扱いが許される。「このキャラとあのキャラをぶつけたら面白いんじゃないか？」「新しくここに関係性を作ったら色々広がるんじゃないか？」と思いつつも追加できなかったコンテンツを、<strong>総選挙上位という口実さえあれば何もかも全部やれる</strong>。</p>
<p>他のコンテンツなら「主役」がこなすべき役割を、主役なきシンデレラガールズの公式コンテンツでは総選挙上位勢が担い、<strong>「新顔の総選挙上位」という数人の「主役」が代わる代わる世界観をグルグルと攪拌することで全体の停滞を防いでいる</strong>のではないでしょうか。</p>
<p>以上要するに、総選挙は単なるボイス実装では代替できない役割を果たしており、総選挙上位勢になることは重要であり、総選挙はシンデレラガールズ全体にとって必要不可欠であり、<strong>世界観の新陳代謝</strong>みたいなものだと思えるのです。</p>
<p>(この理屈を反対から言えば、もし総選挙上位が固定化したり、総選挙が単なるボイス競争になったり、そもそも存在しなくなったりすると、キャラ同士の関係性が動かせなくなって公式コンテンツ全体が停滞するだろうなと思います。)</p>
<hr>
<h2 id="次の総選挙をデータで妄想！"><a href="#次の総選挙をデータで妄想！" class="headerlink" title="次の総選挙をデータで妄想！"></a>次の総選挙をデータで妄想！</h2><p><strong>そんな細かい理屈はいいからボイスつけろ！ ボイスよこせオラァ！</strong> という全国3800万の比奈Pの声にデータでお応えするコーナーです（ぱちぱち）</p>
<h3 id="前回総選挙からの想像"><a href="#前回総選挙からの想像" class="headerlink" title="前回総選挙からの想像"></a>前回総選挙からの想像</h3><p>「みんなの想像はこんな感じだろうな」という想像です。</p>
<ul>
<li>肇、柚、比奈、巴、雪美、裕美、茄子、ナターリア、美玲、マキノが上位に来そう</li>
<li>美優、森久保、芳乃、しゅがはへのボイス応援票が影響ありそう</li>
</ul>
<p>何故みんなこう想像するのか？根拠あるのか？という話ですが、結論から言うと案外あります。データは嘘つかない… 人間は嘘つきだけどな！</p>
<p>以下サクサクとご紹介 (もう疲れた)。</p>
<h3 id="a-他アイドルとの関係が強みの人たち"><a href="#a-他アイドルとの関係が強みの人たち" class="headerlink" title="a. 他アイドルとの関係が強みの人たち"></a>a. 他アイドルとの関係が強みの人たち</h3><p>戦いは数だよ兄貴！ 数が多けりゃ票もたくさん入るだろう的なアレ。</p>
<h4 id="「ユニット所属数が多い」声なしランキング"><a href="#「ユニット所属数が多い」声なしランキング" class="headerlink" title="「ユニット所属数が多い」声なしランキング"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Af&amp;sort=unitCount%2520desc" target="_blank" rel="external">「ユニット所属数が多い」声なしランキング</a></h4><ol>
<li><strong>藤原肇</strong> (17)</li>
<li>高橋礼子、<strong>ナターリア</strong> (16)</li>
<li>黒川千秋、東郷あい、<strong>村上巴</strong> (15)</li>
</ol>
<h4 id="「ユニット同僚数が多い」声なしランキング"><a href="#「ユニット同僚数が多い」声なしランキング" class="headerlink" title="「ユニット同僚数が多い」声なしランキング"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Af&amp;sort=colleagueCount%2520desc" target="_blank" rel="external">「ユニット同僚数が多い」声なしランキング</a></h4><ol>
<li>メアリー・コクラン (37)</li>
<li>柳瀬美由紀、成宮由愛 (33)</li>
<li>福山舞、<strong>佐城雪美</strong> (32)</li>
<li><strong>藤原肇</strong>、小関麗奈、大沼くるみ (28)</li>
<li><strong>村上巴</strong> (27)</li>
</ol>
<h3 id="b-声ありユニット同僚との関係が強みの人たち"><a href="#b-声ありユニット同僚との関係が強みの人たち" class="headerlink" title="b. 声ありユニット同僚との関係が強みの人たち"></a>b. 声ありユニット同僚との関係が強みの人たち</h3><p>欲しい… ユニット曲が欲しい！ みんなで推せばもう何も怖くない。</p>
<h4 id="「ボイスあり同僚の割合が大きい」声なしランキング"><a href="#「ボイスあり同僚の割合が大きい」声なしランキング" class="headerlink" title="「ボイスあり同僚の割合が大きい」声なしランキング"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Afalse&amp;sort=cvColleagueRate%2520desc" target="_blank" rel="external">「ボイスあり同僚の割合が大きい」声なしランキング</a></h4><ul>
<li>50%以上: <strong>喜多見柚</strong>、<strong>荒木比奈</strong>、大原みちる、丹羽仁美</li>
<li>45%以上: 財前時子、池袋晶葉、<strong>鷹富士茄子</strong>、並木芽衣子、桐生つかさ</li>
<li>40%以上: イヴ・サンタクロース、原田美世、<strong>早坂美玲</strong>、西園寺琴歌、赤西瑛梨華、浅利七海、棟方愛海</li>
<li>35%以上: 松本沙理奈、喜多日菜子、仙崎恵磨、服部瞳子、<strong>八神マキノ</strong>、冴島清美、<strong>佐城雪美</strong>、篠原礼、槙原志保、<strong>村上巴</strong>、持田亜里沙、横山千佳、水木聖來、柊志乃、ライラ</li>
</ul>
<h4 id="「ボイスあり同僚の人数が多い」声なしランキング"><a href="#「ボイスあり同僚の人数が多い」声なしランキング" class="headerlink" title="「ボイスあり同僚の人数が多い」声なしランキング"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Af&amp;sort=cvColleagueCount%2520desc" target="_blank" rel="external">「ボイスあり同僚の人数が多い」声なしランキング</a></h4><ol>
<li><strong>佐城雪美</strong> (12)</li>
<li><strong>村上巴</strong>、柳瀬美由紀、丹羽仁美、<strong>喜多見柚</strong> (10)</li>
<li>メアリー・コクラン、福山舞、松本沙理奈、的場梨沙、<strong>荒木比奈</strong>、横山千佳、大沼くるみ (9)</li>
</ol>
<h3 id="c-前回ボイス実装勢との関係が強みの人たち"><a href="#c-前回ボイス実装勢との関係が強みの人たち" class="headerlink" title="c. 前回ボイス実装勢との関係が強みの人たち"></a>c. 前回ボイス実装勢との関係が強みの人たち</h3><p>Aにボイスがついた！ 次はB！ 次はC！ その次は… 終わりなき欲望の連鎖。</p>
<h4 id="「美優、森久保、芳乃、しゅがは」のうち2人と同僚の声なし"><a href="#「美優、森久保、芳乃、しゅがは」のうち2人と同僚の声なし" class="headerlink" title="「美優、森久保、芳乃、しゅがは」のうち2人と同僚の声なし"></a><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=voice%253Af%2520AND%2520%28%28colleague%253A%25E4%25B8%2589%25E8%2588%25B9%25E7%25BE%258E%25E5%2584%25AA%2520AND%2520colleague%253A%25E6%25A3%25AE%25E4%25B9%2585%25E4%25BF%259D%25E4%25B9%2583%25E3%2580%2585%29%2520OR%2520%28colleague%253A%25E4%25B8%2589%25E8%2588%25B9%25E7%25BE%258E%25E5%2584%25AA%2520AND%2520colleague%253A%25E4%25BE%259D%25E7%2594%25B0%25E8%258A%25B3%25E4%25B9%2583%29%2520OR%2520%28colleague%253A%25E4%25B8%2589%25E8%2588%25B9%25E7%25BE%258E%25E5%2584%25AA%2520AND%2520colleague%253A%25E4%25BD%2590%25E8%2597%25A4%25E5%25BF%2583%29%2520OR%2520%28colleague%253A%25E6%25A3%25AE%25E4%25B9%2585%25E4%25BF%259D%25E4%25B9%2583%25E3%2580%2585%2520AND%2520colleague%253A%25E4%25BE%259D%25E7%2594%25B0%25E8%258A%25B3%25E4%25B9%2583%29%2520OR%2520%28colleague%253A%25E6%25A3%25AE%25E4%25B9%2585%25E4%25BF%259D%25E4%25B9%2583%25E3%2580%2585%2520AND%2520colleague%253A%25E4%25BD%2590%25E8%2597%25A4%25E5%25BF%2583%29%2520OR%2520%28colleague%253A%25E4%25BE%259D%25E7%2594%25B0%25E8%258A%25B3%25E4%25B9%2583%2520AND%2520colleague%253A%25E4%25BD%2590%25E8%2597%25A4%25E5%25BF%2583%29%29&amp;sort=name" target="_blank" rel="external">「美優、森久保、芳乃、しゅがは」のうち2人と同僚の声なし</a></h4><ul>
<li><strong>荒木比奈</strong> (美優、森久保)</li>
<li>白菊ほたる (森久保、しゅがは)</li>
<li>丹羽仁美 (森久保、芳乃)</li>
<li>柊志乃 (美優、芳乃)</li>
<li>棟方愛海 (森久保、芳乃)</li>
<li>和久井留美 (美優、しゅがは)</li>
</ul>
<h3 id="d-声あり担当Pに与える存在感が強みの人たち"><a href="#d-声あり担当Pに与える存在感が強みの人たち" class="headerlink" title="d. 声あり担当Pに与える存在感が強みの人たち"></a>d. 声あり担当Pに与える存在感が強みの人たち</h3><p>話は全て<a href="/2017/02/23/1/vote.sql" title="すごいSQL">すごいSQL</a>で分析させてもらった！ 声あり担当は<a href="/2017/02/23/1/vote" title="こう投票する">こう投票する</a>！</p>
<ul>
<li>存在感1.5以上: <strong>八神マキノ</strong>、高峯のあ、西園寺琴歌、<strong>荒木比奈</strong>、丹羽仁美</li>
<li>存在感1以上: <strong>佐城雪美</strong>、松本沙理奈、<strong>鷹富士茄子</strong>、<strong>喜多見柚</strong>、財前時子、原田美世、<strong>村上巴</strong>、イヴ・サンタクロース、冴島清美、横山千佳、持田亜里沙</li>
</ul>
<p>(註: 「声あり担当Pにとって、ボイス未実装の同僚がいたら気になるはずだ」「そのアイドルと複数ユニットで同僚なら更に存在感が大きいはずだ」「存在感が大きければ投票もするはずだ」という発想に基づく)</p>
<p>(声ありアイドルに各自1ポイントを持たせて算出する。例えば<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol/神谷奈緒" target="_blank" rel="external">奈緒</a>の場合、ボイス未完成ユニットは「ハプニングサンタ」と「真夏のサンタガールズ」なので0.5ずつ加える。前者の声なしは比奈だけなので0.5全て比奈に加算、後者の声なしはイヴ・雅なので0.25ずつ加算… という処理を全員でやる)</p>
<h3 id="個人的な総選挙予想"><a href="#個人的な総選挙予想" class="headerlink" title="個人的な総選挙予想"></a>個人的な総選挙予想</h3><p>まず間違いなく荒木比奈先生が1位でしょうね (終了)</p>
<h3 id="データからの総選挙予想"><a href="#データからの総選挙予想" class="headerlink" title="データからの総選挙予想"></a>データからの総選挙予想</h3><p>真面目にデータを見てみると、前回総選挙で上位にいた声なしアイドルはそれぞれ「支持基盤」があります。特色が分かれていて面白いですね。</p>
<p>ところで、最初に触れておくべき点がありまして、<strong>どうデータを並べても裕美ちゃんだけ上位にならない</strong>んですよ。ユニット・同僚の数は平均的だし、声ありとの絡みも特に多くない。<strong>でも強い。</strong>データで見るとよく分からないし、他のCuアイドルの方が圧倒的に強くても不思議じゃない。<strong>でも強い。</strong>目に見えない裕美ちゃん軍団が力強く支えているとしか思えません。</p>
<p>とにかく分からないものは仕方ないので、分かる部分だけ触れます。</p>
<h4 id="柚・肇・比奈"><a href="#柚・肇・比奈" class="headerlink" title="柚・肇・比奈"></a>柚・肇・比奈</h4><p>前回の順位からも想像できるところですが、やはり上位を争うのはこの3人でしょう。比奈Pとして希望的観測が入っているおそれは否定しませんけど。</p>
<p><a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=unit%253A-L.M.B.G%2520voice%253Afalse&amp;sort=colleagueCount%2520desc" target="_blank" rel="external">L.M.B.G所属メンバーを除くと同僚最多の肇</a>、<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=colleague%253A%25E5%2596%259C%25E5%25A4%259A%25E8%25A6%258B%25E6%259F%259A%2520voice%253Atrue&amp;sort=name" target="_blank" rel="external">人数面でも割合面でもボイス勢との関係が強い柚</a>、<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=colleague%253A%25E8%258D%2592%25E6%259C%25A8%25E6%25AF%2594%25E5%25A5%2588%2520voice%253Atrue&amp;sort=name" target="_blank" rel="external">柚に匹敵する交流の広さと同僚声あり担当Pへの大きな存在感を持つ比奈</a>。データを眺めると三者三様ですね。正直なところ同じくらい強そうです。</p>
<p>3人の強みを比べると「柚・比奈による声あり票田の取り合いが発生し、肇ちゃん有利なのでは」と思うところですが、<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=colleague%253A%25E8%258D%2592%25E6%259C%25A8%25E6%25AF%2594%25E5%25A5%2588%2520AND%2520colleague%253A%25E5%2596%259C%25E5%25A4%259A%25E8%25A6%258B%25E6%259F%259A&amp;sort=name" target="_blank" rel="external">比奈と柚は同僚がまったく重複していない</a>ため関係なさそうです。どちらかというと<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=colleague%253A%25E5%2596%259C%25E5%25A4%259A%25E8%25A6%258B%25E6%259F%259A%2520AND%2520colleague%253A%25E8%2597%25A4%25E5%258E%259F%25E8%2582%2587&amp;sort=name" target="_blank" rel="external">肇と柚に共通の同僚として裕美・巴がいる</a>という部分の方が気になりますね。どういう票の流れになるのか未知数です。もっとも「この二人の担当Pが前回こぞって肇・柚に投票した」とも考えにくいので、関係ないかもしれませんが…</p>
<p>なお、前回2位である楓との同僚重複は<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=colleague%253A%25E8%2597%25A4%25E5%258E%259F%25E8%2582%2587%2520AND%2520colleague%253A%25E9%25AB%2598%25E5%259E%25A3%25E6%25A5%2593&amp;sort=name" target="_blank" rel="external">肇4人</a>、<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=colleague%253A%25E5%2596%259C%25E5%25A4%259A%25E8%25A6%258B%25E6%259F%259A%2520AND%2520colleague%253A%25E9%25AB%2598%25E5%259E%25A3%25E6%25A5%2593&amp;sort=name" target="_blank" rel="external">柚4人</a>、<a href="https://tottokotkd.gitlab.io/hinapedia/#/idol?filter=colleague%253A%25E8%258D%2592%25E6%259C%25A8%25E6%25AF%2594%25E5%25A5%2588%2520AND%2520colleague%253A%25E9%25AB%2598%25E5%259E%25A3%25E6%25A5%2593&amp;sort=name" target="_blank" rel="external">比奈3人</a>と大差ありません。</p>
<p>こうしてみると、肇・柚・比奈の3人が票を食いあって順位を下げたり、圧倒的上位にスポイルされたりする可能性はなさそうだと判断できます。競争相手のことは関係なく、<strong>着実に地盤を固めた陣営が有利</strong>になるでしょう… なんか現実の選挙みたいな話になってきましたね。</p>
<h4 id="前回50位以内の人たち"><a href="#前回50位以内の人たち" class="headerlink" title="前回50位以内の人たち"></a>前回50位以内の人たち</h4><p>現時点のデータで調べても相変わらず強そうなんですけど、かと言って圧倒的なパラメータの差があるかというと、そういう訳でもないんですよね。雪美・巴の二人がちょっとだけリストの上位に来ているかな？という位で、これまた正直よく分からない。</p>
<p>ただし、<strong>「前回総選挙で入賞した」という事実そのものがメチャクチャ強い要素</strong>であると思われるので、一歩有利であることは間違いないだろうと思います。</p>
<p><strong>データで見るとそこまで高い壁じゃないかも</strong>とか<strong>総選挙で上位にならないと面白くならないかも</strong>とか、こんなところでどれだけ頑張ってデータ揃えて言ってみても、大多数に読まれなきゃ仕方ないしねえ。</p>
<h4 id="データが気になる人"><a href="#データが気になる人" class="headerlink" title="データが気になる人"></a>データが気になる人</h4><p>圧倒的に丹羽仁美です。どのデータもほぼ最上位で入ってます。総選挙で上位に来るか、アニメで「声ありに近いキャラ」としてボイス実装されるか… 少なくともどちらかあるんじゃないでしょうか。</p>
<hr>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ol>
<li>アニメは総選挙の代わりにならない</li>
<li>総選挙上位勢だけが「主役」になれる</li>
<li>選挙の順位は正直わからん</li>
</ol>
]]></content>
    
    <summary type="html">
    
      CG総合データベース構築プロジェクト &quot;hinapedia&quot; 成果物
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kotlin + AWS Lambda + API GatewayでServerlessできちゃうラッパー公開したのでDynamoDBとか使っちゃう</title>
    <link href="http://blog.tottokotkd.com/2016/12/11/1/"/>
    <id>http://blog.tottokotkd.com/2016/12/11/1/</id>
    <published>2016-12-11T03:36:08.000Z</published>
    <updated>2017-02-21T11:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>タイトルの通りです。<a href="https://github.com/tottokotkd/GatewayHandler" target="_blank" rel="external">githubに置いてある</a>し、<a href="https://bintray.com/bintray/jcenter?filterByPkgName=GatewayHandler" target="_blank" rel="external">Bintray経由でjcenterにもある</a>ので使えます。この公開ルートは今回初めてやってみましたが、なかなか便利ですね。</p>
<p>もちろん公開するだけならgithubページでもイケるんですけど、その作業が手間だったり、IntelliJくんがキャッシュ持つ段階でエラー吐いたり、面倒なのでBintrayです。今はあんまりそこを頑張りたくなかった、仕方なかった。</p>
<p>githubの方に書いてあるんですけど、コードでいうとこんな感じ。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.amazonaws.regions.Regions</div><div class="line"><span class="keyword">import</span> com.amazonaws.services.dynamodbv2.document.DynamoDB</div><div class="line"><span class="keyword">import</span> com.amazonaws.services.dynamodbv2.document.Item</div><div class="line"><span class="keyword">import</span> com.amazonaws.services.lambda.runtime.Context</div><div class="line"><span class="keyword">import</span> com.tottokotkd.aws.gateway.core.*</div><div class="line"><span class="keyword">import</span> java.time.ZonedDateTime</div><div class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter</div><div class="line"><span class="keyword">import</span> kotlin.properties.Delegates</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaveRequest</span> </span>&#123;</div><div class="line">    lateinit <span class="keyword">var</span> user: String</div><div class="line">    lateinit <span class="keyword">var</span> url: String</div><div class="line">    <span class="keyword">var</span> rate: <span class="built_in">Int</span> <span class="keyword">by</span> Delegates.notNull()</div><div class="line">    lateinit <span class="keyword">var</span> timestamp: String</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaveHandler</span>: <span class="type">DataHandler</span>&lt;<span class="type">SaveRequest, Any</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleRequest</span><span class="params">(input: <span class="type">SaveRequest</span>, context: <span class="type">Context</span>)</span></span>: ResponseData&lt;Any&gt; &#123;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> timestamp = <span class="keyword">try</span> &#123;</div><div class="line">            ZonedDateTime.parse(input.timestamp, DateTimeFormatter.ISO_DATE_TIME)</div><div class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</div><div class="line">            <span class="keyword">return</span> ResponseData(mapOf(<span class="string">"status"</span> to <span class="string">"error"</span>, <span class="string">"desc"</span> to <span class="string">"date time parsing failed."</span>), StatusCode.BadRequest)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> dynamoDB = DynamoDB(Regions.US_EAST_1)</div><div class="line">        <span class="keyword">val</span> t = dynamoDB.getTable(<span class="string">"pages"</span>)</div><div class="line">        <span class="keyword">val</span> item = Item.fromMap(mapOf(<span class="string">"user"</span> to input.user, <span class="string">"url"</span> to input.url, <span class="string">"rate"</span> to input.rate, <span class="string">"epoch"</span> to timestamp.toEpochSecond(), <span class="string">"timezone"</span> to timestamp.offset.totalSeconds))</div><div class="line">        <span class="keyword">val</span> result = t.putItem(item)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ResponseData(mapOf(<span class="string">"status"</span> to <span class="string">"success"</span>, <span class="string">"input"</span> to input))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>SaveHandler</code>がリクエストハンドラーで、<code>SaveRequest</code>がリクエストに期待される内容ですね。言うまでもないか。</p>
<p>API Gateway経由なのでJSONを渡されそうなものですが、実際はアマゾンがPOJOに突っ込んだうえで渡してくれます。Serverlessの設定として書くべきことも特になくて、本当にこのままLambdaにデプロイすれば面倒をみてくれます。DynamoDBもIAMさえ弄ればコードは1行で終わり。</p>
<p>たったこれだけで (金さえ払えば) 無敵のスケーラビリティが手に入っちゃう。スゴイ！</p>
<p>ただしアマゾン様といえどもdata classのコンストラクタを使うような器用な芸当は当然やれないので、<code>SaveRequest</code>はプロパティ全てvarのクラスになっています。もっともここは<code>val hoge: String by Delegates.notNull()</code> の方がいいような気もするし、Web APIなんだから<code>String?</code>の方がかえってロジカルに書きやすいような気もするし、その辺りは僕もまだ深く考えてません。</p>
<p>そこまでkotlinやAWSの挙動に詳しくないという事情もある。</p>
<p>それはともかく戻り値が<code>Any</code>になっていて許せん！という人もいると思いますが、これはmapOfで手軽に返したかったのです。データクラスとか指定すればちゃんと型安全で動きます (たぶん)。</p>
<p>まあこの辺りは趣味の問題でもあり、生産性を上げるために工夫のしどころでもあります。<code>ResponseData</code>を使わず自前で実装する方がいいかもですね、ステータスコードは引数じゃなくて型に結びつけるとか。あるいはハンドラーの方にヘルパーをバシバシ生やすとか… </p>
<p>その辺は今後ちょっと便利になったらいいかなあ。いいアイデアあったらPRください。</p>
<p>で、コードはもう特に書くことないので思い出をつらつらと。</p>
<h2 id="API-Gateway-gt-Lambda-gt-Error"><a href="#API-Gateway-gt-Lambda-gt-Error" class="headerlink" title="API Gateway -&gt; Lambda -&gt; Error!"></a>API Gateway -&gt; Lambda -&gt; Error!</h2><p><code>sls invoke -f hello</code> が動くぞ！やったー！などと隙を見せたエンジニアを強襲するAWS！</p>
<blockquote>
<p>Malformed Lambda proxy response</p>
</blockquote>
<p>lambdaとしては呼べるけどcurlすると落ちる。</p>
<p>Serverless使って一番つらかったのはコレ。Kotlin + Serverless + API Gatewayなんて実際に使っているケースがほぼ見つからない上に、数ヶ月前の記事で「動きました！簡単」とか書いてあるコードがもう動かない。嘘だゾ、全然簡単じゃないゾ。</p>
<p>ということで頑張って検索して探したのがコレ。<del>人柱サンキュー！</del></p>
<blockquote><p>Ok, I found some documentation which says it expects statusCode, body and headers in a dict.</p>
<footer><strong>kyl191</strong><cite><a href="https://forums.aws.amazon.com/thread.jspa?threadID=239688" target="_blank" rel="external">AWS Developer Forums: Lambda Proxy Expectations</a></cite></footer></blockquote>
<p>何でこんな状態なのか、ちょっと意味が分からないんですけど、API Gateway (Lambda Proxy) から呼ばれるLambdaは<strong>戻り値の型はどうでもいいしインターフェイスとかないけど、statusCode body headersという3つの値を持っていないと実行時エラーになる</strong>という凡そJavaとは思われない動的な仕組みになっているみたいです。</p>
<p>つまり、<code>sls invoke -f hello</code>の結果として</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"hage"</span>: [<span class="string">"ok"</span>, <span class="string">"cool"</span>, <span class="string">"amazing"</span>]&#125;</div></pre></td></tr></table></figure>
<p>みたいな結果が見えている場合はダメです。</p>
<p>Lambdaとしては動いているのですが、Gateway経由で呼びたいなら以下の内容でなければいけません。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"body"</span>: &#123;</div><div class="line">        <span class="attr">"hage"</span>: [<span class="string">"ok"</span>, <span class="string">"cool"</span>, <span class="string">"amazing"</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"headers"</span>: &#123;&#125;,</div><div class="line">    <span class="attr">"statusCode"</span>: <span class="number">400</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>このフォーマットを守らなければ、Lambda ProxyモードのAPI Gatewayは有効な結果として受け付けてくれないのです。理屈が分かってしまえば納得できますが、この落とし穴だけは本当にひどい罠だと思います。</p>
<p>一旦Lambda側からJSONを出力した上で、それを改めてGateway側がチェックするんでしょうか？ 色々と想像してますが謎です。</p>
<p>ちなみにデータのJSON化はあっちがJacksonでやってくれるので、上記のようなプロパティを持つPOJOを投げればいいみたいです。kotlinならdata classですね。あと試していませんがmapでも大丈夫かなと。</p>
<p>ただまあ、そこを自由にしても特に利点がなさそうなうえ、誰の目にも明らかにバグの温床でしかありません。今回のラッパーでは3つのプロパティを明示的に要求するインターフェイスを作っておきました。そもそも本来こういう仕様になってなきゃJavaコードとしておかしいと思うんですけど、それはそれで公式SDKとしては狭すぎる感じもありますからね… まあ気持ちはわかります。クソですけど。</p>
<p>Lambdaプロキシ自体が割と新しい機能であることも考えると仕方ない、AWSはこういうものなのだ… と割り切りましょう。</p>
<h2 id="2つの型パラメータを持つジェネリッククラスでないとエラーになる"><a href="#2つの型パラメータを持つジェネリッククラスでないとエラーになる" class="headerlink" title="2つの型パラメータを持つジェネリッククラスでないとエラーになる"></a>2つの型パラメータを持つジェネリッククラスでないとエラーになる</h2><p>もうエラーログが手元にないんですが、リクエストハンドラーとして型パラメータ1つのクラスを作ってみたら「型パラメータは2つないと困るんだよなァ！」みたいな激おこメッセージを飛ばしてきました。これまたちょっと意味が分からないんですけど、JSONをリクエストPOJOに変換するときに型パラメータを使おうとしているのかな？ とにかくダメなものはダメらしいです。</p>
<p>それにしたって型パラメータ2つじゃないとダメっておかしくねえか？設計どうなってんの？という気もしますが仕方ない、AWSはこういうものなのだ… と割り切りましょう。</p>
<h2 id="Internal-Server-Error"><a href="#Internal-Server-Error" class="headerlink" title="Internal Server Error"></a>Internal Server Error</h2><p>API Gatewayを通過して結果が戻ってくるまでの間にエラーが発生するとInternal Server Errorです。例えば「Lambda処理内でリクエストパラメータを参照したらnull例外で落ちた」とかいう場合、それはInternal Server Errorであり、Gatewayのデフォルト処理が走って超ダサいJSONを投げ返します。</p>
<p>サーバー内部でエラーが発生するなら、API Gatewayの視点からは全てInternal Server Errorなのです。まあそりゃ当然の挙動なんですけど、それはAPIを書く側からするとBadRequestだし、そもそも勝手にダサいJSONを流されるのも困ります。</p>
<p>ということでつまり、ハンドラ全体をtryで囲わないと不安だし、リクエスト内容の処理もちゃんと書かないといけません。当たり前の話とはいえ若干ちょっと面倒そう…</p>
<p>その辺りをうまく集約できるインターフェイスとか作らないと大変そうですね。まあもちろん「ステータスコードさえ取れるなら大丈夫、後はYAGNI」という考え方もあると思います。その辺りの線引きはちょっと難しそう。</p>
<h2 id="ということで"><a href="#ということで" class="headerlink" title="ということで"></a>ということで</h2><p>なんか動くものは作れそうだし頑張る。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;タイトルの通りです。&lt;a href=&quot;https://github.com/tottokotkd/GatewayHandler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;githubに置いてある&lt;/a&gt;し、&lt;a href=&quot;https://bintra
    
    </summary>
    
    
      <category term="Kotlin" scheme="http://blog.tottokotkd.com/tags/Kotlin/"/>
    
      <category term="AWS" scheme="http://blog.tottokotkd.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Swift + Kitura + MySQLで頑張っている件</title>
    <link href="http://blog.tottokotkd.com/2016/12/02/1/"/>
    <id>http://blog.tottokotkd.com/2016/12/02/1/</id>
    <published>2016-12-02T03:33:13.000Z</published>
    <updated>2017-02-21T11:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>このコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)</p>
<p>まずパッケージね。試してないけどLinuxでも動く気がする。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> PackageDescription</div><div class="line"></div><div class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</div><div class="line">    name: <span class="string">"nwsns"</span>,</div><div class="line">    dependencies: [</div><div class="line">        .<span class="type">Package</span>(url: <span class="string">"https://github.com/IBM-Swift/Kitura.git"</span>, majorVersion: <span class="number">1</span>, minor: <span class="number">2</span>),</div><div class="line">        .<span class="type">Package</span>(url: <span class="string">"https://github.com/tottokotkd/MariaDbTaler.git"</span>, majorVersion: <span class="number">0</span>, minor: <span class="number">1</span>)</div><div class="line">    ])</div></pre></td></tr></table></figure>
<p>そしてサーバー立てる。コードは超簡単だから説明不要ですねえ。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> Sterntaler</div><div class="line"><span class="keyword">import</span> MariaDbTaler</div><div class="line"><span class="keyword">import</span> Kitura</div><div class="line"><span class="keyword">import</span> SwiftyJSON</div><div class="line"></div><div class="line"><span class="comment">// Create a new router</span></div><div class="line"><span class="keyword">let</span> router = <span class="type">Router</span>()</div><div class="line"><span class="keyword">let</span> pool = <span class="type">MariaDB</span>.<span class="keyword">get</span>(host: <span class="string">"127.0.0.1"</span>, user: <span class="string">"root"</span>, password: <span class="string">"pass"</span>, database: <span class="string">"fosdb"</span>)</div><div class="line"><span class="keyword">let</span> columns = (<span class="type">Columns</span>.int(<span class="string">"id"</span>), <span class="type">Columns</span>.string(<span class="string">"name"</span>), <span class="type">NullableColumns</span>.date(<span class="string">"day"</span>))</div><div class="line"></div><div class="line"><span class="comment">// Handle HTTP GET requests to /</span></div><div class="line">router.<span class="keyword">get</span>(<span class="string">"/"</span>) &#123; request, response, next <span class="keyword">in</span></div><div class="line">    <span class="keyword">let</span> data = pool.execute(sql: <span class="string">"SELECT id, name, day FROM test"</span>)</div><div class="line">        .<span class="built_in">map</span>&#123;$<span class="number">0</span>.read(tuple: columns)&#125;</div><div class="line">        .<span class="built_in">map</span>&#123;[<span class="string">"id"</span>: $<span class="number">0.0</span>, <span class="string">"name"</span>: $<span class="number">0.1</span>, <span class="string">"day"</span>: $<span class="number">0.2</span>?.description ?? <span class="string">"null"</span>]&#125;</div><div class="line">    <span class="keyword">try</span>! response.status(.<span class="type">OK</span>).send(json: <span class="type">JSON</span>(data)).end()</div><div class="line">    next()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Add an HTTP server and connect it to the router</span></div><div class="line"><span class="type">Kitura</span>.addHTTPServer(onPort: <span class="number">8090</span>, with: router)</div><div class="line"></div><div class="line"><span class="comment">// Start the Kitura runloop (this call never returns)</span></div><div class="line"><span class="type">Kitura</span>.run()</div></pre></td></tr></table></figure>
<p>Sterntaler / MariaDbTalerとかいうモジュールがMySQL Connector/Cの自作ラッパーです。ホントは劣化Slickみたいなすごいやつ作りたかったけど当然無理なので妥協しました。SQLインジェクション対策すらない時点で100%ダメなのですけど、でもなんだか既存のコードもしっくり来なくて… </p>
<p>ちなみにプールとか言ってますが勿論ウソです。毎回つないでます。</p>
<p>これを動かす場合、<code>brew install mariadb</code>でMariaDBを入れて、それっぽいデータベースとテーブル作って、<code>swift build -Xlinker -L/usr/local/lib -Xcc -I/usr/local/include -Xswiftc -lmysqlclient</code>でビルドすれば動く気がします。もちろんKituraの依存ライブラリーも入れましょう。</p>
<p>ちなみに、いま世間にいくつかあるSwift系mysqlライブラリーにはOpenSSLが入っていないとビルドできないものがあるみたいです。ところがOpenSSLをbrewでインストールするとリンク段階で失敗することがあるので、その場合ビルドするときには<code>-Xcc -I/usr/local/opt/openssl/include -Xlinker -L/usr/local/opt/openssl/lib</code>とか指定するといいです。たぶん。</p>
<p>（それらはGPLに静的リンクしているような気がするけど調べてません）</p>
<p>この方向で何かちょっと動くものを作れるか頑張ってます。しかし実際どうなるかはわかんない。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;このコードをコピペすればswiftでmysqlサーバー叩いてJSON垂れ流せるぞ！ (実際に試したのはMariaDBだけど)&lt;/p&gt;
&lt;p&gt;まずパッケージね。試してないけどLinuxでも動く気がする。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://blog.tottokotkd.com/tags/Swift/"/>
    
      <category term="Kitura" scheme="http://blog.tottokotkd.com/tags/Kitura/"/>
    
      <category term="MariaDB" scheme="http://blog.tottokotkd.com/tags/MariaDB/"/>
    
      <category term="Sterntaler" scheme="http://blog.tottokotkd.com/tags/Sterntaler/"/>
    
  </entry>
  
  <entry>
    <title>swift buildで渡すオプションをいちいち書きたくないのでcmakeする</title>
    <link href="http://blog.tottokotkd.com/2016/11/22/1/"/>
    <id>http://blog.tottokotkd.com/2016/11/22/1/</id>
    <published>2016-11-22T13:33:03.000Z</published>
    <updated>2017-02-21T11:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>いまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。</p>
<p>そういう次第でswiftの話です。毎度毎度 <code>swift build -Xswiftc -I/usr/local/include/mysql -Xlinker -L/usr/local/lib</code> とか書きたくない人は幸せになれるかもしれないです。</p>
<h2 id="CMakeFiles-txtを書くべし"><a href="#CMakeFiles-txtを書くべし" class="headerlink" title="CMakeFiles.txtを書くべし"></a>CMakeFiles.txtを書くべし</h2><p>まずこういうやつ書いてください。ビルドコマンドのオプションを適宜いい感じにしましょう。</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.6</span>)</div><div class="line"><span class="keyword">project</span>(MariaDbTaler)</div><div class="line"></div><div class="line"><span class="keyword">set</span>(SOURCE_FILES</div><div class="line">        Sources/MariaDbDriver.swift</div><div class="line">        Package.swift)</div><div class="line"></div><div class="line"><span class="keyword">set</span>(SWIFT_COMMAND</div><div class="line">        swift build</div><div class="line">        -Xlinker -L/usr/local/lib</div><div class="line">        -Xcc -I/usr/local/<span class="keyword">include</span></div><div class="line">        -Xswiftc -lmysqlclient)</div><div class="line"></div><div class="line"><span class="keyword">add_custom_target</span>(MariaDbTaler</div><div class="line">        COMMAND <span class="variable">$&#123;SWIFT_COMMAND&#125;</span></div><div class="line">        WORKING_DIRECTORY <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span></div><div class="line">        SOURCES <span class="variable">$&#123;SOURCE_FILES&#125;</span>)</div></pre></td></tr></table></figure>
<p>なお試してませんが明らかに<code>SOURCE_FILES</code>は書かなくてよい気がいたします。</p>
<h2 id="cmake-すべし"><a href="#cmake-すべし" class="headerlink" title="cmake .すべし"></a><code>cmake .</code>すべし</h2><p><a href="http://qiita.com/osamu0329/items/7de2b190df3cfb4ad0ca" target="_blank" rel="external">人類なら<code>out-of-source</code>ビルドしなさい</a>という話もありますが、最初はまあいいです。1回実行してゴミファイルが大量に出来てから後悔しても遅くないです。</p>
<h2 id="make-XXXXXX-すべし"><a href="#make-XXXXXX-すべし" class="headerlink" title="make XXXXXX すべし"></a><code>make XXXXXX</code> すべし</h2><p>上の例だと<code>make MariaDbTaler</code>ですね。プロジェクト名を渡してやります。そうするとあらかじめ設定してあるコマンドが走るのです。</p>
<h2 id="別にCMakeいらなくね？"><a href="#別にCMakeいらなくね？" class="headerlink" title="別にCMakeいらなくね？"></a>別にCMakeいらなくね？</h2><p>いらないです。CMake経由しても特にいいことないしシェルスクリプト書けばいいじゃん。なんだよこれ！</p>
<p>ところが、みんな大好きJetBrains謹製IDEであるCLionくんが “<a href="https://blog.jetbrains.com/clion/2015/12/swift-plugin-for-clion/" target="_blank" rel="external">CLion relies on CMake project model, so you need to start a CMake project for Swift</a>“ と宣うているのです。正直まだまだCLionのSwiftプラグインはショボくて辛い感じなのですが、CLionを使うならCMakeFiles.txtは嫌でも書かなきゃいけません。そこで一括して書けると考えれば、まあちょっとだけ便利です。</p>
<h2 id="余談-Xswiftc-is-何"><a href="#余談-Xswiftc-is-何" class="headerlink" title="余談: -Xswiftc is 何"></a>余談: -Xswiftc is 何</h2><p><code>swift --help</code>ってなんか使いにくい気がしてならないんですよね。ヘルプ叩いたらサブコマンドの一覧も出してほしいし… <code>swift package update</code>の存在とか分かりにくすぎるし… しかしまあそれはいいです。</p>
<p><code>-Xswiftc</code>のことは<code>swift build --help</code>すれば分かります。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ swift build --help</div><div class="line"></div><div class="line"><span class="type">OVERVIEW</span>: <span class="type">Build</span> sources into binary products</div><div class="line"></div><div class="line"><span class="type">USAGE</span>: swift build [mode] [options]</div><div class="line"></div><div class="line"><span class="type">MODES</span>:</div><div class="line">  -<span class="built_in">c</span>, --configuration &lt;value&gt;   <span class="type">Build</span> with configuration (debug|release) [<span class="keyword">default</span>: debug]</div><div class="line">  --clean [&lt;mode&gt;]              <span class="type">Delete</span> artifacts (build|dist) [<span class="keyword">default</span>: build]</div><div class="line"></div><div class="line"><span class="type">OPTIONS</span>:</div><div class="line">  -<span class="type">C</span>, --chdir &lt;path&gt;       <span class="type">Change</span> working directory before any other operation</div><div class="line">  --build-path &lt;path&gt;      <span class="type">Specify</span> build/cache directory [<span class="keyword">default</span>: ./.build]</div><div class="line">  --color &lt;mode&gt;           <span class="type">Specify</span> color mode (auto|always|never) [<span class="keyword">default</span>: auto]</div><div class="line">  -v, --verbose            <span class="type">Increase</span> verbosity of informational output</div><div class="line">  -<span class="type">Xcc</span> &lt;flag&gt;              <span class="type">Pass</span> flag through to all <span class="type">C</span> compiler invocations</div><div class="line">  -<span class="type">Xlinker</span> &lt;flag&gt;          <span class="type">Pass</span> flag through to all linker invocations</div><div class="line">  -<span class="type">Xswiftc</span> &lt;flag&gt;          <span class="type">Pass</span> flag through to all <span class="type">Swift</span> compiler invocations</div><div class="line"></div><div class="line"><span class="type">NOTE</span>: <span class="type">Use</span> `swift package` to perform other functions on packages</div></pre></td></tr></table></figure>
<p><code>-Xswiftc</code>は分かったけど<code>-I/usr/local/include/mysql</code>が分からないんですけど！という人がいると困るので<code>swift --help | grep -e -I</code>します(全文は長い)。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ swift --help | grep -e -<span class="type">I</span></div><div class="line"></div><div class="line">  -<span class="type">I</span> &lt;value&gt;             <span class="type">Add</span> directory to the <span class="keyword">import</span> search path</div></pre></td></tr></table></figure>
<p>gccでよく見かける愉快な仲間たちですね。Xcodeを使っていると普段全く意識しないと思いますが、-Iは「ヘッダーファイルをどこで探すか」を指定するオプションです。Xcodeのビルド設定にも<code>header search paths</code>とかいう項目がありますよね。アレですアレ。</p>
<p>これはつまり古代C言語の領域に突入しているわけです。<code>swift build</code>の挙動がよく分からないという人はC++あたりのコンパイラ・リンカの解説記事を読むといいかもしれないです。</p>
<p>決してコンパイラーではありません、コンパイラです。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;いまサーバーサイドSwiftが盛り上がっています。まだ派手に燃えてはいませんが、確実に火がついています。だいたいXamarin勉強会の翌日くらい燃えてます。&lt;/p&gt;
&lt;p&gt;そういう次第でswiftの話です。毎度毎度 &lt;code&gt;swift build -Xswiftc -I
    
    </summary>
    
    
      <category term="Swift" scheme="http://blog.tottokotkd.com/tags/Swift/"/>
    
      <category term="CLion" scheme="http://blog.tottokotkd.com/tags/CLion/"/>
    
      <category term="CMake" scheme="http://blog.tottokotkd.com/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>サイト引っ越しとかいう死語について</title>
    <link href="http://blog.tottokotkd.com/2016/11/20/1/"/>
    <id>http://blog.tottokotkd.com/2016/11/20/1/</id>
    <published>2016-11-20T07:45:39.000Z</published>
    <updated>2017-02-21T11:39:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。</p>
<p>「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と理由はありそうですね。知らんけど。</p>
<p>私なんかは割と「タグ手打ちで工事中」みたいなレトロな世界に馴染みのある人間なんですけど、あの頃は大変だったですねえ… なにしろ世界中で車輪を再発名してましたもんね。今ならtwitterとfacebookでアカウント作って終わりだもん、そりゃインターネットも別世界になるよなあと。</p>
<p>そこで僕も人類の進歩に便乗し、コマンド一発でブログ作れちゃう<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>くんのチカラを使ってみました。ただ現状サーバー料金を払う金がないので、関連するリソースはすべて<a href="https://github.com/tottokotkd/tottokotkd.github.io" target="_blank" rel="external">github</a>くんにあります。完全にタダ乗りだけど、なんか技術っぽい記事をたまに書けば許されると思います。</p>
<p>今ぼんやり考えているのはツイッター関係で一つ、ニュース関係でもう一つ、CUIツールでさらに一つ… でもまあ多分しばらく形にならないので、やむを得ず、本当に仕方なく、どうしても嫌なんだけど不本意ながら、ただの日記みたいな記事を書きます。嗚呼残念だナ。</p>
<p>なおHexo / github関連の記事は書かない。参考情報が沢山あるから今更追加する必要もない。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昔はよく言いましたよねえ、サイトのお引越し。この5年ほどですっかり聞かなくなった印象があります。&lt;/p&gt;
&lt;p&gt;「無償ブログサービスを渡り歩く人が減った」とか、「個人がドメインを持つのが当たり前になった」とか、「Webサイトを持つこと自体が流行らなくなった」とか、まあ色々と
    
    </summary>
    
    
  </entry>
  
</feed>
